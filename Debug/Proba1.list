
Proba1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b158  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800b268  0800b268  0001b268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7ac  0800b7ac  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b7ac  0800b7ac  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b7ac  0800b7ac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7ac  0800b7ac  0001b7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7b0  0800b7b0  0001b7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b7b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001148  200001e4  0800b998  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000132c  0800b998  0002132c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ce5  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f8  00000000  00000000  00035ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  000395f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b02c  00000000  00000000  0003bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015add  00000000  00000000  00056d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009987f  00000000  00000000  0006c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006914  00000000  00000000  001060c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b250 	.word	0x0800b250

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800b250 	.word	0x0800b250

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <vApplicationGetIdleTaskMemory+0x28>)
 8000be8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000200 	.word	0x20000200
 8000c04:	200002b4 	.word	0x200002b4

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	b094      	sub	sp, #80	; 0x50
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f000 fc7d 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f865 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 f969 	bl	8000eec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c1a:	f000 f93d 	bl	8000e98 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000c1e:	f000 f8af 	bl	8000d80 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c22:	f000 f8eb 	bl	8000dfc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1); // On calibration ADC
 8000c26:	4825      	ldr	r0, [pc, #148]	; (8000cbc <main+0xb4>)
 8000c28:	f001 f8a6 	bl	8001d78 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);            // On ADC
 8000c2c:	4823      	ldr	r0, [pc, #140]	; (8000cbc <main+0xb4>)
 8000c2e:	f000 fd77 	bl	8001720 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim3);          // On TIM3
 8000c32:	4823      	ldr	r0, [pc, #140]	; (8000cc0 <main+0xb8>)
 8000c34:	f002 fa7a 	bl	800312c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000c40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 fbbb 	bl	80043c0 <osMutexCreate>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <main+0xbc>)
 8000c4e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 32, float);
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <main+0xc0>)
 8000c52:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000c5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 fbc4 	bl	80043f0 <osMessageCreate>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <main+0xc4>)
 8000c6c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, ADCValue, osPriorityNormal, 0, 128);
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <main+0xc8>)
 8000c70:	f107 041c 	add.w	r4, r7, #28
 8000c74:	461d      	mov	r5, r3
 8000c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fb39 	bl	8004300 <osThreadCreate>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <main+0xcc>)
 8000c92:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, UARTTransmit, osPriorityNormal, 0, 128);
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <main+0xd0>)
 8000c96:	463c      	mov	r4, r7
 8000c98:	461d      	mov	r5, r3
 8000c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 fb28 	bl	8004300 <osThreadCreate>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <main+0xd4>)
 8000cb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cb6:	f003 fb1c 	bl	80042f2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <main+0xb2>
 8000cbc:	200004b4 	.word	0x200004b4
 8000cc0:	200004e4 	.word	0x200004e4
 8000cc4:	2000057c 	.word	0x2000057c
 8000cc8:	0800b278 	.word	0x0800b278
 8000ccc:	20000578 	.word	0x20000578
 8000cd0:	0800b288 	.word	0x0800b288
 8000cd4:	20000570 	.word	0x20000570
 8000cd8:	0800b2a4 	.word	0x0800b2a4
 8000cdc:	20000574 	.word	0x20000574

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	; 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	2228      	movs	r2, #40	; 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f005 fedf 	bl	8006ab2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d14:	2301      	movs	r3, #1
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d18:	2310      	movs	r3, #16
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fbf1 	bl	800250c <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000d30:	f000 f976 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fe5e 	bl	8002a10 <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d5a:	f000 f961 	bl	8001020 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 f819 	bl	8002da0 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d74:	f000 f954 	bl	8001020 <Error_Handler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3750      	adds	r7, #80	; 0x50
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000d92:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <MX_ADC1_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000daa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000dbe:	f000 fbd7 	bl	8001570 <HAL_ADC_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000dc8:	f000 f92a 	bl	8001020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000dde:	f000 fe37 	bl	8001a50 <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000de8:	f000 f91a 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200004b4 	.word	0x200004b4
 8000df8:	40012400 	.word	0x40012400

08000dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	463b      	mov	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <MX_TIM3_Init+0x98>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e20:	2240      	movs	r2, #64	; 0x40
 8000e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e2c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e40:	f002 f924 	bl	800308c <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e4a:	f000 f8e9 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e5c:	f002 fb0a 	bl	8003474 <HAL_TIM_ConfigClockSource>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e66:	f000 f8db 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e78:	f002 fcdc 	bl	8003834 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e82:	f000 f8cd 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200004e4 	.word	0x200004e4
 8000e94:	40000400 	.word	0x40000400

08000e98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <MX_USART1_UART_Init+0x50>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000ea4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000ea8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000ed0:	f002 fd20 	bl	8003914 <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eda:	f000 f8a1 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000052c 	.word	0x2000052c
 8000ee8:	40013800 	.word	0x40013800

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_GPIO_Init+0x28>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <MX_GPIO_Init+0x28>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6193      	str	r3, [r2, #24]
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <MX_GPIO_Init+0x28>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40021000 	.word	0x40021000

08000f18 <ADCValue>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ADCValue */
void ADCValue(void const * argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int16_t adc = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	81fb      	strh	r3, [r7, #14]
		 /* Infinite loop */
	for(;;)
	{
		if( xSemaphoreTake(myMutex01Handle, portMAX_DELAY) == pdTRUE)
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <ADCValue+0x54>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fe9f 	bl	8004c70 <xQueueSemaphoreTake>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d1f5      	bne.n	8000f24 <ADCValue+0xc>
		{
			adc = HAL_ADC_GetValue(&hadc1);
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <ADCValue+0x58>)
 8000f3a:	f000 fca7 	bl	800188c <HAL_ADC_GetValue>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(myQueue01Handle, &adc, 100);
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <ADCValue+0x5c>)
 8000f46:	6818      	ldr	r0, [r3, #0]
 8000f48:	f107 010e 	add.w	r1, r7, #14
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2264      	movs	r2, #100	; 0x64
 8000f50:	f003 fcb0 	bl	80048b4 <xQueueGenericSend>
			xSemaphoreGive(myMutex01Handle);
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <ADCValue+0x54>)
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f003 fca9 	bl	80048b4 <xQueueGenericSend>
			osDelay(100);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f003 fa18 	bl	8004398 <osDelay>
		if( xSemaphoreTake(myMutex01Handle, portMAX_DELAY) == pdTRUE)
 8000f68:	e7dc      	b.n	8000f24 <ADCValue+0xc>
 8000f6a:	bf00      	nop
 8000f6c:	2000057c 	.word	0x2000057c
 8000f70:	200004b4 	.word	0x200004b4
 8000f74:	20000578 	.word	0x20000578

08000f78 <UARTTransmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UARTTransmit */
void UARTTransmit(void const * argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
	char Voltage[] = {};
	int16_t VoltTask2;
  /* Infinite loop */
  for(;;)
  {
	  if( xSemaphoreTake(myMutex01Handle, portMAX_DELAY) == pdTRUE)
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <UARTTransmit+0x74>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fe71 	bl	8004c70 <xQueueSemaphoreTake>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d1f5      	bne.n	8000f80 <UARTTransmit+0x8>
		{
			xQueueReceive(myQueue01Handle, &VoltTask2, 100);
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <UARTTransmit+0x78>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f107 010e 	add.w	r1, r7, #14
 8000f9c:	2264      	movs	r2, #100	; 0x64
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fd86 	bl	8004ab0 <xQueueReceive>
			snprintf(Voltage, 15, "%d.%d\n", VoltTask2, VoltTask2);
 8000fa4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <UARTTransmit+0x7c>)
 8000fb4:	210f      	movs	r1, #15
 8000fb6:	f107 0010 	add.w	r0, r7, #16
 8000fba:	f006 fd03 	bl	80079c4 <sniprintf>
			HAL_UART_Transmit(&huart1, Voltage, strlen(Voltage), 100);
 8000fbe:	f107 0010 	add.w	r0, r7, #16
 8000fc2:	f7ff f8c5 	bl	8000150 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	2364      	movs	r3, #100	; 0x64
 8000fcc:	f107 0110 	add.w	r1, r7, #16
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <UARTTransmit+0x80>)
 8000fd2:	f002 fcec 	bl	80039ae <HAL_UART_Transmit>
			xSemaphoreGive(myMutex01Handle);
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <UARTTransmit+0x74>)
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f003 fc68 	bl	80048b4 <xQueueGenericSend>
			osDelay(100);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f003 f9d7 	bl	8004398 <osDelay>
	  if( xSemaphoreTake(myMutex01Handle, portMAX_DELAY) == pdTRUE)
 8000fea:	e7c9      	b.n	8000f80 <UARTTransmit+0x8>
 8000fec:	2000057c 	.word	0x2000057c
 8000ff0:	20000578 	.word	0x20000578
 8000ff4:	0800b2c0 	.word	0x0800b2c0
 8000ff8:	2000052c 	.word	0x2000052c

08000ffc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100e:	f000 fa93 	bl	8001538 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40012c00 	.word	0x40012c00

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_MspInit+0x4c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_MspInit+0x4c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_MspInit+0x4c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_MspInit+0x4c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_MspInit+0x4c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_MspInit+0x4c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	210f      	movs	r1, #15
 8001066:	f06f 0001 	mvn.w	r0, #1
 800106a:	f000 fff0 	bl	800204e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <HAL_ADC_MspInit+0x7c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d129      	bne.n	80010f0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_ADC_MspInit+0x80>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010cc:	2301      	movs	r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d0:	2303      	movs	r3, #3
 80010d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <HAL_ADC_MspInit+0x84>)
 80010dc:	f001 f892 	bl	8002204 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2105      	movs	r1, #5
 80010e4:	2012      	movs	r0, #18
 80010e6:	f000 ffb2 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010ea:	2012      	movs	r0, #18
 80010ec:	f000 ffcb 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40012400 	.word	0x40012400
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010800 	.word	0x40010800

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a09      	ldr	r2, [pc, #36]	; (8001138 <HAL_TIM_Base_MspInit+0x34>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10b      	bne.n	800112e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_TIM_Base_MspInit+0x38>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_TIM_Base_MspInit+0x38>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_TIM_Base_MspInit+0x38>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40000400 	.word	0x40000400
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a20      	ldr	r2, [pc, #128]	; (80011dc <HAL_UART_MspInit+0x9c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d139      	bne.n	80011d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_UART_MspInit+0xa0>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_UART_MspInit+0xa0>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_UART_MspInit+0xa0>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_UART_MspInit+0xa0>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_UART_MspInit+0xa0>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_UART_MspInit+0xa0>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001194:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <HAL_UART_MspInit+0xa4>)
 80011a6:	f001 f82d 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <HAL_UART_MspInit+0xa4>)
 80011c0:	f001 f820 	bl	8002204 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2105      	movs	r1, #5
 80011c8:	2025      	movs	r0, #37	; 0x25
 80011ca:	f000 ff40 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ce:	2025      	movs	r0, #37	; 0x25
 80011d0:	f000 ff59 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010800 	.word	0x40010800

080011e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <HAL_InitTick+0xd0>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <HAL_InitTick+0xd0>)
 8001204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <HAL_InitTick+0xd0>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001216:	f107 020c 	add.w	r2, r7, #12
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fd6f 	bl	8002d04 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001226:	f001 fd59 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 800122a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_InitTick+0xd4>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	0c9b      	lsrs	r3, r3, #18
 8001236:	3b01      	subs	r3, #1
 8001238:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_InitTick+0xd8>)
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_InitTick+0xdc>)
 800123e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_InitTick+0xd8>)
 8001242:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001246:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_InitTick+0xd8>)
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <HAL_InitTick+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_InitTick+0xd8>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_InitTick+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001260:	4817      	ldr	r0, [pc, #92]	; (80012c0 <HAL_InitTick+0xd8>)
 8001262:	f001 ff13 	bl	800308c <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800126c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001270:	2b00      	cmp	r3, #0
 8001272:	d11b      	bne.n	80012ac <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001274:	4812      	ldr	r0, [pc, #72]	; (80012c0 <HAL_InitTick+0xd8>)
 8001276:	f001 ffa3 	bl	80031c0 <HAL_TIM_Base_Start_IT>
 800127a:	4603      	mov	r3, r0
 800127c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001284:	2b00      	cmp	r3, #0
 8001286:	d111      	bne.n	80012ac <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001288:	2019      	movs	r0, #25
 800128a:	f000 fefc 	bl	8002086 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d808      	bhi.n	80012a6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	2019      	movs	r0, #25
 800129a:	f000 fed8 	bl	800204e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_InitTick+0xe0>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e002      	b.n	80012ac <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3730      	adds	r7, #48	; 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	431bde83 	.word	0x431bde83
 80012c0:	20000580 	.word	0x20000580
 80012c4:	40012c00 	.word	0x40012c00
 80012c8:	20000004 	.word	0x20000004

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
	...

080012f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <ADC1_2_IRQHandler+0x10>)
 80012fe:	f000 fad1 	bl	80018a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200004b4 	.word	0x200004b4

0800130c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM1_UP_IRQHandler+0x10>)
 8001312:	f001 ffa7 	bl	8003264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000580 	.word	0x20000580

08001320 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART1_IRQHandler+0x10>)
 8001326:	f002 fbd5 	bl	8003ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000052c 	.word	0x2000052c

08001334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	return 1;
 8001338:	2301      	movs	r3, #1
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <_kill>:

int _kill(int pid, int sig)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800134c:	f005 fa80 	bl	8006850 <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	2216      	movs	r2, #22
 8001354:	601a      	str	r2, [r3, #0]
	return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_exit>:

void _exit (int status)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800136a:	f04f 31ff 	mov.w	r1, #4294967295
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffe7 	bl	8001342 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001374:	e7fe      	b.n	8001374 <_exit+0x12>

08001376 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e00a      	b.n	800139e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001388:	f3af 8000 	nop.w
 800138c:	4601      	mov	r1, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	60ba      	str	r2, [r7, #8]
 8001394:	b2ca      	uxtb	r2, r1
 8001396:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dbf0      	blt.n	8001388 <_read+0x12>
	}

return len;
 80013a6:	687b      	ldr	r3, [r7, #4]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e009      	b.n	80013d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	60ba      	str	r2, [r7, #8]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dbf1      	blt.n	80013c2 <_write+0x12>
	}
	return len;
 80013de:	687b      	ldr	r3, [r7, #4]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_close>:

int _close(int file)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	return -1;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140e:	605a      	str	r2, [r3, #4]
	return 0;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <_isatty>:

int _isatty(int file)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	return 1;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d207      	bcs.n	8001488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001478:	f005 f9ea 	bl	8006850 <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	e009      	b.n	800149c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20005000 	.word	0x20005000
 80014a8:	00000400 	.word	0x00000400
 80014ac:	200005c8 	.word	0x200005c8
 80014b0:	20001330 	.word	0x20001330

080014b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014e6:	f7ff ffe5 	bl	80014b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f005 faad 	bl	8006a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ee:	f7ff fb8b 	bl	8000c08 <main>
  bx lr
 80014f2:	4770      	bx	lr
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80014fc:	0800b7b4 	.word	0x0800b7b4
  ldr r2, =_sbss
 8001500:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001504:	2000132c 	.word	0x2000132c

08001508 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <CAN1_RX1_IRQHandler>
	...

0800150c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x28>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 fd8b 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	200f      	movs	r0, #15
 8001524:	f7ff fe60 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fd80 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000

08001538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x1c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_IncTick+0x20>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a03      	ldr	r2, [pc, #12]	; (8001558 <HAL_IncTick+0x20>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	20000008 	.word	0x20000008
 8001558:	200005cc 	.word	0x200005cc

0800155c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <HAL_GetTick+0x10>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	200005cc 	.word	0x200005cc

08001570 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0be      	b.n	8001710 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	2b00      	cmp	r3, #0
 800159e:	d109      	bne.n	80015b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fd64 	bl	800107c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fb9d 	bl	8001cf4 <ADC_ConversionStop_Disable>
 80015ba:	4603      	mov	r3, r0
 80015bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f040 8099 	bne.w	80016fe <HAL_ADC_Init+0x18e>
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 8095 	bne.w	80016fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015dc:	f023 0302 	bic.w	r3, r3, #2
 80015e0:	f043 0202 	orr.w	r2, r3, #2
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7b1b      	ldrb	r3, [r3, #12]
 80015f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001608:	d003      	beq.n	8001612 <HAL_ADC_Init+0xa2>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <HAL_ADC_Init+0xa8>
 8001612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001616:	e000      	b.n	800161a <HAL_ADC_Init+0xaa>
 8001618:	2300      	movs	r3, #0
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7d1b      	ldrb	r3, [r3, #20]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d119      	bne.n	800165c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7b1b      	ldrb	r3, [r3, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d109      	bne.n	8001644 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	3b01      	subs	r3, #1
 8001636:	035a      	lsls	r2, r3, #13
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	e00b      	b.n	800165c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	f043 0220 	orr.w	r2, r3, #32
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	430a      	orrs	r2, r1
 800166e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <HAL_ADC_Init+0x1a8>)
 8001678:	4013      	ands	r3, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	430b      	orrs	r3, r1
 8001682:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168c:	d003      	beq.n	8001696 <HAL_ADC_Init+0x126>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d104      	bne.n	80016a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	3b01      	subs	r3, #1
 800169c:	051b      	lsls	r3, r3, #20
 800169e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_ADC_Init+0x1ac>)
 80016bc:	4013      	ands	r3, r2
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d10b      	bne.n	80016dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016da:	e018      	b.n	800170e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f023 0312 	bic.w	r3, r3, #18
 80016e4:	f043 0210 	orr.w	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016fc:	e007      	b.n	800170e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	f043 0210 	orr.w	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800170e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	ffe1f7fd 	.word	0xffe1f7fd
 800171c:	ff1f0efe 	.word	0xff1f0efe

08001720 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADC_Start_IT+0x1a>
 8001736:	2302      	movs	r3, #2
 8001738:	e0a0      	b.n	800187c <HAL_ADC_Start_IT+0x15c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fa7c 	bl	8001c40 <ADC_Enable>
 8001748:	4603      	mov	r3, r0
 800174a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 808f 	bne.w	8001872 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a45      	ldr	r2, [pc, #276]	; (8001884 <HAL_ADC_Start_IT+0x164>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d105      	bne.n	800177e <HAL_ADC_Start_IT+0x5e>
 8001772:	4b45      	ldr	r3, [pc, #276]	; (8001888 <HAL_ADC_Start_IT+0x168>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d115      	bne.n	80017aa <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d026      	beq.n	80017e6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017a8:	e01d      	b.n	80017e6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a33      	ldr	r2, [pc, #204]	; (8001888 <HAL_ADC_Start_IT+0x168>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d004      	beq.n	80017ca <HAL_ADC_Start_IT+0xaa>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a2f      	ldr	r2, [pc, #188]	; (8001884 <HAL_ADC_Start_IT+0x164>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10d      	bne.n	80017e6 <HAL_ADC_Start_IT+0xc6>
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_ADC_Start_IT+0x168>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f023 0206 	bic.w	r2, r3, #6
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017fe:	e002      	b.n	8001806 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f06f 0202 	mvn.w	r2, #2
 8001816:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0220 	orr.w	r2, r2, #32
 8001826:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001832:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001836:	d113      	bne.n	8001860 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <HAL_ADC_Start_IT+0x164>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d105      	bne.n	800184e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_ADC_Start_IT+0x168>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d108      	bne.n	8001860 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	e00c      	b.n	800187a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	e003      	b.n	800187a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40012800 	.word	0x40012800
 8001888:	40012400 	.word	0x40012400

0800188c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d140      	bne.n	800193c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d139      	bne.n	800193c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018ee:	d11d      	bne.n	800192c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d119      	bne.n	800192c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0220 	bic.w	r2, r2, #32
 8001906:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f87c 	bl	8001a2a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f06f 0212 	mvn.w	r2, #18
 800193a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001946:	2b80      	cmp	r3, #128	; 0x80
 8001948:	d14f      	bne.n	80019ea <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b04      	cmp	r3, #4
 8001956:	d148      	bne.n	80019ea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800197a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800197e:	d012      	beq.n	80019a6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800198a:	2b00      	cmp	r3, #0
 800198c:	d125      	bne.n	80019da <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001998:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800199c:	d11d      	bne.n	80019da <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d119      	bne.n	80019da <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fa78 	bl	8001ed0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 020c 	mvn.w	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f4:	2b40      	cmp	r3, #64	; 0x40
 80019f6:	d114      	bne.n	8001a22 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10d      	bne.n	8001a22 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f812 	bl	8001a3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f06f 0201 	mvn.w	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x20>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e0dc      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1da>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b06      	cmp	r3, #6
 8001a7e:	d81c      	bhi.n	8001aba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b05      	subs	r3, #5
 8001a92:	221f      	movs	r2, #31
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4019      	ands	r1, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b05      	subs	r3, #5
 8001aac:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab8:	e03c      	b.n	8001b34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d81c      	bhi.n	8001afc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b23      	subs	r3, #35	; 0x23
 8001ad4:	221f      	movs	r2, #31
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4019      	ands	r1, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	3b23      	subs	r3, #35	; 0x23
 8001aee:	fa00 f203 	lsl.w	r2, r0, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
 8001afa:	e01b      	b.n	8001b34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b41      	subs	r3, #65	; 0x41
 8001b0e:	221f      	movs	r2, #31
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4019      	ands	r1, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	3b41      	subs	r3, #65	; 0x41
 8001b28:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b09      	cmp	r3, #9
 8001b3a:	d91c      	bls.n	8001b76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68d9      	ldr	r1, [r3, #12]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b1e      	subs	r3, #30
 8001b4e:	2207      	movs	r2, #7
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4019      	ands	r1, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6898      	ldr	r0, [r3, #8]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	3b1e      	subs	r3, #30
 8001b68:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	e019      	b.n	8001baa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6919      	ldr	r1, [r3, #16]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	2207      	movs	r2, #7
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	4019      	ands	r1, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6898      	ldr	r0, [r3, #8]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d003      	beq.n	8001bba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bb6:	2b11      	cmp	r3, #17
 8001bb8:	d132      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d125      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d126      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001be0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d11a      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_ADC_ConfigChannel+0x1ec>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	0c9a      	lsrs	r2, r3, #18
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c00:	e002      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f9      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x1b2>
 8001c0e:	e007      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f043 0220 	orr.w	r2, r3, #32
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40012400 	.word	0x40012400
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	431bde83 	.word	0x431bde83

08001c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d040      	beq.n	8001ce0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <ADC_Enable+0xac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <ADC_Enable+0xb0>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	0c9b      	lsrs	r3, r3, #18
 8001c7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c7c:	e002      	b.n	8001c84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f9      	bne.n	8001c7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c8a:	f7ff fc67 	bl	800155c <HAL_GetTick>
 8001c8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c90:	e01f      	b.n	8001cd2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c92:	f7ff fc63 	bl	800155c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d918      	bls.n	8001cd2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d011      	beq.n	8001cd2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	f043 0210 	orr.w	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f043 0201 	orr.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e007      	b.n	8001ce2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d1d8      	bne.n	8001c92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	431bde83 	.word	0x431bde83

08001cf4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d12e      	bne.n	8001d6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d1e:	f7ff fc1d 	bl	800155c <HAL_GetTick>
 8001d22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d24:	e01b      	b.n	8001d5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d26:	f7ff fc19 	bl	800155c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d914      	bls.n	8001d5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10d      	bne.n	8001d5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	f043 0210 	orr.w	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e007      	b.n	8001d6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d0dc      	beq.n	8001d26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_ADCEx_Calibration_Start+0x1e>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e095      	b.n	8001ec2 <HAL_ADCEx_Calibration_Start+0x14a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa8 	bl	8001cf4 <ADC_ConversionStop_Disable>
 8001da4:	4603      	mov	r3, r0
 8001da6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 8084 	bne.w	8001eb8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001db8:	f023 0302 	bic.w	r3, r3, #2
 8001dbc:	f043 0202 	orr.w	r2, r3, #2
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001dc4:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_ADCEx_Calibration_Start+0x154>)
 8001dc6:	681c      	ldr	r4, [r3, #0]
 8001dc8:	2002      	movs	r0, #2
 8001dca:	f001 f89f 	bl	8002f0c <HAL_RCCEx_GetPeriphCLKFreq>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001dd4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001dd6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001dd8:	e002      	b.n	8001de0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f9      	bne.n	8001dda <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff2a 	bl	8001c40 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0208 	orr.w	r2, r2, #8
 8001dfa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001dfc:	f7ff fbae 	bl	800155c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e02:	e01b      	b.n	8001e3c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e04:	f7ff fbaa 	bl	800155c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b0a      	cmp	r3, #10
 8001e10:	d914      	bls.n	8001e3c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00d      	beq.n	8001e3c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	f023 0312 	bic.w	r3, r3, #18
 8001e28:	f043 0210 	orr.w	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e042      	b.n	8001ec2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1dc      	bne.n	8001e04 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0204 	orr.w	r2, r2, #4
 8001e58:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e5a:	f7ff fb7f 	bl	800155c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e60:	e01b      	b.n	8001e9a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e62:	f7ff fb7b 	bl	800155c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b0a      	cmp	r3, #10
 8001e6e:	d914      	bls.n	8001e9a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	f023 0312 	bic.w	r3, r3, #18
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e013      	b.n	8001ec2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1dc      	bne.n	8001e62 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	f023 0303 	bic.w	r3, r3, #3
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000

08001ed0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
	...

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4906      	ldr	r1, [pc, #24]	; (8001f7c <__NVIC_EnableIRQ+0x34>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	; (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	; (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
         );
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff4f 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff64 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ffb2 	bl	8001fd4 <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff81 	bl	8001f80 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff57 	bl	8001f48 <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d008      	beq.n	80020ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2204      	movs	r2, #4
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e020      	b.n	800210c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 020e 	bic.w	r2, r2, #14
 80020d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
	...

08002118 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212a:	2b02      	cmp	r3, #2
 800212c:	d005      	beq.n	800213a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2204      	movs	r2, #4
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e051      	b.n	80021de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 020e 	bic.w	r2, r2, #14
 8002148:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_DMA_Abort_IT+0xd0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d029      	beq.n	80021b8 <HAL_DMA_Abort_IT+0xa0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <HAL_DMA_Abort_IT+0xd4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d022      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x9c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_DMA_Abort_IT+0xd8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01a      	beq.n	80021ae <HAL_DMA_Abort_IT+0x96>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_DMA_Abort_IT+0xdc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d012      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x90>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_DMA_Abort_IT+0xe0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00a      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x8a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <HAL_DMA_Abort_IT+0xe4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d102      	bne.n	800219c <HAL_DMA_Abort_IT+0x84>
 8002196:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800219a:	e00e      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 800219c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a0:	e00b      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a6:	e008      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ac:	e005      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b2:	e002      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021b4:	2310      	movs	r3, #16
 80021b6:	e000      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021b8:	2301      	movs	r3, #1
 80021ba:	4a11      	ldr	r2, [pc, #68]	; (8002200 <HAL_DMA_Abort_IT+0xe8>)
 80021bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	4798      	blx	r3
    } 
  }
  return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020008 	.word	0x40020008
 80021ec:	4002001c 	.word	0x4002001c
 80021f0:	40020030 	.word	0x40020030
 80021f4:	40020044 	.word	0x40020044
 80021f8:	40020058 	.word	0x40020058
 80021fc:	4002006c 	.word	0x4002006c
 8002200:	40020000 	.word	0x40020000

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b08b      	sub	sp, #44	; 0x2c
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002216:	e169      	b.n	80024ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002218:	2201      	movs	r2, #1
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 8158 	bne.w	80024e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a9a      	ldr	r2, [pc, #616]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d05e      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002240:	4a98      	ldr	r2, [pc, #608]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d875      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 8002246:	4a98      	ldr	r2, [pc, #608]	; (80024a8 <HAL_GPIO_Init+0x2a4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d058      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 800224c:	4a96      	ldr	r2, [pc, #600]	; (80024a8 <HAL_GPIO_Init+0x2a4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d86f      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 8002252:	4a96      	ldr	r2, [pc, #600]	; (80024ac <HAL_GPIO_Init+0x2a8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d052      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002258:	4a94      	ldr	r2, [pc, #592]	; (80024ac <HAL_GPIO_Init+0x2a8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d869      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 800225e:	4a94      	ldr	r2, [pc, #592]	; (80024b0 <HAL_GPIO_Init+0x2ac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d04c      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002264:	4a92      	ldr	r2, [pc, #584]	; (80024b0 <HAL_GPIO_Init+0x2ac>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d863      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 800226a:	4a92      	ldr	r2, [pc, #584]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d046      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002270:	4a90      	ldr	r2, [pc, #576]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d85d      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 8002276:	2b12      	cmp	r3, #18
 8002278:	d82a      	bhi.n	80022d0 <HAL_GPIO_Init+0xcc>
 800227a:	2b12      	cmp	r3, #18
 800227c:	d859      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 800227e:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <HAL_GPIO_Init+0x80>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	080022ff 	.word	0x080022ff
 8002288:	080022d9 	.word	0x080022d9
 800228c:	080022eb 	.word	0x080022eb
 8002290:	0800232d 	.word	0x0800232d
 8002294:	08002333 	.word	0x08002333
 8002298:	08002333 	.word	0x08002333
 800229c:	08002333 	.word	0x08002333
 80022a0:	08002333 	.word	0x08002333
 80022a4:	08002333 	.word	0x08002333
 80022a8:	08002333 	.word	0x08002333
 80022ac:	08002333 	.word	0x08002333
 80022b0:	08002333 	.word	0x08002333
 80022b4:	08002333 	.word	0x08002333
 80022b8:	08002333 	.word	0x08002333
 80022bc:	08002333 	.word	0x08002333
 80022c0:	08002333 	.word	0x08002333
 80022c4:	08002333 	.word	0x08002333
 80022c8:	080022e1 	.word	0x080022e1
 80022cc:	080022f5 	.word	0x080022f5
 80022d0:	4a79      	ldr	r2, [pc, #484]	; (80024b8 <HAL_GPIO_Init+0x2b4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022d6:	e02c      	b.n	8002332 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e029      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	3304      	adds	r3, #4
 80022e6:	623b      	str	r3, [r7, #32]
          break;
 80022e8:	e024      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	3308      	adds	r3, #8
 80022f0:	623b      	str	r3, [r7, #32]
          break;
 80022f2:	e01f      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	330c      	adds	r3, #12
 80022fa:	623b      	str	r3, [r7, #32]
          break;
 80022fc:	e01a      	b.n	8002334 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002306:	2304      	movs	r3, #4
 8002308:	623b      	str	r3, [r7, #32]
          break;
 800230a:	e013      	b.n	8002334 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	611a      	str	r2, [r3, #16]
          break;
 800231e:	e009      	b.n	8002334 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002320:	2308      	movs	r3, #8
 8002322:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	615a      	str	r2, [r3, #20]
          break;
 800232a:	e003      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x130>
          break;
 8002332:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2bff      	cmp	r3, #255	; 0xff
 8002338:	d801      	bhi.n	800233e <HAL_GPIO_Init+0x13a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	e001      	b.n	8002342 <HAL_GPIO_Init+0x13e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2bff      	cmp	r3, #255	; 0xff
 8002348:	d802      	bhi.n	8002350 <HAL_GPIO_Init+0x14c>
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x152>
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	3b08      	subs	r3, #8
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	210f      	movs	r1, #15
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	401a      	ands	r2, r3
 8002368:	6a39      	ldr	r1, [r7, #32]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	431a      	orrs	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80b1 	beq.w	80024e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a4c      	ldr	r2, [pc, #304]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800239c:	4a48      	ldr	r2, [pc, #288]	; (80024c0 <HAL_GPIO_Init+0x2bc>)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a40      	ldr	r2, [pc, #256]	; (80024c4 <HAL_GPIO_Init+0x2c0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <HAL_GPIO_Init+0x1ec>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <HAL_GPIO_Init+0x2c4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00d      	beq.n	80023ec <HAL_GPIO_Init+0x1e8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3e      	ldr	r2, [pc, #248]	; (80024cc <HAL_GPIO_Init+0x2c8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <HAL_GPIO_Init+0x1e4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3d      	ldr	r2, [pc, #244]	; (80024d0 <HAL_GPIO_Init+0x2cc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_GPIO_Init+0x1e0>
 80023e0:	2303      	movs	r3, #3
 80023e2:	e006      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e004      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023f0:	2300      	movs	r3, #0
 80023f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f4:	f002 0203 	and.w	r2, r2, #3
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	4093      	lsls	r3, r2
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002402:	492f      	ldr	r1, [pc, #188]	; (80024c0 <HAL_GPIO_Init+0x2bc>)
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	492c      	ldr	r1, [pc, #176]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	43db      	mvns	r3, r3
 8002432:	4928      	ldr	r1, [pc, #160]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002434:	4013      	ands	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4922      	ldr	r1, [pc, #136]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	43db      	mvns	r3, r3
 800245a:	491e      	ldr	r1, [pc, #120]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800245c:	4013      	ands	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4918      	ldr	r1, [pc, #96]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	43db      	mvns	r3, r3
 8002482:	4914      	ldr	r1, [pc, #80]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002484:	4013      	ands	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d021      	beq.n	80024d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	60cb      	str	r3, [r1, #12]
 80024a0:	e021      	b.n	80024e6 <HAL_GPIO_Init+0x2e2>
 80024a2:	bf00      	nop
 80024a4:	10320000 	.word	0x10320000
 80024a8:	10310000 	.word	0x10310000
 80024ac:	10220000 	.word	0x10220000
 80024b0:	10210000 	.word	0x10210000
 80024b4:	10120000 	.word	0x10120000
 80024b8:	10110000 	.word	0x10110000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40010800 	.word	0x40010800
 80024c8:	40010c00 	.word	0x40010c00
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40011400 	.word	0x40011400
 80024d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_GPIO_Init+0x304>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	43db      	mvns	r3, r3
 80024e0:	4909      	ldr	r1, [pc, #36]	; (8002508 <HAL_GPIO_Init+0x304>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	3301      	adds	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f47f ae8e 	bne.w	8002218 <HAL_GPIO_Init+0x14>
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	372c      	adds	r7, #44	; 0x2c
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e272      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8087 	beq.w	800263a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800252c:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b04      	cmp	r3, #4
 8002536:	d00c      	beq.n	8002552 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002538:	4b8f      	ldr	r3, [pc, #572]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d112      	bne.n	800256a <HAL_RCC_OscConfig+0x5e>
 8002544:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d10b      	bne.n	800256a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002552:	4b89      	ldr	r3, [pc, #548]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d06c      	beq.n	8002638 <HAL_RCC_OscConfig+0x12c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d168      	bne.n	8002638 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e24c      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x76>
 8002574:	4b80      	ldr	r3, [pc, #512]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a7f      	ldr	r2, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800257a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e02e      	b.n	80025e0 <HAL_RCC_OscConfig+0xd4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x98>
 800258a:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7a      	ldr	r2, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b78      	ldr	r3, [pc, #480]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a77      	ldr	r2, [pc, #476]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e01d      	b.n	80025e0 <HAL_RCC_OscConfig+0xd4>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0xbc>
 80025ae:	4b72      	ldr	r3, [pc, #456]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a71      	ldr	r2, [pc, #452]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0xd4>
 80025c8:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6a      	ldr	r2, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe ffb8 	bl	800155c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe ffb4 	bl	800155c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e200      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0xe4>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe ffa4 	bl	800155c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe ffa0 	bl	800155c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1ec      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x10c>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d063      	beq.n	800270e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002646:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b08      	cmp	r3, #8
 800265c:	d11c      	bne.n	8002698 <HAL_RCC_OscConfig+0x18c>
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d116      	bne.n	8002698 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x176>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e1c0      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4939      	ldr	r1, [pc, #228]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	e03a      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d020      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe ff59 	bl	800155c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ae:	f7fe ff55 	bl	800155c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1a1      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4927      	ldr	r1, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe ff38 	bl	800155c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f0:	f7fe ff34 	bl	800155c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e180      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03a      	beq.n	8002790 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d019      	beq.n	8002756 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7fe ff18 	bl	800155c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002730:	f7fe ff14 	bl	800155c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e160      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800274e:	2001      	movs	r0, #1
 8002750:	f000 fb08 	bl	8002d64 <RCC_Delay>
 8002754:	e01c      	b.n	8002790 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275c:	f7fe fefe 	bl	800155c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002762:	e00f      	b.n	8002784 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe fefa 	bl	800155c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d908      	bls.n	8002784 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e146      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	42420000 	.word	0x42420000
 8002780:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e9      	bne.n	8002764 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a6 	beq.w	80028ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10d      	bne.n	80027ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a87      	ldr	r2, [pc, #540]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	61d3      	str	r3, [r2, #28]
 80027ba:	4b85      	ldr	r3, [pc, #532]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ca:	4b82      	ldr	r3, [pc, #520]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d118      	bne.n	8002808 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d6:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a7e      	ldr	r2, [pc, #504]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e2:	f7fe febb 	bl	800155c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7fe feb7 	bl	800155c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b64      	cmp	r3, #100	; 0x64
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e103      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	4b75      	ldr	r3, [pc, #468]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x312>
 8002810:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	e02d      	b.n	800287a <HAL_RCC_OscConfig+0x36e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x334>
 8002826:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a69      	ldr	r2, [pc, #420]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6213      	str	r3, [r2, #32]
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a66      	ldr	r2, [pc, #408]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	e01c      	b.n	800287a <HAL_RCC_OscConfig+0x36e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d10c      	bne.n	8002862 <HAL_RCC_OscConfig+0x356>
 8002848:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4a60      	ldr	r2, [pc, #384]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	f043 0304 	orr.w	r3, r3, #4
 8002852:	6213      	str	r3, [r2, #32]
 8002854:	4b5e      	ldr	r3, [pc, #376]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4a5d      	ldr	r2, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6213      	str	r3, [r2, #32]
 8002860:	e00b      	b.n	800287a <HAL_RCC_OscConfig+0x36e>
 8002862:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6213      	str	r3, [r2, #32]
 800286e:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a57      	ldr	r2, [pc, #348]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 0304 	bic.w	r3, r3, #4
 8002878:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d015      	beq.n	80028ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fe6b 	bl	800155c <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe fe67 	bl	800155c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0b1      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ee      	beq.n	800288a <HAL_RCC_OscConfig+0x37e>
 80028ac:	e014      	b.n	80028d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fe55 	bl	800155c <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fe fe51 	bl	800155c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e09b      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028cc:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ee      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8087 	beq.w	8002a02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d061      	beq.n	80029c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d146      	bne.n	8002996 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe fe25 	bl	800155c <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fe21 	bl	800155c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e06d      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d108      	bne.n	8002950 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4921      	ldr	r1, [pc, #132]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a19      	ldr	r1, [r3, #32]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	430b      	orrs	r3, r1
 8002962:	491b      	ldr	r1, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x4cc>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7fe fdf5 	bl	800155c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002976:	f7fe fdf1 	bl	800155c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e03d      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x46a>
 8002994:	e035      	b.n	8002a02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_OscConfig+0x4cc>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe fdde 	bl	800155c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fdda 	bl	800155c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e026      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x498>
 80029c2:	e01e      	b.n	8002a02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e019      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x500>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0d0      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d910      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 0207 	bic.w	r2, r3, #7
 8002a3a:	4965      	ldr	r1, [pc, #404]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b8      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a58      	ldr	r2, [pc, #352]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a84:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	494d      	ldr	r1, [pc, #308]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d040      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d115      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e073      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e06b      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4936      	ldr	r1, [pc, #216]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fd2c 	bl	800155c <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fe fd28 	bl	800155c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e053      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d210      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4922      	ldr	r1, [pc, #136]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e032      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	490e      	ldr	r1, [pc, #56]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9e:	f000 f821 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	490a      	ldr	r1, [pc, #40]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x1cc>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x1d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fb12 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	0800b2f0 	.word	0x0800b2f0
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be4:	b490      	push	{r4, r7}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xac>)
 8002bec:	1d3c      	adds	r4, r7, #4
 8002bee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bf4:	f240 2301 	movw	r3, #513	; 0x201
 8002bf8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c0e:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d002      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x40>
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x46>
 8002c22:	e02b      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c26:	623b      	str	r3, [r7, #32]
      break;
 8002c28:	e02b      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3328      	adds	r3, #40	; 0x28
 8002c34:	443b      	add	r3, r7
 8002c36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c3a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	0c5b      	lsrs	r3, r3, #17
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	3328      	adds	r3, #40	; 0x28
 8002c52:	443b      	add	r3, r7
 8002c54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c5e:	fb03 f202 	mul.w	r2, r3, r2
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6a:	e004      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	623b      	str	r3, [r7, #32]
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c7e:	623b      	str	r3, [r7, #32]
      break;
 8002c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c82:	6a3b      	ldr	r3, [r7, #32]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3728      	adds	r7, #40	; 0x28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc90      	pop	{r4, r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	0800b2c8 	.word	0x0800b2c8
 8002c94:	40021000 	.word	0x40021000
 8002c98:	007a1200 	.word	0x007a1200
 8002c9c:	003d0900 	.word	0x003d0900

08002ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cb8:	f7ff fff2 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4903      	ldr	r1, [pc, #12]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	0800b300 	.word	0x0800b300

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ce0:	f7ff ffde 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0adb      	lsrs	r3, r3, #11
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	0800b300 	.word	0x0800b300

08002d04 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	220f      	movs	r2, #15
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_RCC_GetClockConfig+0x58>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0203 	and.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_RCC_GetClockConfig+0x58>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_GetClockConfig+0x58>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_RCC_GetClockConfig+0x58>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	08db      	lsrs	r3, r3, #3
 8002d3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0207 	and.w	r2, r3, #7
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40022000 	.word	0x40022000

08002d64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <RCC_Delay+0x34>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <RCC_Delay+0x38>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a5b      	lsrs	r3, r3, #9
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d80:	bf00      	nop
  }
  while (Delay --);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e5a      	subs	r2, r3, #1
 8002d86:	60fa      	str	r2, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f9      	bne.n	8002d80 <RCC_Delay+0x1c>
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	10624dd3 	.word	0x10624dd3

08002da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d07d      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4a4b      	ldr	r2, [pc, #300]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	61d3      	str	r3, [r2, #28]
 8002dd8:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de4:	2301      	movs	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d118      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a42      	ldr	r2, [pc, #264]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e00:	f7fe fbac 	bl	800155c <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	e008      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe fba8 	bl	800155c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e06d      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e26:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d02e      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d027      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e44:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e54:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e5a:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d014      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fb77 	bl	800155c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe fb73 	bl	800155c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e036      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ee      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4917      	ldr	r1, [pc, #92]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	490b      	ldr	r1, [pc, #44]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ee2:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4904      	ldr	r1, [pc, #16]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	42420440 	.word	0x42420440

08002f0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b08d      	sub	sp, #52	; 0x34
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f14:	4b58      	ldr	r3, [pc, #352]	; (8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002f16:	f107 040c 	add.w	r4, r7, #12
 8002f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f20:	f240 2301 	movw	r3, #513	; 0x201
 8002f24:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	2300      	movs	r3, #0
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	f200 808e 	bhi.w	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d049      	beq.n	8002fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d079      	beq.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f54:	e086      	b.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002f56:	4b49      	ldr	r3, [pc, #292]	; (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f5c:	4b47      	ldr	r3, [pc, #284]	; (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d07f      	beq.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	0c9b      	lsrs	r3, r3, #18
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	3330      	adds	r3, #48	; 0x30
 8002f72:	443b      	add	r3, r7
 8002f74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f78:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d017      	beq.n	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f84:	4b3d      	ldr	r3, [pc, #244]	; (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	0c5b      	lsrs	r3, r3, #17
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	3330      	adds	r3, #48	; 0x30
 8002f90:	443b      	add	r3, r7
 8002f92:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002fa2:	4a37      	ldr	r2, [pc, #220]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb2:	e004      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	4a33      	ldr	r2, [pc, #204]	; (8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fca:	d102      	bne.n	8002fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002fd0:	e04a      	b.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4a2c      	ldr	r2, [pc, #176]	; (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002fe0:	e042      	b.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff2:	d108      	bne.n	8003006 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
 8003004:	e01f      	b.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003010:	d109      	bne.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800301e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
 8003024:	e00f      	b.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003030:	d11c      	bne.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800303e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003042:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003044:	e012      	b.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003046:	e011      	b.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003048:	f7ff fe48 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0b9b      	lsrs	r3, r3, #14
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	3301      	adds	r3, #1
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003062:	e004      	b.n	800306e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003064:	bf00      	nop
 8003066:	e002      	b.n	800306e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003068:	bf00      	nop
 800306a:	e000      	b.n	800306e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800306c:	bf00      	nop
    }
  }
  return (frequency);
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003070:	4618      	mov	r0, r3
 8003072:	3734      	adds	r7, #52	; 0x34
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}
 8003078:	0800b2d8 	.word	0x0800b2d8
 800307c:	40021000 	.word	0x40021000
 8003080:	007a1200 	.word	0x007a1200
 8003084:	003d0900 	.word	0x003d0900
 8003088:	aaaaaaab 	.word	0xaaaaaaab

0800308c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e041      	b.n	8003122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe f826 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f000 faba 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d001      	beq.n	8003144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e032      	b.n	80031aa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_TIM_Base_Start+0x88>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_TIM_Base_Start+0x48>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315e:	d009      	beq.n	8003174 <HAL_TIM_Base_Start+0x48>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <HAL_TIM_Base_Start+0x8c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_TIM_Base_Start+0x48>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a13      	ldr	r2, [pc, #76]	; (80031bc <HAL_TIM_Base_Start+0x90>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b06      	cmp	r3, #6
 8003184:	d010      	beq.n	80031a8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003196:	e007      	b.n	80031a8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800

080031c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d001      	beq.n	80031d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e03a      	b.n	800324e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a18      	ldr	r2, [pc, #96]	; (8003258 <HAL_TIM_Base_Start_IT+0x98>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00e      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x58>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003202:	d009      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x58>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a14      	ldr	r2, [pc, #80]	; (800325c <HAL_TIM_Base_Start_IT+0x9c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x58>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a13      	ldr	r2, [pc, #76]	; (8003260 <HAL_TIM_Base_Start_IT+0xa0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d111      	bne.n	800323c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b06      	cmp	r3, #6
 8003228:	d010      	beq.n	800324c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	e007      	b.n	800324c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800

08003264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	d122      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d11b      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0202 	mvn.w	r2, #2
 8003290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9b1 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9a4 	bl	80035fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f9b3 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d122      	bne.n	8003314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d11b      	bne.n	8003314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0204 	mvn.w	r2, #4
 80032e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f987 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f97a 	bl	80035fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f989 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b08      	cmp	r3, #8
 8003320:	d122      	bne.n	8003368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d11b      	bne.n	8003368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0208 	mvn.w	r2, #8
 8003338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f95d 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f950 	bl	80035fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f95f 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b10      	cmp	r3, #16
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b10      	cmp	r3, #16
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0210 	mvn.w	r2, #16
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2208      	movs	r2, #8
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f933 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f926 	bl	80035fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f935 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d10e      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d107      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0201 	mvn.w	r2, #1
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fe0a 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b80      	cmp	r3, #128	; 0x80
 80033f4:	d10e      	bne.n	8003414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d107      	bne.n	8003414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fa77 	bl	8003902 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f8f9 	bl	8003632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b20      	cmp	r3, #32
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b20      	cmp	r3, #32
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0220 	mvn.w	r2, #32
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa42 	bl	80038f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800346c:	bf00      	nop
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_TIM_ConfigClockSource+0x18>
 8003488:	2302      	movs	r3, #2
 800348a:	e0b3      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x180>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c4:	d03e      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0xd0>
 80034c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ca:	f200 8087 	bhi.w	80035dc <HAL_TIM_ConfigClockSource+0x168>
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	f000 8085 	beq.w	80035e0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034da:	d87f      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x168>
 80034dc:	2b70      	cmp	r3, #112	; 0x70
 80034de:	d01a      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0xa2>
 80034e0:	2b70      	cmp	r3, #112	; 0x70
 80034e2:	d87b      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x168>
 80034e4:	2b60      	cmp	r3, #96	; 0x60
 80034e6:	d050      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x116>
 80034e8:	2b60      	cmp	r3, #96	; 0x60
 80034ea:	d877      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x168>
 80034ec:	2b50      	cmp	r3, #80	; 0x50
 80034ee:	d03c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0xf6>
 80034f0:	2b50      	cmp	r3, #80	; 0x50
 80034f2:	d873      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x168>
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d058      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x136>
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d86f      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x168>
 80034fc:	2b30      	cmp	r3, #48	; 0x30
 80034fe:	d064      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x156>
 8003500:	2b30      	cmp	r3, #48	; 0x30
 8003502:	d86b      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x168>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d060      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x156>
 8003508:	2b20      	cmp	r3, #32
 800350a:	d867      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x168>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05c      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x156>
 8003510:	2b10      	cmp	r3, #16
 8003512:	d05a      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003514:	e062      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6899      	ldr	r1, [r3, #8]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f000 f966 	bl	80037f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003538:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
      break;
 8003542:	e04e      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f000 f94f 	bl	80037f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003566:	609a      	str	r2, [r3, #8]
      break;
 8003568:	e03b      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	461a      	mov	r2, r3
 8003578:	f000 f8c6 	bl	8003708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2150      	movs	r1, #80	; 0x50
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f91d 	bl	80037c2 <TIM_ITRx_SetConfig>
      break;
 8003588:	e02b      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	461a      	mov	r2, r3
 8003598:	f000 f8e4 	bl	8003764 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2160      	movs	r1, #96	; 0x60
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f90d 	bl	80037c2 <TIM_ITRx_SetConfig>
      break;
 80035a8:	e01b      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f000 f8a6 	bl	8003708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2140      	movs	r1, #64	; 0x40
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f8fd 	bl	80037c2 <TIM_ITRx_SetConfig>
      break;
 80035c8:	e00b      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f000 f8f4 	bl	80037c2 <TIM_ITRx_SetConfig>
        break;
 80035da:	e002      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035dc:	bf00      	nop
 80035de:	e000      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a29      	ldr	r2, [pc, #164]	; (80036fc <TIM_Base_SetConfig+0xb8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_Base_SetConfig+0x30>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003662:	d007      	beq.n	8003674 <TIM_Base_SetConfig+0x30>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a26      	ldr	r2, [pc, #152]	; (8003700 <TIM_Base_SetConfig+0xbc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0x30>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a25      	ldr	r2, [pc, #148]	; (8003704 <TIM_Base_SetConfig+0xc0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d108      	bne.n	8003686 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <TIM_Base_SetConfig+0xb8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_Base_SetConfig+0x62>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0x62>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <TIM_Base_SetConfig+0xbc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0x62>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a18      	ldr	r2, [pc, #96]	; (8003704 <TIM_Base_SetConfig+0xc0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a07      	ldr	r2, [pc, #28]	; (80036fc <TIM_Base_SetConfig+0xb8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800

08003708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0201 	bic.w	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 030a 	bic.w	r3, r3, #10
 8003744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f023 0210 	bic.w	r2, r3, #16
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800378e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	031b      	lsls	r3, r3, #12
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	621a      	str	r2, [r3, #32]
}
 80037b8:	bf00      	nop
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b085      	sub	sp, #20
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	f043 0307 	orr.w	r3, r3, #7
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b087      	sub	sp, #28
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003810:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	431a      	orrs	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4313      	orrs	r3, r2
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	609a      	str	r2, [r3, #8]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003848:	2302      	movs	r3, #2
 800384a:	e046      	b.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003898:	d009      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a10      	ldr	r2, [pc, #64]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10c      	bne.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800

080038f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e03f      	b.n	80039a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd fc00 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	; 0x24
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fc25 	bl	80041a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800396c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800398c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b08a      	sub	sp, #40	; 0x28
 80039b2:	af02      	add	r7, sp, #8
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d17c      	bne.n	8003ac8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_Transmit+0x2c>
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e075      	b.n	8003aca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Transmit+0x3e>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e06e      	b.n	8003aca <HAL_UART_Transmit+0x11c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2221      	movs	r2, #33	; 0x21
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a02:	f7fd fdab 	bl	800155c <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1c:	d108      	bne.n	8003a30 <HAL_UART_Transmit+0x82>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d104      	bne.n	8003a30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	e003      	b.n	8003a38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a40:	e02a      	b.n	8003a98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fa11 	bl	8003e74 <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e036      	b.n	8003aca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	3302      	adds	r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e007      	b.n	8003a8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3301      	adds	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1cf      	bne.n	8003a42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2140      	movs	r1, #64	; 0x40
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f9e1 	bl	8003e74 <UART_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e006      	b.n	8003aca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_UART_IRQHandler+0x52>
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa99 	bl	8004056 <UART_Receive_IT>
      return;
 8003b24:	e17b      	b.n	8003e1e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80b1 	beq.w	8003c90 <HAL_UART_IRQHandler+0x1bc>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d105      	bne.n	8003b44 <HAL_UART_IRQHandler+0x70>
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80a6 	beq.w	8003c90 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_UART_IRQHandler+0x90>
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_UART_IRQHandler+0xb0>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f043 0202 	orr.w	r2, r3, #2
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_UART_IRQHandler+0xd0>
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f043 0204 	orr.w	r2, r3, #4
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00f      	beq.n	8003bce <HAL_UART_IRQHandler+0xfa>
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <HAL_UART_IRQHandler+0xee>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f043 0208 	orr.w	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 811e 	beq.w	8003e14 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x11e>
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fa32 	bl	8004056 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <HAL_UART_IRQHandler+0x146>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d031      	beq.n	8003c7e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f974 	bl	8003f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d023      	beq.n	8003c76 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	4a76      	ldr	r2, [pc, #472]	; (8003e24 <HAL_UART_IRQHandler+0x350>)
 8003c4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fa60 	bl	8002118 <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d016      	beq.n	8003c8c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e00e      	b.n	8003c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8ec 	bl	8003e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	e00a      	b.n	8003c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8e8 	bl	8003e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e006      	b.n	8003c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8e4 	bl	8003e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c8a:	e0c3      	b.n	8003e14 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	bf00      	nop
    return;
 8003c8e:	e0c1      	b.n	8003e14 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	f040 80a1 	bne.w	8003ddc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 809b 	beq.w	8003ddc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8095 	beq.w	8003ddc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d04e      	beq.n	8003d74 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ce0:	8a3b      	ldrh	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8098 	beq.w	8003e18 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cec:	8a3a      	ldrh	r2, [r7, #16]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	f080 8092 	bcs.w	8003e18 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8a3a      	ldrh	r2, [r7, #16]
 8003cf8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d02b      	beq.n	8003d5c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d12:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d32:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0210 	bic.w	r2, r2, #16
 8003d50:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe f9a3 	bl	80020a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f876 	bl	8003e5e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d72:	e051      	b.n	8003e18 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d047      	beq.n	8003e1c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d8c:	8a7b      	ldrh	r3, [r7, #18]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d044      	beq.n	8003e1c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003da0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0210 	bic.w	r2, r2, #16
 8003dce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dd0:	8a7b      	ldrh	r3, [r7, #18]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f842 	bl	8003e5e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003dda:	e01f      	b.n	8003e1c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_UART_IRQHandler+0x324>
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f8c9 	bl	8003f88 <UART_Transmit_IT>
    return;
 8003df6:	e012      	b.n	8003e1e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_UART_IRQHandler+0x34a>
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f90a 	bl	8004026 <UART_EndTransmit_IT>
    return;
 8003e12:	e004      	b.n	8003e1e <HAL_UART_IRQHandler+0x34a>
    return;
 8003e14:	bf00      	nop
 8003e16:	e002      	b.n	8003e1e <HAL_UART_IRQHandler+0x34a>
      return;
 8003e18:	bf00      	nop
 8003e1a:	e000      	b.n	8003e1e <HAL_UART_IRQHandler+0x34a>
      return;
 8003e1c:	bf00      	nop
  }
}
 8003e1e:	3728      	adds	r7, #40	; 0x28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	08003f61 	.word	0x08003f61

08003e28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e84:	e02c      	b.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d028      	beq.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e94:	f7fd fb62 	bl	800155c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d21d      	bcs.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003eb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e00f      	b.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d0c3      	beq.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0210 	bic.w	r2, r2, #16
 8003f46:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff ff66 	bl	8003e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b21      	cmp	r3, #33	; 0x21
 8003f9a:	d13e      	bne.n	800401a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d114      	bne.n	8003fd0 <UART_Transmit_IT+0x48>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d110      	bne.n	8003fd0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	1c9a      	adds	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]
 8003fce:	e008      	b.n	8003fe2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	1c59      	adds	r1, r3, #1
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6211      	str	r1, [r2, #32]
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004004:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004014:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff feee 	bl	8003e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b22      	cmp	r3, #34	; 0x22
 8004068:	f040 8099 	bne.w	800419e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004074:	d117      	bne.n	80040a6 <UART_Receive_IT+0x50>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d113      	bne.n	80040a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004094:	b29a      	uxth	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28
 80040a4:	e026      	b.n	80040f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d007      	beq.n	80040ca <UART_Receive_IT+0x74>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <UART_Receive_IT+0x82>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e008      	b.n	80040ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	4619      	mov	r1, r3
 8004102:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004104:	2b00      	cmp	r3, #0
 8004106:	d148      	bne.n	800419a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0220 	bic.w	r2, r2, #32
 8004116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	2b01      	cmp	r3, #1
 8004146:	d123      	bne.n	8004190 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0210 	bic.w	r2, r2, #16
 800415c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b10      	cmp	r3, #16
 800416a:	d10a      	bne.n	8004182 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fe68 	bl	8003e5e <HAL_UARTEx_RxEventCallback>
 800418e:	e002      	b.n	8004196 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fe52 	bl	8003e3a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e002      	b.n	80041a0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041e2:	f023 030c 	bic.w	r3, r3, #12
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <UART_SetConfig+0x114>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004210:	f7fe fd64 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	e002      	b.n	800421e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7fe fd4c 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 800421c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <UART_SetConfig+0x118>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	0119      	lsls	r1, r3, #4
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f2f3 	udiv	r2, r2, r3
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <UART_SetConfig+0x118>)
 8004256:	fba3 0302 	umull	r0, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2064      	movs	r0, #100	; 0x64
 800425e:	fb00 f303 	mul.w	r3, r0, r3
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	3332      	adds	r3, #50	; 0x32
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <UART_SetConfig+0x118>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004274:	4419      	add	r1, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009a      	lsls	r2, r3, #2
 8004280:	441a      	add	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fbb2 f2f3 	udiv	r2, r2, r3
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <UART_SetConfig+0x118>)
 800428e:	fba3 0302 	umull	r0, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2064      	movs	r0, #100	; 0x64
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	3332      	adds	r3, #50	; 0x32
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <UART_SetConfig+0x118>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	440a      	add	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40013800 	.word	0x40013800
 80042c0:	51eb851f 	.word	0x51eb851f

080042c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042d6:	2b84      	cmp	r3, #132	; 0x84
 80042d8:	d005      	beq.n	80042e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	3303      	adds	r3, #3
 80042e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042f6:	f001 f8c3 	bl	8005480 <vTaskStartScheduler>
  
  return osOK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}

08004300 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af04      	add	r7, sp, #16
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d020      	beq.n	8004354 <osThreadCreate+0x54>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01c      	beq.n	8004354 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685c      	ldr	r4, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681d      	ldr	r5, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691e      	ldr	r6, [r3, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ffc9 	bl	80042c4 <makeFreeRtosPriority>
 8004332:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800433c:	9202      	str	r2, [sp, #8]
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	9100      	str	r1, [sp, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	4632      	mov	r2, r6
 8004346:	4629      	mov	r1, r5
 8004348:	4620      	mov	r0, r4
 800434a:	f000 fec4 	bl	80050d6 <xTaskCreateStatic>
 800434e:	4603      	mov	r3, r0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e01c      	b.n	800438e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685c      	ldr	r4, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004360:	b29e      	uxth	r6, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ffab 	bl	80042c4 <makeFreeRtosPriority>
 800436e:	4602      	mov	r2, r0
 8004370:	f107 030c 	add.w	r3, r7, #12
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	9200      	str	r2, [sp, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4632      	mov	r2, r6
 800437c:	4629      	mov	r1, r5
 800437e:	4620      	mov	r0, r4
 8004380:	f000 ff05 	bl	800518e <xTaskCreate>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d001      	beq.n	800438e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	e000      	b.n	8004390 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800438e:	68fb      	ldr	r3, [r7, #12]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004398 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <osDelay+0x16>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	e000      	b.n	80043b0 <osDelay+0x18>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 f831 	bl	8005418 <vTaskDelay>
  
  return osOK;
 80043b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4619      	mov	r1, r3
 80043d6:	2001      	movs	r0, #1
 80043d8:	f000 fa50 	bl	800487c <xQueueCreateMutexStatic>
 80043dc:	4603      	mov	r3, r0
 80043de:	e003      	b.n	80043e8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80043e0:	2001      	movs	r0, #1
 80043e2:	f000 fa33 	bl	800484c <xQueueCreateMutex>
 80043e6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d011      	beq.n	8004426 <osMessageCreate+0x36>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00d      	beq.n	8004426 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2400      	movs	r4, #0
 800441c:	9400      	str	r4, [sp, #0]
 800441e:	f000 f927 	bl	8004670 <xQueueGenericCreateStatic>
 8004422:	4603      	mov	r3, r0
 8004424:	e008      	b.n	8004438 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	4619      	mov	r1, r3
 8004432:	f000 f994 	bl	800475e <xQueueGenericCreate>
 8004436:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bd90      	pop	{r4, r7, pc}

08004440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f103 0208 	add.w	r2, r3, #8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f103 0208 	add.w	r2, r3, #8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f103 0208 	add.w	r2, r3, #8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d103      	bne.n	80044fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e00c      	b.n	8004516 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3308      	adds	r3, #8
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e002      	b.n	800450a <vListInsert+0x2e>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	d2f6      	bcs.n	8004504 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	601a      	str	r2, [r3, #0]
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6892      	ldr	r2, [r2, #8]
 8004562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6852      	ldr	r2, [r2, #4]
 800456c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d103      	bne.n	8004580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	1e5a      	subs	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
	...

080045a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045ca:	f001 fea7 	bl	800631c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	68f9      	ldr	r1, [r7, #12]
 80045d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	441a      	add	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	3b01      	subs	r3, #1
 80045fc:	68f9      	ldr	r1, [r7, #12]
 80045fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	441a      	add	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	22ff      	movs	r2, #255	; 0xff
 800460e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	22ff      	movs	r2, #255	; 0xff
 8004616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d114      	bne.n	800464a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01a      	beq.n	800465e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3310      	adds	r3, #16
 800462c:	4618      	mov	r0, r3
 800462e:	f001 f97f 	bl	8005930 <xTaskRemoveFromEventList>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d012      	beq.n	800465e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <xQueueGenericReset+0xcc>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	e009      	b.n	800465e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3310      	adds	r3, #16
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fef6 	bl	8004440 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3324      	adds	r3, #36	; 0x24
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fef1 	bl	8004440 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800465e:	f001 fe8d 	bl	800637c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004662:	2301      	movs	r3, #1
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08e      	sub	sp, #56	; 0x38
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <xQueueGenericCreateStatic+0x52>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <xQueueGenericCreateStatic+0x56>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <xQueueGenericCreateStatic+0x58>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	623b      	str	r3, [r7, #32]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <xQueueGenericCreateStatic+0x7e>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <xQueueGenericCreateStatic+0x82>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <xQueueGenericCreateStatic+0x84>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	61fb      	str	r3, [r7, #28]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800470e:	2348      	movs	r3, #72	; 0x48
 8004710:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b48      	cmp	r3, #72	; 0x48
 8004716:	d00a      	beq.n	800472e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	61bb      	str	r3, [r7, #24]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004740:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	4613      	mov	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f843 	bl	80047da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004756:	4618      	mov	r0, r3
 8004758:	3730      	adds	r7, #48	; 0x30
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800475e:	b580      	push	{r7, lr}
 8004760:	b08a      	sub	sp, #40	; 0x28
 8004762:	af02      	add	r7, sp, #8
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	4613      	mov	r3, r2
 800476a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	613b      	str	r3, [r7, #16]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	e004      	b.n	800479e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	3348      	adds	r3, #72	; 0x48
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 fe7c 	bl	80064a0 <pvPortMalloc>
 80047a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00f      	beq.n	80047d0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	3348      	adds	r3, #72	; 0x48
 80047b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047be:	79fa      	ldrb	r2, [r7, #7]
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f805 	bl	80047da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047d0:	69bb      	ldr	r3, [r7, #24]
	}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e002      	b.n	80047fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004808:	2101      	movs	r1, #1
 800480a:	69b8      	ldr	r0, [r7, #24]
 800480c:	f7ff fec8 	bl	80045a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00e      	beq.n	8004844 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004838:	2300      	movs	r3, #0
 800483a:	2200      	movs	r2, #0
 800483c:	2100      	movs	r1, #0
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f838 	bl	80048b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004856:	2301      	movs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	461a      	mov	r2, r3
 8004862:	6939      	ldr	r1, [r7, #16]
 8004864:	6978      	ldr	r0, [r7, #20]
 8004866:	f7ff ff7a 	bl	800475e <xQueueGenericCreate>
 800486a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff ffd3 	bl	8004818 <prvInitialiseMutex>

		return pxNewQueue;
 8004872:	68fb      	ldr	r3, [r7, #12]
	}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af02      	add	r7, sp, #8
 8004882:	4603      	mov	r3, r0
 8004884:	6039      	str	r1, [r7, #0]
 8004886:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004888:	2301      	movs	r3, #1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	6939      	ldr	r1, [r7, #16]
 800489a:	6978      	ldr	r0, [r7, #20]
 800489c:	f7ff fee8 	bl	8004670 <xQueueGenericCreateStatic>
 80048a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff ffb8 	bl	8004818 <prvInitialiseMutex>

		return pxNewQueue;
 80048a8:	68fb      	ldr	r3, [r7, #12]
	}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	; 0x38
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048c2:	2300      	movs	r3, #0
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xQueueGenericSend+0x32>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d103      	bne.n	80048f4 <xQueueGenericSend+0x40>
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <xQueueGenericSend+0x44>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <xQueueGenericSend+0x46>
 80048f8:	2300      	movs	r3, #0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <xQueueGenericSend+0x60>
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004910:	bf00      	nop
 8004912:	e7fe      	b.n	8004912 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d103      	bne.n	8004922 <xQueueGenericSend+0x6e>
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <xQueueGenericSend+0x72>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <xQueueGenericSend+0x74>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <xQueueGenericSend+0x8e>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	623b      	str	r3, [r7, #32]
}
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004942:	f001 f9b9 	bl	8005cb8 <xTaskGetSchedulerState>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <xQueueGenericSend+0x9e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <xQueueGenericSend+0xa2>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <xQueueGenericSend+0xa4>
 8004956:	2300      	movs	r3, #0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <xQueueGenericSend+0xbe>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	61fb      	str	r3, [r7, #28]
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004972:	f001 fcd3 	bl	800631c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	429a      	cmp	r2, r3
 8004980:	d302      	bcc.n	8004988 <xQueueGenericSend+0xd4>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d129      	bne.n	80049dc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800498e:	f000 fa92 	bl	8004eb6 <prvCopyDataToQueue>
 8004992:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	3324      	adds	r3, #36	; 0x24
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 ffc5 	bl	8005930 <xTaskRemoveFromEventList>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d013      	beq.n	80049d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049ac:	4b3f      	ldr	r3, [pc, #252]	; (8004aac <xQueueGenericSend+0x1f8>)
 80049ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	e00a      	b.n	80049d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049c4:	4b39      	ldr	r3, [pc, #228]	; (8004aac <xQueueGenericSend+0x1f8>)
 80049c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049d4:	f001 fcd2 	bl	800637c <vPortExitCritical>
				return pdPASS;
 80049d8:	2301      	movs	r3, #1
 80049da:	e063      	b.n	8004aa4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049e2:	f001 fccb 	bl	800637c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e05c      	b.n	8004aa4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d106      	bne.n	80049fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049f0:	f107 0314 	add.w	r3, r7, #20
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fffd 	bl	80059f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049fe:	f001 fcbd 	bl	800637c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a02:	f000 fda7 	bl	8005554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a06:	f001 fc89 	bl	800631c <vPortEnterCritical>
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a10:	b25b      	sxtb	r3, r3
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d103      	bne.n	8004a20 <xQueueGenericSend+0x16c>
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a26:	b25b      	sxtb	r3, r3
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d103      	bne.n	8004a36 <xQueueGenericSend+0x182>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a36:	f001 fca1 	bl	800637c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a3a:	1d3a      	adds	r2, r7, #4
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 ffec 	bl	8005a20 <xTaskCheckForTimeOut>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d124      	bne.n	8004a98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a50:	f000 fb29 	bl	80050a6 <prvIsQueueFull>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d018      	beq.n	8004a8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	3310      	adds	r3, #16
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 ff40 	bl	80058e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a6a:	f000 fab4 	bl	8004fd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a6e:	f000 fd7f 	bl	8005570 <xTaskResumeAll>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f47f af7c 	bne.w	8004972 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a7a:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <xQueueGenericSend+0x1f8>)
 8004a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	e772      	b.n	8004972 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8e:	f000 faa2 	bl	8004fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a92:	f000 fd6d 	bl	8005570 <xTaskResumeAll>
 8004a96:	e76c      	b.n	8004972 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a9a:	f000 fa9c 	bl	8004fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a9e:	f000 fd67 	bl	8005570 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004aa2:	2300      	movs	r3, #0
		}
	}
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3738      	adds	r7, #56	; 0x38
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08c      	sub	sp, #48	; 0x30
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <xQueueReceive+0x30>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	623b      	str	r3, [r7, #32]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <xQueueReceive+0x3e>
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <xQueueReceive+0x42>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueReceive+0x44>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <xQueueReceive+0x5e>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	61fb      	str	r3, [r7, #28]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b0e:	f001 f8d3 	bl	8005cb8 <xTaskGetSchedulerState>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <xQueueReceive+0x6e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <xQueueReceive+0x72>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <xQueueReceive+0x74>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <xQueueReceive+0x8e>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	61bb      	str	r3, [r7, #24]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b3e:	f001 fbed 	bl	800631c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01f      	beq.n	8004b8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b52:	f000 fa1a 	bl	8004f8a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	1e5a      	subs	r2, r3, #1
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00f      	beq.n	8004b86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	3310      	adds	r3, #16
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fee0 	bl	8005930 <xTaskRemoveFromEventList>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b76:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <xQueueReceive+0x1bc>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b86:	f001 fbf9 	bl	800637c <vPortExitCritical>
				return pdPASS;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e069      	b.n	8004c62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b94:	f001 fbf2 	bl	800637c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e062      	b.n	8004c62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ba2:	f107 0310 	add.w	r3, r7, #16
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 ff24 	bl	80059f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bb0:	f001 fbe4 	bl	800637c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bb4:	f000 fcce 	bl	8005554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bb8:	f001 fbb0 	bl	800631c <vPortEnterCritical>
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bc2:	b25b      	sxtb	r3, r3
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d103      	bne.n	8004bd2 <xQueueReceive+0x122>
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bd8:	b25b      	sxtb	r3, r3
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d103      	bne.n	8004be8 <xQueueReceive+0x138>
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be8:	f001 fbc8 	bl	800637c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bec:	1d3a      	adds	r2, r7, #4
 8004bee:	f107 0310 	add.w	r3, r7, #16
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 ff13 	bl	8005a20 <xTaskCheckForTimeOut>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d123      	bne.n	8004c48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c02:	f000 fa3a 	bl	800507a <prvIsQueueEmpty>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d017      	beq.n	8004c3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	3324      	adds	r3, #36	; 0x24
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fe67 	bl	80058e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c1c:	f000 f9db 	bl	8004fd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c20:	f000 fca6 	bl	8005570 <xTaskResumeAll>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d189      	bne.n	8004b3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <xQueueReceive+0x1bc>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	e780      	b.n	8004b3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3e:	f000 f9ca 	bl	8004fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c42:	f000 fc95 	bl	8005570 <xTaskResumeAll>
 8004c46:	e77a      	b.n	8004b3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c4a:	f000 f9c4 	bl	8004fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c4e:	f000 fc8f 	bl	8005570 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c54:	f000 fa11 	bl	800507a <prvIsQueueEmpty>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f43f af6f 	beq.w	8004b3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3730      	adds	r7, #48	; 0x30
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08e      	sub	sp, #56	; 0x38
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	623b      	str	r3, [r7, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	61fb      	str	r3, [r7, #28]
}
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cc0:	f000 fffa 	bl	8005cb8 <xTaskGetSchedulerState>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <xQueueSemaphoreTake+0x60>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <xQueueSemaphoreTake+0x64>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <xQueueSemaphoreTake+0x66>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	61bb      	str	r3, [r7, #24]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cf0:	f001 fb14 	bl	800631c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d024      	beq.n	8004d4a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	1e5a      	subs	r2, r3, #1
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d104      	bne.n	8004d1a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004d10:	f001 f99c 	bl	800604c <pvTaskIncrementMutexHeldCount>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00f      	beq.n	8004d42 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	3310      	adds	r3, #16
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fe02 	bl	8005930 <xTaskRemoveFromEventList>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d32:	4b54      	ldr	r3, [pc, #336]	; (8004e84 <xQueueSemaphoreTake+0x214>)
 8004d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d42:	f001 fb1b 	bl	800637c <vPortExitCritical>
				return pdPASS;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e097      	b.n	8004e7a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d111      	bne.n	8004d74 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	617b      	str	r3, [r7, #20]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d6c:	f001 fb06 	bl	800637c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e082      	b.n	8004e7a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fe38 	bl	80059f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d84:	2301      	movs	r3, #1
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d88:	f001 faf8 	bl	800637c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d8c:	f000 fbe2 	bl	8005554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d90:	f001 fac4 	bl	800631c <vPortEnterCritical>
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d9a:	b25b      	sxtb	r3, r3
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d103      	bne.n	8004daa <xQueueSemaphoreTake+0x13a>
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004db0:	b25b      	sxtb	r3, r3
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d103      	bne.n	8004dc0 <xQueueSemaphoreTake+0x150>
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dc0:	f001 fadc 	bl	800637c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dc4:	463a      	mov	r2, r7
 8004dc6:	f107 030c 	add.w	r3, r7, #12
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fe27 	bl	8005a20 <xTaskCheckForTimeOut>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d132      	bne.n	8004e3e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dda:	f000 f94e 	bl	800507a <prvIsQueueEmpty>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d026      	beq.n	8004e32 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004dec:	f001 fa96 	bl	800631c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 ff7d 	bl	8005cf4 <xTaskPriorityInherit>
 8004dfa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004dfc:	f001 fabe 	bl	800637c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	3324      	adds	r3, #36	; 0x24
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fd6d 	bl	80058e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e10:	f000 f8e1 	bl	8004fd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e14:	f000 fbac 	bl	8005570 <xTaskResumeAll>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f47f af68 	bne.w	8004cf0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004e20:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <xQueueSemaphoreTake+0x214>)
 8004e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	e75e      	b.n	8004cf0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004e32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e34:	f000 f8cf 	bl	8004fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e38:	f000 fb9a 	bl	8005570 <xTaskResumeAll>
 8004e3c:	e758      	b.n	8004cf0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e40:	f000 f8c9 	bl	8004fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e44:	f000 fb94 	bl	8005570 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e4a:	f000 f916 	bl	800507a <prvIsQueueEmpty>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f43f af4d 	beq.w	8004cf0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004e5c:	f001 fa5e 	bl	800631c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e62:	f000 f811 	bl	8004e88 <prvGetDisinheritPriorityAfterTimeout>
 8004e66:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 f84c 	bl	8005f0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e74:	f001 fa82 	bl	800637c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3738      	adds	r7, #56	; 0x38
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d006      	beq.n	8004ea6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e001      	b.n	8004eaa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
	}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr

08004eb6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b086      	sub	sp, #24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10d      	bne.n	8004ef0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d14d      	bne.n	8004f78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 ff8d 	bl	8005e00 <xTaskPriorityDisinherit>
 8004ee6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	e043      	b.n	8004f78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d119      	bne.n	8004f2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6898      	ldr	r0, [r3, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	461a      	mov	r2, r3
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	f001 fdc8 	bl	8006a96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	441a      	add	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d32b      	bcc.n	8004f78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	609a      	str	r2, [r3, #8]
 8004f28:	e026      	b.n	8004f78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68d8      	ldr	r0, [r3, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	461a      	mov	r2, r3
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	f001 fdae 	bl	8006a96 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	425b      	negs	r3, r3
 8004f44:	441a      	add	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d207      	bcs.n	8004f66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	425b      	negs	r3, r3
 8004f60:	441a      	add	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d105      	bne.n	8004f78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f80:	697b      	ldr	r3, [r7, #20]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d018      	beq.n	8004fce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	441a      	add	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d303      	bcc.n	8004fbe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68d9      	ldr	r1, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6838      	ldr	r0, [r7, #0]
 8004fca:	f001 fd64 	bl	8006a96 <memcpy>
	}
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fde:	f001 f99d 	bl	800631c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fea:	e011      	b.n	8005010 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d012      	beq.n	800501a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3324      	adds	r3, #36	; 0x24
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fc99 	bl	8005930 <xTaskRemoveFromEventList>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005004:	f000 fd6e 	bl	8005ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	3b01      	subs	r3, #1
 800500c:	b2db      	uxtb	r3, r3
 800500e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005014:	2b00      	cmp	r3, #0
 8005016:	dce9      	bgt.n	8004fec <prvUnlockQueue+0x16>
 8005018:	e000      	b.n	800501c <prvUnlockQueue+0x46>
					break;
 800501a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	22ff      	movs	r2, #255	; 0xff
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005024:	f001 f9aa 	bl	800637c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005028:	f001 f978 	bl	800631c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005032:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005034:	e011      	b.n	800505a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d012      	beq.n	8005064 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3310      	adds	r3, #16
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fc74 	bl	8005930 <xTaskRemoveFromEventList>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800504e:	f000 fd49 	bl	8005ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005052:	7bbb      	ldrb	r3, [r7, #14]
 8005054:	3b01      	subs	r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800505a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800505e:	2b00      	cmp	r3, #0
 8005060:	dce9      	bgt.n	8005036 <prvUnlockQueue+0x60>
 8005062:	e000      	b.n	8005066 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005064:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	22ff      	movs	r2, #255	; 0xff
 800506a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800506e:	f001 f985 	bl	800637c <vPortExitCritical>
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005082:	f001 f94b 	bl	800631c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800508e:	2301      	movs	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e001      	b.n	8005098 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005098:	f001 f970 	bl	800637c <vPortExitCritical>

	return xReturn;
 800509c:	68fb      	ldr	r3, [r7, #12]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050ae:	f001 f935 	bl	800631c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d102      	bne.n	80050c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	e001      	b.n	80050c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050c8:	f001 f958 	bl	800637c <vPortExitCritical>

	return xReturn;
 80050cc:	68fb      	ldr	r3, [r7, #12]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b08e      	sub	sp, #56	; 0x38
 80050da:	af04      	add	r7, sp, #16
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10a      	bne.n	8005100 <xTaskCreateStatic+0x2a>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	623b      	str	r3, [r7, #32]
}
 80050fc:	bf00      	nop
 80050fe:	e7fe      	b.n	80050fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <xTaskCreateStatic+0x46>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	61fb      	str	r3, [r7, #28]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800511c:	23b4      	movs	r3, #180	; 0xb4
 800511e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2bb4      	cmp	r3, #180	; 0xb4
 8005124:	d00a      	beq.n	800513c <xTaskCreateStatic+0x66>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	61bb      	str	r3, [r7, #24]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01e      	beq.n	8005180 <xTaskCreateStatic+0xaa>
 8005142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01b      	beq.n	8005180 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005150:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	2202      	movs	r2, #2
 8005156:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800515a:	2300      	movs	r3, #0
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	f107 0314 	add.w	r3, r7, #20
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f850 	bl	8005218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800517a:	f000 f8e3 	bl	8005344 <prvAddNewTaskToReadyList>
 800517e:	e001      	b.n	8005184 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005184:	697b      	ldr	r3, [r7, #20]
	}
 8005186:	4618      	mov	r0, r3
 8005188:	3728      	adds	r7, #40	; 0x28
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800518e:	b580      	push	{r7, lr}
 8005190:	b08c      	sub	sp, #48	; 0x30
 8005192:	af04      	add	r7, sp, #16
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 f97c 	bl	80064a0 <pvPortMalloc>
 80051a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00e      	beq.n	80051ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051b0:	20b4      	movs	r0, #180	; 0xb4
 80051b2:	f001 f975 	bl	80064a0 <pvPortMalloc>
 80051b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
 80051c4:	e005      	b.n	80051d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051c6:	6978      	ldr	r0, [r7, #20]
 80051c8:	f001 fa2e 	bl	8006628 <vPortFree>
 80051cc:	e001      	b.n	80051d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d017      	beq.n	8005208 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051e0:	88fa      	ldrh	r2, [r7, #6]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9303      	str	r3, [sp, #12]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	9302      	str	r3, [sp, #8]
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f80e 	bl	8005218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051fc:	69f8      	ldr	r0, [r7, #28]
 80051fe:	f000 f8a1 	bl	8005344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005202:	2301      	movs	r3, #1
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e002      	b.n	800520e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005208:	f04f 33ff 	mov.w	r3, #4294967295
 800520c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800520e:	69bb      	ldr	r3, [r7, #24]
	}
 8005210:	4618      	mov	r0, r3
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005230:	3b01      	subs	r3, #1
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f023 0307 	bic.w	r3, r3, #7
 800523e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <prvInitialiseNewTask+0x48>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	617b      	str	r3, [r7, #20]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	e012      	b.n	800528c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	7819      	ldrb	r1, [r3, #0]
 800526e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	3334      	adds	r3, #52	; 0x34
 8005276:	460a      	mov	r2, r1
 8005278:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	3301      	adds	r3, #1
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2b0f      	cmp	r3, #15
 8005290:	d9e9      	bls.n	8005266 <prvInitialiseNewTask+0x4e>
 8005292:	e000      	b.n	8005296 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005294:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d901      	bls.n	80052a8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052a4:	2306      	movs	r3, #6
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	2200      	movs	r2, #0
 80052b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	3304      	adds	r3, #4
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff f8dd 	bl	800447e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	3318      	adds	r3, #24
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff f8d8 	bl	800447e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	f1c3 0207 	rsb	r2, r3, #7
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	334c      	adds	r3, #76	; 0x4c
 80052f8:	2260      	movs	r2, #96	; 0x60
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 fbd8 	bl	8006ab2 <memset>
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	4a0c      	ldr	r2, [pc, #48]	; (8005338 <prvInitialiseNewTask+0x120>)
 8005306:	651a      	str	r2, [r3, #80]	; 0x50
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	4a0c      	ldr	r2, [pc, #48]	; (800533c <prvInitialiseNewTask+0x124>)
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	4a0b      	ldr	r2, [pc, #44]	; (8005340 <prvInitialiseNewTask+0x128>)
 8005312:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	69b8      	ldr	r0, [r7, #24]
 800531a:	f000 ff11 	bl	8006140 <pxPortInitialiseStack>
 800531e:	4602      	mov	r2, r0
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005330:	bf00      	nop
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	0800b328 	.word	0x0800b328
 800533c:	0800b348 	.word	0x0800b348
 8005340:	0800b308 	.word	0x0800b308

08005344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800534c:	f000 ffe6 	bl	800631c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005350:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <prvAddNewTaskToReadyList+0xb8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	4a29      	ldr	r2, [pc, #164]	; (80053fc <prvAddNewTaskToReadyList+0xb8>)
 8005358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800535a:	4b29      	ldr	r3, [pc, #164]	; (8005400 <prvAddNewTaskToReadyList+0xbc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005362:	4a27      	ldr	r2, [pc, #156]	; (8005400 <prvAddNewTaskToReadyList+0xbc>)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005368:	4b24      	ldr	r3, [pc, #144]	; (80053fc <prvAddNewTaskToReadyList+0xb8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d110      	bne.n	8005392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005370:	f000 fbdc 	bl	8005b2c <prvInitialiseTaskLists>
 8005374:	e00d      	b.n	8005392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005376:	4b23      	ldr	r3, [pc, #140]	; (8005404 <prvAddNewTaskToReadyList+0xc0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800537e:	4b20      	ldr	r3, [pc, #128]	; (8005400 <prvAddNewTaskToReadyList+0xbc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	429a      	cmp	r2, r3
 800538a:	d802      	bhi.n	8005392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800538c:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <prvAddNewTaskToReadyList+0xbc>)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005392:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 800539a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	2201      	movs	r2, #1
 80053a2:	409a      	lsls	r2, r3
 80053a4:	4b19      	ldr	r3, [pc, #100]	; (800540c <prvAddNewTaskToReadyList+0xc8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <prvAddNewTaskToReadyList+0xc8>)
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4a15      	ldr	r2, [pc, #84]	; (8005410 <prvAddNewTaskToReadyList+0xcc>)
 80053bc:	441a      	add	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3304      	adds	r3, #4
 80053c2:	4619      	mov	r1, r3
 80053c4:	4610      	mov	r0, r2
 80053c6:	f7ff f866 	bl	8004496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053ca:	f000 ffd7 	bl	800637c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053ce:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <prvAddNewTaskToReadyList+0xc0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00e      	beq.n	80053f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <prvAddNewTaskToReadyList+0xbc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d207      	bcs.n	80053f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <prvAddNewTaskToReadyList+0xd0>)
 80053e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	200006d0 	.word	0x200006d0
 8005400:	200005d0 	.word	0x200005d0
 8005404:	200006dc 	.word	0x200006dc
 8005408:	200006ec 	.word	0x200006ec
 800540c:	200006d8 	.word	0x200006d8
 8005410:	200005d4 	.word	0x200005d4
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d017      	beq.n	800545a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <vTaskDelay+0x60>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <vTaskDelay+0x30>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005448:	f000 f884 	bl	8005554 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800544c:	2100      	movs	r1, #0
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fe10 	bl	8006074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005454:	f000 f88c 	bl	8005570 <xTaskResumeAll>
 8005458:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d107      	bne.n	8005470 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <vTaskDelay+0x64>)
 8005462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	200006f8 	.word	0x200006f8
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800548e:	463a      	mov	r2, r7
 8005490:	1d39      	adds	r1, r7, #4
 8005492:	f107 0308 	add.w	r3, r7, #8
 8005496:	4618      	mov	r0, r3
 8005498:	f7fb fb9e 	bl	8000bd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	9202      	str	r2, [sp, #8]
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	2300      	movs	r3, #0
 80054ac:	460a      	mov	r2, r1
 80054ae:	4921      	ldr	r1, [pc, #132]	; (8005534 <vTaskStartScheduler+0xb4>)
 80054b0:	4821      	ldr	r0, [pc, #132]	; (8005538 <vTaskStartScheduler+0xb8>)
 80054b2:	f7ff fe10 	bl	80050d6 <xTaskCreateStatic>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4a20      	ldr	r2, [pc, #128]	; (800553c <vTaskStartScheduler+0xbc>)
 80054ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054bc:	4b1f      	ldr	r3, [pc, #124]	; (800553c <vTaskStartScheduler+0xbc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054c4:	2301      	movs	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e001      	b.n	80054ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d11b      	bne.n	800550c <vTaskStartScheduler+0x8c>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	613b      	str	r3, [r7, #16]
}
 80054e6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054e8:	4b15      	ldr	r3, [pc, #84]	; (8005540 <vTaskStartScheduler+0xc0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	334c      	adds	r3, #76	; 0x4c
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <vTaskStartScheduler+0xc4>)
 80054f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <vTaskStartScheduler+0xc8>)
 80054f4:	f04f 32ff 	mov.w	r2, #4294967295
 80054f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054fa:	4b14      	ldr	r3, [pc, #80]	; (800554c <vTaskStartScheduler+0xcc>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005500:	4b13      	ldr	r3, [pc, #76]	; (8005550 <vTaskStartScheduler+0xd0>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005506:	f000 fe97 	bl	8006238 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800550a:	e00e      	b.n	800552a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d10a      	bne.n	800552a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60fb      	str	r3, [r7, #12]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <vTaskStartScheduler+0xa8>
}
 800552a:	bf00      	nop
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	0800b2e8 	.word	0x0800b2e8
 8005538:	08005afd 	.word	0x08005afd
 800553c:	200006f4 	.word	0x200006f4
 8005540:	200005d0 	.word	0x200005d0
 8005544:	20000010 	.word	0x20000010
 8005548:	200006f0 	.word	0x200006f0
 800554c:	200006dc 	.word	0x200006dc
 8005550:	200006d4 	.word	0x200006d4

08005554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <vTaskSuspendAll+0x18>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	4a03      	ldr	r2, [pc, #12]	; (800556c <vTaskSuspendAll+0x18>)
 8005560:	6013      	str	r3, [r2, #0]
}
 8005562:	bf00      	nop
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	200006f8 	.word	0x200006f8

08005570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800557e:	4b41      	ldr	r3, [pc, #260]	; (8005684 <xTaskResumeAll+0x114>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <xTaskResumeAll+0x2c>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	603b      	str	r3, [r7, #0]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800559c:	f000 febe 	bl	800631c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055a0:	4b38      	ldr	r3, [pc, #224]	; (8005684 <xTaskResumeAll+0x114>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	4a37      	ldr	r2, [pc, #220]	; (8005684 <xTaskResumeAll+0x114>)
 80055a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055aa:	4b36      	ldr	r3, [pc, #216]	; (8005684 <xTaskResumeAll+0x114>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d161      	bne.n	8005676 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055b2:	4b35      	ldr	r3, [pc, #212]	; (8005688 <xTaskResumeAll+0x118>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d05d      	beq.n	8005676 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ba:	e02e      	b.n	800561a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055bc:	4b33      	ldr	r3, [pc, #204]	; (800568c <xTaskResumeAll+0x11c>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3318      	adds	r3, #24
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe ffbf 	bl	800454c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe ffba 	bl	800454c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	2201      	movs	r2, #1
 80055de:	409a      	lsls	r2, r3
 80055e0:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <xTaskResumeAll+0x120>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <xTaskResumeAll+0x120>)
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4a27      	ldr	r2, [pc, #156]	; (8005694 <xTaskResumeAll+0x124>)
 80055f8:	441a      	add	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3304      	adds	r3, #4
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f7fe ff48 	bl	8004496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560a:	4b23      	ldr	r3, [pc, #140]	; (8005698 <xTaskResumeAll+0x128>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	429a      	cmp	r2, r3
 8005612:	d302      	bcc.n	800561a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005614:	4b21      	ldr	r3, [pc, #132]	; (800569c <xTaskResumeAll+0x12c>)
 8005616:	2201      	movs	r2, #1
 8005618:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800561a:	4b1c      	ldr	r3, [pc, #112]	; (800568c <xTaskResumeAll+0x11c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1cc      	bne.n	80055bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005628:	f000 fb22 	bl	8005c70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800562c:	4b1c      	ldr	r3, [pc, #112]	; (80056a0 <xTaskResumeAll+0x130>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d010      	beq.n	800565a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005638:	f000 f836 	bl	80056a8 <xTaskIncrementTick>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005642:	4b16      	ldr	r3, [pc, #88]	; (800569c <xTaskResumeAll+0x12c>)
 8005644:	2201      	movs	r2, #1
 8005646:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3b01      	subs	r3, #1
 800564c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1f1      	bne.n	8005638 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <xTaskResumeAll+0x130>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800565a:	4b10      	ldr	r3, [pc, #64]	; (800569c <xTaskResumeAll+0x12c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005662:	2301      	movs	r3, #1
 8005664:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005666:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <xTaskResumeAll+0x134>)
 8005668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005676:	f000 fe81 	bl	800637c <vPortExitCritical>

	return xAlreadyYielded;
 800567a:	68bb      	ldr	r3, [r7, #8]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200006f8 	.word	0x200006f8
 8005688:	200006d0 	.word	0x200006d0
 800568c:	20000690 	.word	0x20000690
 8005690:	200006d8 	.word	0x200006d8
 8005694:	200005d4 	.word	0x200005d4
 8005698:	200005d0 	.word	0x200005d0
 800569c:	200006e4 	.word	0x200006e4
 80056a0:	200006e0 	.word	0x200006e0
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b2:	4b51      	ldr	r3, [pc, #324]	; (80057f8 <xTaskIncrementTick+0x150>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f040 808d 	bne.w	80057d6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056bc:	4b4f      	ldr	r3, [pc, #316]	; (80057fc <xTaskIncrementTick+0x154>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3301      	adds	r3, #1
 80056c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056c4:	4a4d      	ldr	r2, [pc, #308]	; (80057fc <xTaskIncrementTick+0x154>)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d120      	bne.n	8005712 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056d0:	4b4b      	ldr	r3, [pc, #300]	; (8005800 <xTaskIncrementTick+0x158>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	603b      	str	r3, [r7, #0]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <xTaskIncrementTick+0x46>
 80056f0:	4b43      	ldr	r3, [pc, #268]	; (8005800 <xTaskIncrementTick+0x158>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	4b43      	ldr	r3, [pc, #268]	; (8005804 <xTaskIncrementTick+0x15c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a41      	ldr	r2, [pc, #260]	; (8005800 <xTaskIncrementTick+0x158>)
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	4a41      	ldr	r2, [pc, #260]	; (8005804 <xTaskIncrementTick+0x15c>)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b40      	ldr	r3, [pc, #256]	; (8005808 <xTaskIncrementTick+0x160>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	4a3f      	ldr	r2, [pc, #252]	; (8005808 <xTaskIncrementTick+0x160>)
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	f000 faaf 	bl	8005c70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005712:	4b3e      	ldr	r3, [pc, #248]	; (800580c <xTaskIncrementTick+0x164>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	429a      	cmp	r2, r3
 800571a:	d34d      	bcc.n	80057b8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800571c:	4b38      	ldr	r3, [pc, #224]	; (8005800 <xTaskIncrementTick+0x158>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <xTaskIncrementTick+0x82>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <xTaskIncrementTick+0x84>
 800572a:	2300      	movs	r3, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005730:	4b36      	ldr	r3, [pc, #216]	; (800580c <xTaskIncrementTick+0x164>)
 8005732:	f04f 32ff 	mov.w	r2, #4294967295
 8005736:	601a      	str	r2, [r3, #0]
					break;
 8005738:	e03e      	b.n	80057b8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800573a:	4b31      	ldr	r3, [pc, #196]	; (8005800 <xTaskIncrementTick+0x158>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d203      	bcs.n	800575a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005752:	4a2e      	ldr	r2, [pc, #184]	; (800580c <xTaskIncrementTick+0x164>)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6013      	str	r3, [r2, #0]
						break;
 8005758:	e02e      	b.n	80057b8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3304      	adds	r3, #4
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fef4 	bl	800454c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	3318      	adds	r3, #24
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe feeb 	bl	800454c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	2201      	movs	r2, #1
 800577c:	409a      	lsls	r2, r3
 800577e:	4b24      	ldr	r3, [pc, #144]	; (8005810 <xTaskIncrementTick+0x168>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4313      	orrs	r3, r2
 8005784:	4a22      	ldr	r2, [pc, #136]	; (8005810 <xTaskIncrementTick+0x168>)
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <xTaskIncrementTick+0x16c>)
 8005796:	441a      	add	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	3304      	adds	r3, #4
 800579c:	4619      	mov	r1, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	f7fe fe79 	bl	8004496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <xTaskIncrementTick+0x170>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3b4      	bcc.n	800571c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057b2:	2301      	movs	r3, #1
 80057b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b6:	e7b1      	b.n	800571c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <xTaskIncrementTick+0x170>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	4915      	ldr	r1, [pc, #84]	; (8005814 <xTaskIncrementTick+0x16c>)
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d907      	bls.n	80057e0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80057d0:	2301      	movs	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e004      	b.n	80057e0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057d6:	4b11      	ldr	r3, [pc, #68]	; (800581c <xTaskIncrementTick+0x174>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	4a0f      	ldr	r2, [pc, #60]	; (800581c <xTaskIncrementTick+0x174>)
 80057de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057e0:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <xTaskIncrementTick+0x178>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057ec:	697b      	ldr	r3, [r7, #20]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	200006f8 	.word	0x200006f8
 80057fc:	200006d4 	.word	0x200006d4
 8005800:	20000688 	.word	0x20000688
 8005804:	2000068c 	.word	0x2000068c
 8005808:	200006e8 	.word	0x200006e8
 800580c:	200006f0 	.word	0x200006f0
 8005810:	200006d8 	.word	0x200006d8
 8005814:	200005d4 	.word	0x200005d4
 8005818:	200005d0 	.word	0x200005d0
 800581c:	200006e0 	.word	0x200006e0
 8005820:	200006e4 	.word	0x200006e4

08005824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800582a:	4b29      	ldr	r3, [pc, #164]	; (80058d0 <vTaskSwitchContext+0xac>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005832:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <vTaskSwitchContext+0xb0>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005838:	e044      	b.n	80058c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800583a:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <vTaskSwitchContext+0xb0>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005840:	4b25      	ldr	r3, [pc, #148]	; (80058d8 <vTaskSwitchContext+0xb4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	fab3 f383 	clz	r3, r3
 800584c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800584e:	7afb      	ldrb	r3, [r7, #11]
 8005850:	f1c3 031f 	rsb	r3, r3, #31
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	4921      	ldr	r1, [pc, #132]	; (80058dc <vTaskSwitchContext+0xb8>)
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <vTaskSwitchContext+0x5c>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
}
 800587c:	bf00      	nop
 800587e:	e7fe      	b.n	800587e <vTaskSwitchContext+0x5a>
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4a14      	ldr	r2, [pc, #80]	; (80058dc <vTaskSwitchContext+0xb8>)
 800588c:	4413      	add	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3308      	adds	r3, #8
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d104      	bne.n	80058b0 <vTaskSwitchContext+0x8c>
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <vTaskSwitchContext+0xbc>)
 80058b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058ba:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <vTaskSwitchContext+0xbc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	334c      	adds	r3, #76	; 0x4c
 80058c0:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <vTaskSwitchContext+0xc0>)
 80058c2:	6013      	str	r3, [r2, #0]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	200006f8 	.word	0x200006f8
 80058d4:	200006e4 	.word	0x200006e4
 80058d8:	200006d8 	.word	0x200006d8
 80058dc:	200005d4 	.word	0x200005d4
 80058e0:	200005d0 	.word	0x200005d0
 80058e4:	20000010 	.word	0x20000010

080058e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	60fb      	str	r3, [r7, #12]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800590e:	4b07      	ldr	r3, [pc, #28]	; (800592c <vTaskPlaceOnEventList+0x44>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3318      	adds	r3, #24
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fe fde0 	bl	80044dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800591c:	2101      	movs	r1, #1
 800591e:	6838      	ldr	r0, [r7, #0]
 8005920:	f000 fba8 	bl	8006074 <prvAddCurrentTaskToDelayedList>
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	200005d0 	.word	0x200005d0

08005930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	60fb      	str	r3, [r7, #12]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3318      	adds	r3, #24
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fdf3 	bl	800454c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005966:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <xTaskRemoveFromEventList+0xac>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11c      	bne.n	80059a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe fdea 	bl	800454c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	2201      	movs	r2, #1
 800597e:	409a      	lsls	r2, r3
 8005980:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <xTaskRemoveFromEventList+0xb0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4313      	orrs	r3, r2
 8005986:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <xTaskRemoveFromEventList+0xb0>)
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4a13      	ldr	r2, [pc, #76]	; (80059e4 <xTaskRemoveFromEventList+0xb4>)
 8005998:	441a      	add	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3304      	adds	r3, #4
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f7fe fd78 	bl	8004496 <vListInsertEnd>
 80059a6:	e005      	b.n	80059b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	3318      	adds	r3, #24
 80059ac:	4619      	mov	r1, r3
 80059ae:	480e      	ldr	r0, [pc, #56]	; (80059e8 <xTaskRemoveFromEventList+0xb8>)
 80059b0:	f7fe fd71 	bl	8004496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <xTaskRemoveFromEventList+0xbc>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	429a      	cmp	r2, r3
 80059c0:	d905      	bls.n	80059ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059c2:	2301      	movs	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <xTaskRemoveFromEventList+0xc0>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e001      	b.n	80059d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80059d2:	697b      	ldr	r3, [r7, #20]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	200006f8 	.word	0x200006f8
 80059e0:	200006d8 	.word	0x200006d8
 80059e4:	200005d4 	.word	0x200005d4
 80059e8:	20000690 	.word	0x20000690
 80059ec:	200005d0 	.word	0x200005d0
 80059f0:	200006e4 	.word	0x200006e4

080059f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <vTaskInternalSetTimeOutState+0x24>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <vTaskInternalSetTimeOutState+0x28>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	605a      	str	r2, [r3, #4]
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	200006e8 	.word	0x200006e8
 8005a1c:	200006d4 	.word	0x200006d4

08005a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	613b      	str	r3, [r7, #16]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a62:	f000 fc5b 	bl	800631c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a66:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <xTaskCheckForTimeOut+0xbc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d102      	bne.n	8005a86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	e023      	b.n	8005ace <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <xTaskCheckForTimeOut+0xc0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d007      	beq.n	8005aa2 <xTaskCheckForTimeOut+0x82>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d302      	bcc.n	8005aa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	e015      	b.n	8005ace <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d20b      	bcs.n	8005ac4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff ff9b 	bl	80059f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	e004      	b.n	8005ace <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ace:	f000 fc55 	bl	800637c <vPortExitCritical>

	return xReturn;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	200006d4 	.word	0x200006d4
 8005ae0:	200006e8 	.word	0x200006e8

08005ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <vTaskMissedYield+0x14>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	200006e4 	.word	0x200006e4

08005afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b04:	f000 f852 	bl	8005bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <prvIdleTask+0x28>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d9f9      	bls.n	8005b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <prvIdleTask+0x2c>)
 8005b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b20:	e7f0      	b.n	8005b04 <prvIdleTask+0x8>
 8005b22:	bf00      	nop
 8005b24:	200005d4 	.word	0x200005d4
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
 8005b36:	e00c      	b.n	8005b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <prvInitialiseTaskLists+0x60>)
 8005b44:	4413      	add	r3, r2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fc7a 	bl	8004440 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b06      	cmp	r3, #6
 8005b56:	d9ef      	bls.n	8005b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b58:	480d      	ldr	r0, [pc, #52]	; (8005b90 <prvInitialiseTaskLists+0x64>)
 8005b5a:	f7fe fc71 	bl	8004440 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b5e:	480d      	ldr	r0, [pc, #52]	; (8005b94 <prvInitialiseTaskLists+0x68>)
 8005b60:	f7fe fc6e 	bl	8004440 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b64:	480c      	ldr	r0, [pc, #48]	; (8005b98 <prvInitialiseTaskLists+0x6c>)
 8005b66:	f7fe fc6b 	bl	8004440 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b6a:	480c      	ldr	r0, [pc, #48]	; (8005b9c <prvInitialiseTaskLists+0x70>)
 8005b6c:	f7fe fc68 	bl	8004440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b70:	480b      	ldr	r0, [pc, #44]	; (8005ba0 <prvInitialiseTaskLists+0x74>)
 8005b72:	f7fe fc65 	bl	8004440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b76:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <prvInitialiseTaskLists+0x78>)
 8005b78:	4a05      	ldr	r2, [pc, #20]	; (8005b90 <prvInitialiseTaskLists+0x64>)
 8005b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <prvInitialiseTaskLists+0x7c>)
 8005b7e:	4a05      	ldr	r2, [pc, #20]	; (8005b94 <prvInitialiseTaskLists+0x68>)
 8005b80:	601a      	str	r2, [r3, #0]
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200005d4 	.word	0x200005d4
 8005b90:	20000660 	.word	0x20000660
 8005b94:	20000674 	.word	0x20000674
 8005b98:	20000690 	.word	0x20000690
 8005b9c:	200006a4 	.word	0x200006a4
 8005ba0:	200006bc 	.word	0x200006bc
 8005ba4:	20000688 	.word	0x20000688
 8005ba8:	2000068c 	.word	0x2000068c

08005bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb2:	e019      	b.n	8005be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bb4:	f000 fbb2 	bl	800631c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005bb8:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <prvCheckTasksWaitingTermination+0x50>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe fcc1 	bl	800454c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <prvCheckTasksWaitingTermination+0x54>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	4a0b      	ldr	r2, [pc, #44]	; (8005c00 <prvCheckTasksWaitingTermination+0x54>)
 8005bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <prvCheckTasksWaitingTermination+0x58>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4a0a      	ldr	r2, [pc, #40]	; (8005c04 <prvCheckTasksWaitingTermination+0x58>)
 8005bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bde:	f000 fbcd 	bl	800637c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f810 	bl	8005c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <prvCheckTasksWaitingTermination+0x58>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e1      	bne.n	8005bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	200006a4 	.word	0x200006a4
 8005c00:	200006d0 	.word	0x200006d0
 8005c04:	200006b8 	.word	0x200006b8

08005c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	334c      	adds	r3, #76	; 0x4c
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fe65 	bl	80078e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d108      	bne.n	8005c36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fcfd 	bl	8006628 <vPortFree>
				vPortFree( pxTCB );
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fcfa 	bl	8006628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c34:	e018      	b.n	8005c68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d103      	bne.n	8005c48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fcf1 	bl	8006628 <vPortFree>
	}
 8005c46:	e00f      	b.n	8005c68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d00a      	beq.n	8005c68 <prvDeleteTCB+0x60>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60fb      	str	r3, [r7, #12]
}
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <prvDeleteTCB+0x5e>
	}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c76:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <prvResetNextTaskUnblockTime+0x40>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <prvResetNextTaskUnblockTime+0x14>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <prvResetNextTaskUnblockTime+0x16>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <prvResetNextTaskUnblockTime+0x44>)
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c92:	e008      	b.n	8005ca6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <prvResetNextTaskUnblockTime+0x40>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	4a04      	ldr	r2, [pc, #16]	; (8005cb4 <prvResetNextTaskUnblockTime+0x44>)
 8005ca4:	6013      	str	r3, [r2, #0]
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr
 8005cb0:	20000688 	.word	0x20000688
 8005cb4:	200006f0 	.word	0x200006f0

08005cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <xTaskGetSchedulerState+0x34>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	e008      	b.n	8005cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ccc:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <xTaskGetSchedulerState+0x38>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	607b      	str	r3, [r7, #4]
 8005cd8:	e001      	b.n	8005cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cde:	687b      	ldr	r3, [r7, #4]
	}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	200006dc 	.word	0x200006dc
 8005cf0:	200006f8 	.word	0x200006f8

08005cf4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d06e      	beq.n	8005de8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0e:	4b39      	ldr	r3, [pc, #228]	; (8005df4 <xTaskPriorityInherit+0x100>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d25e      	bcs.n	8005dd6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	db06      	blt.n	8005d2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d20:	4b34      	ldr	r3, [pc, #208]	; (8005df4 <xTaskPriorityInherit+0x100>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	f1c3 0207 	rsb	r2, r3, #7
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6959      	ldr	r1, [r3, #20]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4a2e      	ldr	r2, [pc, #184]	; (8005df8 <xTaskPriorityInherit+0x104>)
 8005d40:	4413      	add	r3, r2
 8005d42:	4299      	cmp	r1, r3
 8005d44:	d101      	bne.n	8005d4a <xTaskPriorityInherit+0x56>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <xTaskPriorityInherit+0x58>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d03a      	beq.n	8005dc6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe fbf9 	bl	800454c <uxListRemove>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d115      	bne.n	8005d8c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	4924      	ldr	r1, [pc, #144]	; (8005df8 <xTaskPriorityInherit+0x104>)
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <xTaskPriorityInherit+0x98>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43da      	mvns	r2, r3
 8005d82:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <xTaskPriorityInherit+0x108>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4013      	ands	r3, r2
 8005d88:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <xTaskPriorityInherit+0x108>)
 8005d8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d8c:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <xTaskPriorityInherit+0x100>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <xTaskPriorityInherit+0x108>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <xTaskPriorityInherit+0x108>)
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <xTaskPriorityInherit+0x104>)
 8005db6:	441a      	add	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f7fe fb69 	bl	8004496 <vListInsertEnd>
 8005dc4:	e004      	b.n	8005dd0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <xTaskPriorityInherit+0x100>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e008      	b.n	8005de8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <xTaskPriorityInherit+0x100>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d201      	bcs.n	8005de8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005de8:	68fb      	ldr	r3, [r7, #12]
	}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200005d0 	.word	0x200005d0
 8005df8:	200005d4 	.word	0x200005d4
 8005dfc:	200006d8 	.word	0x200006d8

08005e00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d06e      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e16:	4b3a      	ldr	r3, [pc, #232]	; (8005f00 <xTaskPriorityDisinherit+0x100>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d00a      	beq.n	8005e36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	60fb      	str	r3, [r7, #12]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60bb      	str	r3, [r7, #8]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e58:	1e5a      	subs	r2, r3, #1
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d044      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d140      	bne.n	8005ef4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fb68 	bl	800454c <uxListRemove>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d115      	bne.n	8005eae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	491f      	ldr	r1, [pc, #124]	; (8005f04 <xTaskPriorityDisinherit+0x104>)
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xTaskPriorityDisinherit+0xae>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43da      	mvns	r2, r3
 8005ea4:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <xTaskPriorityDisinherit+0x108>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <xTaskPriorityDisinherit+0x108>)
 8005eac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	f1c3 0207 	rsb	r2, r3, #7
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	409a      	lsls	r2, r3
 8005eca:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <xTaskPriorityDisinherit+0x108>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	4a0d      	ldr	r2, [pc, #52]	; (8005f08 <xTaskPriorityDisinherit+0x108>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <xTaskPriorityDisinherit+0x104>)
 8005ee2:	441a      	add	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7fe fad3 	bl	8004496 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ef4:	697b      	ldr	r3, [r7, #20]
	}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200005d0 	.word	0x200005d0
 8005f04:	200005d4 	.word	0x200005d4
 8005f08:	200006d8 	.word	0x200006d8

08005f0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8088 	beq.w	8006036 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60fb      	str	r3, [r7, #12]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d902      	bls.n	8005f54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	e002      	b.n	8005f5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d068      	beq.n	8006036 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d163      	bne.n	8006036 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f6e:	4b34      	ldr	r3, [pc, #208]	; (8006040 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d10a      	bne.n	8005f8e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60bb      	str	r3, [r7, #8]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	db04      	blt.n	8005fac <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f1c3 0207 	rsb	r2, r3, #7
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	6959      	ldr	r1, [r3, #20]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4a22      	ldr	r2, [pc, #136]	; (8006044 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4299      	cmp	r1, r3
 8005fc0:	d101      	bne.n	8005fc6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d034      	beq.n	8006036 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fe fabb 	bl	800454c <uxListRemove>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d115      	bne.n	8006008 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4918      	ldr	r1, [pc, #96]	; (8006044 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	43da      	mvns	r2, r3
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4013      	ands	r3, r2
 8006004:	4a10      	ldr	r2, [pc, #64]	; (8006048 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006006:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	2201      	movs	r2, #1
 800600e:	409a      	lsls	r2, r3
 8006010:	4b0d      	ldr	r3, [pc, #52]	; (8006048 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4313      	orrs	r3, r2
 8006016:	4a0c      	ldr	r2, [pc, #48]	; (8006048 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4a07      	ldr	r2, [pc, #28]	; (8006044 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006028:	441a      	add	r2, r3
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	3304      	adds	r3, #4
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f7fe fa30 	bl	8004496 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006036:	bf00      	nop
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200005d0 	.word	0x200005d0
 8006044:	200005d4 	.word	0x200005d4
 8006048:	200006d8 	.word	0x200006d8

0800604c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <pvTaskIncrementMutexHeldCount+0x24>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <pvTaskIncrementMutexHeldCount+0x24>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800605e:	3201      	adds	r2, #1
 8006060:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006062:	4b03      	ldr	r3, [pc, #12]	; (8006070 <pvTaskIncrementMutexHeldCount+0x24>)
 8006064:	681b      	ldr	r3, [r3, #0]
	}
 8006066:	4618      	mov	r0, r3
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	200005d0 	.word	0x200005d0

08006074 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800607e:	4b29      	ldr	r3, [pc, #164]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006084:	4b28      	ldr	r3, [pc, #160]	; (8006128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3304      	adds	r3, #4
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fa5e 	bl	800454c <uxListRemove>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006096:	4b24      	ldr	r3, [pc, #144]	; (8006128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	2201      	movs	r2, #1
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	43da      	mvns	r2, r3
 80060a4:	4b21      	ldr	r3, [pc, #132]	; (800612c <prvAddCurrentTaskToDelayedList+0xb8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4013      	ands	r3, r2
 80060aa:	4a20      	ldr	r2, [pc, #128]	; (800612c <prvAddCurrentTaskToDelayedList+0xb8>)
 80060ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d10a      	bne.n	80060cc <prvAddCurrentTaskToDelayedList+0x58>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4619      	mov	r1, r3
 80060c4:	481a      	ldr	r0, [pc, #104]	; (8006130 <prvAddCurrentTaskToDelayedList+0xbc>)
 80060c6:	f7fe f9e6 	bl	8004496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060ca:	e026      	b.n	800611a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4413      	add	r3, r2
 80060d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060d4:	4b14      	ldr	r3, [pc, #80]	; (8006128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d209      	bcs.n	80060f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e4:	4b13      	ldr	r3, [pc, #76]	; (8006134 <prvAddCurrentTaskToDelayedList+0xc0>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f7fe f9f3 	bl	80044dc <vListInsert>
}
 80060f6:	e010      	b.n	800611a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f8:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3304      	adds	r3, #4
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f7fe f9e9 	bl	80044dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800610a:	4b0c      	ldr	r3, [pc, #48]	; (800613c <prvAddCurrentTaskToDelayedList+0xc8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	429a      	cmp	r2, r3
 8006112:	d202      	bcs.n	800611a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006114:	4a09      	ldr	r2, [pc, #36]	; (800613c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6013      	str	r3, [r2, #0]
}
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200006d4 	.word	0x200006d4
 8006128:	200005d0 	.word	0x200005d0
 800612c:	200006d8 	.word	0x200006d8
 8006130:	200006bc 	.word	0x200006bc
 8006134:	2000068c 	.word	0x2000068c
 8006138:	20000688 	.word	0x20000688
 800613c:	200006f0 	.word	0x200006f0

08006140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3b04      	subs	r3, #4
 8006150:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3b04      	subs	r3, #4
 800615e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f023 0201 	bic.w	r2, r3, #1
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3b04      	subs	r3, #4
 800616e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006170:	4a08      	ldr	r2, [pc, #32]	; (8006194 <pxPortInitialiseStack+0x54>)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3b14      	subs	r3, #20
 800617a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3b20      	subs	r3, #32
 8006186:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006188:	68fb      	ldr	r3, [r7, #12]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr
 8006194:	08006199 	.word	0x08006199

08006198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <prvTaskExitError+0x54>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d00a      	beq.n	80061c2 <prvTaskExitError+0x2a>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60fb      	str	r3, [r7, #12]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <prvTaskExitError+0x28>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	60bb      	str	r3, [r7, #8]
}
 80061d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061d6:	bf00      	nop
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0fc      	beq.n	80061d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061de:	bf00      	nop
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	2000000c 	.word	0x2000000c

080061f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <pxCurrentTCBConst2>)
 80061f2:	6819      	ldr	r1, [r3, #0]
 80061f4:	6808      	ldr	r0, [r1, #0]
 80061f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061fa:	f380 8809 	msr	PSP, r0
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f380 8811 	msr	BASEPRI, r0
 800620a:	f04e 0e0d 	orr.w	lr, lr, #13
 800620e:	4770      	bx	lr

08006210 <pxCurrentTCBConst2>:
 8006210:	200005d0 	.word	0x200005d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop

08006218 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006218:	4806      	ldr	r0, [pc, #24]	; (8006234 <prvPortStartFirstTask+0x1c>)
 800621a:	6800      	ldr	r0, [r0, #0]
 800621c:	6800      	ldr	r0, [r0, #0]
 800621e:	f380 8808 	msr	MSP, r0
 8006222:	b662      	cpsie	i
 8006224:	b661      	cpsie	f
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	df00      	svc	0
 8006230:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006232:	bf00      	nop
 8006234:	e000ed08 	.word	0xe000ed08

08006238 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800623e:	4b32      	ldr	r3, [pc, #200]	; (8006308 <xPortStartScheduler+0xd0>)
 8006240:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	22ff      	movs	r2, #255	; 0xff
 800624e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006260:	b2da      	uxtb	r2, r3
 8006262:	4b2a      	ldr	r3, [pc, #168]	; (800630c <xPortStartScheduler+0xd4>)
 8006264:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006266:	4b2a      	ldr	r3, [pc, #168]	; (8006310 <xPortStartScheduler+0xd8>)
 8006268:	2207      	movs	r2, #7
 800626a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800626c:	e009      	b.n	8006282 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800626e:	4b28      	ldr	r3, [pc, #160]	; (8006310 <xPortStartScheduler+0xd8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3b01      	subs	r3, #1
 8006274:	4a26      	ldr	r2, [pc, #152]	; (8006310 <xPortStartScheduler+0xd8>)
 8006276:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d0ef      	beq.n	800626e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800628e:	4b20      	ldr	r3, [pc, #128]	; (8006310 <xPortStartScheduler+0xd8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f1c3 0307 	rsb	r3, r3, #7
 8006296:	2b04      	cmp	r3, #4
 8006298:	d00a      	beq.n	80062b0 <xPortStartScheduler+0x78>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	60bb      	str	r3, [r7, #8]
}
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062b0:	4b17      	ldr	r3, [pc, #92]	; (8006310 <xPortStartScheduler+0xd8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	4a16      	ldr	r2, [pc, #88]	; (8006310 <xPortStartScheduler+0xd8>)
 80062b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062ba:	4b15      	ldr	r3, [pc, #84]	; (8006310 <xPortStartScheduler+0xd8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062c2:	4a13      	ldr	r2, [pc, #76]	; (8006310 <xPortStartScheduler+0xd8>)
 80062c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <xPortStartScheduler+0xdc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a10      	ldr	r2, [pc, #64]	; (8006314 <xPortStartScheduler+0xdc>)
 80062d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062da:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <xPortStartScheduler+0xdc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a0d      	ldr	r2, [pc, #52]	; (8006314 <xPortStartScheduler+0xdc>)
 80062e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062e6:	f000 f8b9 	bl	800645c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062ea:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <xPortStartScheduler+0xe0>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062f0:	f7ff ff92 	bl	8006218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062f4:	f7ff fa96 	bl	8005824 <vTaskSwitchContext>
	prvTaskExitError();
 80062f8:	f7ff ff4e 	bl	8006198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	e000e400 	.word	0xe000e400
 800630c:	200006fc 	.word	0x200006fc
 8006310:	20000700 	.word	0x20000700
 8006314:	e000ed20 	.word	0xe000ed20
 8006318:	2000000c 	.word	0x2000000c

0800631c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	607b      	str	r3, [r7, #4]
}
 8006334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <vPortEnterCritical+0x58>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	4a0d      	ldr	r2, [pc, #52]	; (8006374 <vPortEnterCritical+0x58>)
 800633e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <vPortEnterCritical+0x58>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10f      	bne.n	8006368 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <vPortEnterCritical+0x5c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <vPortEnterCritical+0x4c>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	603b      	str	r3, [r7, #0]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <vPortEnterCritical+0x4a>
	}
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	2000000c 	.word	0x2000000c
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <vPortExitCritical+0x4c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <vPortExitCritical+0x24>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	607b      	str	r3, [r7, #4]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063a0:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <vPortExitCritical+0x4c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	4a08      	ldr	r2, [pc, #32]	; (80063c8 <vPortExitCritical+0x4c>)
 80063a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <vPortExitCritical+0x4c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d105      	bne.n	80063be <vPortExitCritical+0x42>
 80063b2:	2300      	movs	r3, #0
 80063b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr
 80063c8:	2000000c 	.word	0x2000000c
 80063cc:	00000000 	.word	0x00000000

080063d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063d0:	f3ef 8009 	mrs	r0, PSP
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <pxCurrentTCBConst>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063e0:	6010      	str	r0, [r2, #0]
 80063e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80063e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063ea:	f380 8811 	msr	BASEPRI, r0
 80063ee:	f7ff fa19 	bl	8005824 <vTaskSwitchContext>
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f380 8811 	msr	BASEPRI, r0
 80063fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063fe:	6819      	ldr	r1, [r3, #0]
 8006400:	6808      	ldr	r0, [r1, #0]
 8006402:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006406:	f380 8809 	msr	PSP, r0
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	4770      	bx	lr

08006410 <pxCurrentTCBConst>:
 8006410:	200005d0 	.word	0x200005d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop

08006418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	607b      	str	r3, [r7, #4]
}
 8006430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006432:	f7ff f939 	bl	80056a8 <xTaskIncrementTick>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800643c:	4b06      	ldr	r3, [pc, #24]	; (8006458 <SysTick_Handler+0x40>)
 800643e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	2300      	movs	r3, #0
 8006446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f383 8811 	msr	BASEPRI, r3
}
 800644e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006460:	4b0a      	ldr	r3, [pc, #40]	; (800648c <vPortSetupTimerInterrupt+0x30>)
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <vPortSetupTimerInterrupt+0x34>)
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800646c:	4b09      	ldr	r3, [pc, #36]	; (8006494 <vPortSetupTimerInterrupt+0x38>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a09      	ldr	r2, [pc, #36]	; (8006498 <vPortSetupTimerInterrupt+0x3c>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	099b      	lsrs	r3, r3, #6
 8006478:	4a08      	ldr	r2, [pc, #32]	; (800649c <vPortSetupTimerInterrupt+0x40>)
 800647a:	3b01      	subs	r3, #1
 800647c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800647e:	4b03      	ldr	r3, [pc, #12]	; (800648c <vPortSetupTimerInterrupt+0x30>)
 8006480:	2207      	movs	r2, #7
 8006482:	601a      	str	r2, [r3, #0]
}
 8006484:	bf00      	nop
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr
 800648c:	e000e010 	.word	0xe000e010
 8006490:	e000e018 	.word	0xe000e018
 8006494:	20000000 	.word	0x20000000
 8006498:	10624dd3 	.word	0x10624dd3
 800649c:	e000e014 	.word	0xe000e014

080064a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064ac:	f7ff f852 	bl	8005554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064b0:	4b58      	ldr	r3, [pc, #352]	; (8006614 <pvPortMalloc+0x174>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064b8:	f000 f910 	bl	80066dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064bc:	4b56      	ldr	r3, [pc, #344]	; (8006618 <pvPortMalloc+0x178>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 808e 	bne.w	80065e6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01d      	beq.n	800650c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80064d0:	2208      	movs	r2, #8
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4413      	add	r3, r2
 80064d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d014      	beq.n	800650c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f023 0307 	bic.w	r3, r3, #7
 80064e8:	3308      	adds	r3, #8
 80064ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <pvPortMalloc+0x6c>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	617b      	str	r3, [r7, #20]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d069      	beq.n	80065e6 <pvPortMalloc+0x146>
 8006512:	4b42      	ldr	r3, [pc, #264]	; (800661c <pvPortMalloc+0x17c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d864      	bhi.n	80065e6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800651c:	4b40      	ldr	r3, [pc, #256]	; (8006620 <pvPortMalloc+0x180>)
 800651e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006520:	4b3f      	ldr	r3, [pc, #252]	; (8006620 <pvPortMalloc+0x180>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006526:	e004      	b.n	8006532 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d903      	bls.n	8006544 <pvPortMalloc+0xa4>
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1f1      	bne.n	8006528 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006544:	4b33      	ldr	r3, [pc, #204]	; (8006614 <pvPortMalloc+0x174>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	429a      	cmp	r2, r3
 800654c:	d04b      	beq.n	80065e6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2208      	movs	r2, #8
 8006554:	4413      	add	r3, r2
 8006556:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	2308      	movs	r3, #8
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	429a      	cmp	r2, r3
 800656e:	d91f      	bls.n	80065b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <pvPortMalloc+0xf8>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	613b      	str	r3, [r7, #16]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065aa:	69b8      	ldr	r0, [r7, #24]
 80065ac:	f000 f8f8 	bl	80067a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065b0:	4b1a      	ldr	r3, [pc, #104]	; (800661c <pvPortMalloc+0x17c>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	4a18      	ldr	r2, [pc, #96]	; (800661c <pvPortMalloc+0x17c>)
 80065bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <pvPortMalloc+0x17c>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b18      	ldr	r3, [pc, #96]	; (8006624 <pvPortMalloc+0x184>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d203      	bcs.n	80065d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065ca:	4b14      	ldr	r3, [pc, #80]	; (800661c <pvPortMalloc+0x17c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a15      	ldr	r2, [pc, #84]	; (8006624 <pvPortMalloc+0x184>)
 80065d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <pvPortMalloc+0x178>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	431a      	orrs	r2, r3
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065e6:	f7fe ffc3 	bl	8005570 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <pvPortMalloc+0x16a>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	60fb      	str	r3, [r7, #12]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <pvPortMalloc+0x168>
	return pvReturn;
 800660a:	69fb      	ldr	r3, [r7, #28]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3728      	adds	r7, #40	; 0x28
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	2000130c 	.word	0x2000130c
 8006618:	20001318 	.word	0x20001318
 800661c:	20001310 	.word	0x20001310
 8006620:	20001304 	.word	0x20001304
 8006624:	20001314 	.word	0x20001314

08006628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d048      	beq.n	80066cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800663a:	2308      	movs	r3, #8
 800663c:	425b      	negs	r3, r3
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b21      	ldr	r3, [pc, #132]	; (80066d4 <vPortFree+0xac>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4013      	ands	r3, r2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <vPortFree+0x44>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	60fb      	str	r3, [r7, #12]
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <vPortFree+0x62>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	60bb      	str	r3, [r7, #8]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <vPortFree+0xac>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4013      	ands	r3, r2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d019      	beq.n	80066cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d115      	bne.n	80066cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <vPortFree+0xac>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	43db      	mvns	r3, r3
 80066aa:	401a      	ands	r2, r3
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066b0:	f7fe ff50 	bl	8005554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <vPortFree+0xb0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4413      	add	r3, r2
 80066be:	4a06      	ldr	r2, [pc, #24]	; (80066d8 <vPortFree+0xb0>)
 80066c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066c2:	6938      	ldr	r0, [r7, #16]
 80066c4:	f000 f86c 	bl	80067a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80066c8:	f7fe ff52 	bl	8005570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066cc:	bf00      	nop
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20001318 	.word	0x20001318
 80066d8:	20001310 	.word	0x20001310

080066dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066e8:	4b27      	ldr	r3, [pc, #156]	; (8006788 <prvHeapInit+0xac>)
 80066ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00c      	beq.n	8006710 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3307      	adds	r3, #7
 80066fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0307 	bic.w	r3, r3, #7
 8006702:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	4a1f      	ldr	r2, [pc, #124]	; (8006788 <prvHeapInit+0xac>)
 800670c:	4413      	add	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006714:	4a1d      	ldr	r2, [pc, #116]	; (800678c <prvHeapInit+0xb0>)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800671a:	4b1c      	ldr	r3, [pc, #112]	; (800678c <prvHeapInit+0xb0>)
 800671c:	2200      	movs	r2, #0
 800671e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	4413      	add	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006728:	2208      	movs	r2, #8
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0307 	bic.w	r3, r3, #7
 8006736:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a15      	ldr	r2, [pc, #84]	; (8006790 <prvHeapInit+0xb4>)
 800673c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800673e:	4b14      	ldr	r3, [pc, #80]	; (8006790 <prvHeapInit+0xb4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006746:	4b12      	ldr	r3, [pc, #72]	; (8006790 <prvHeapInit+0xb4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	1ad2      	subs	r2, r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800675c:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <prvHeapInit+0xb4>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <prvHeapInit+0xb8>)
 800676a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	4a09      	ldr	r2, [pc, #36]	; (8006798 <prvHeapInit+0xbc>)
 8006772:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006774:	4b09      	ldr	r3, [pc, #36]	; (800679c <prvHeapInit+0xc0>)
 8006776:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800677a:	601a      	str	r2, [r3, #0]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20000704 	.word	0x20000704
 800678c:	20001304 	.word	0x20001304
 8006790:	2000130c 	.word	0x2000130c
 8006794:	20001314 	.word	0x20001314
 8006798:	20001310 	.word	0x20001310
 800679c:	20001318 	.word	0x20001318

080067a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067a8:	4b27      	ldr	r3, [pc, #156]	; (8006848 <prvInsertBlockIntoFreeList+0xa8>)
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	e002      	b.n	80067b4 <prvInsertBlockIntoFreeList+0x14>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d8f7      	bhi.n	80067ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	4413      	add	r3, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d108      	bne.n	80067e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	441a      	add	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	441a      	add	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d118      	bne.n	8006828 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b14      	ldr	r3, [pc, #80]	; (800684c <prvInsertBlockIntoFreeList+0xac>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d00d      	beq.n	800681e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	441a      	add	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e008      	b.n	8006830 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <prvInsertBlockIntoFreeList+0xac>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e003      	b.n	8006830 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d002      	beq.n	800683e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800683e:	bf00      	nop
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr
 8006848:	20001304 	.word	0x20001304
 800684c:	2000130c 	.word	0x2000130c

08006850 <__errno>:
 8006850:	4b01      	ldr	r3, [pc, #4]	; (8006858 <__errno+0x8>)
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000010 	.word	0x20000010

0800685c <std>:
 800685c:	2300      	movs	r3, #0
 800685e:	b510      	push	{r4, lr}
 8006860:	4604      	mov	r4, r0
 8006862:	e9c0 3300 	strd	r3, r3, [r0]
 8006866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800686a:	6083      	str	r3, [r0, #8]
 800686c:	8181      	strh	r1, [r0, #12]
 800686e:	6643      	str	r3, [r0, #100]	; 0x64
 8006870:	81c2      	strh	r2, [r0, #14]
 8006872:	6183      	str	r3, [r0, #24]
 8006874:	4619      	mov	r1, r3
 8006876:	2208      	movs	r2, #8
 8006878:	305c      	adds	r0, #92	; 0x5c
 800687a:	f000 f91a 	bl	8006ab2 <memset>
 800687e:	4b05      	ldr	r3, [pc, #20]	; (8006894 <std+0x38>)
 8006880:	6224      	str	r4, [r4, #32]
 8006882:	6263      	str	r3, [r4, #36]	; 0x24
 8006884:	4b04      	ldr	r3, [pc, #16]	; (8006898 <std+0x3c>)
 8006886:	62a3      	str	r3, [r4, #40]	; 0x28
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <std+0x40>)
 800688a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800688c:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <std+0x44>)
 800688e:	6323      	str	r3, [r4, #48]	; 0x30
 8006890:	bd10      	pop	{r4, pc}
 8006892:	bf00      	nop
 8006894:	08007a6d 	.word	0x08007a6d
 8006898:	08007a8f 	.word	0x08007a8f
 800689c:	08007ac7 	.word	0x08007ac7
 80068a0:	08007aeb 	.word	0x08007aeb

080068a4 <_cleanup_r>:
 80068a4:	4901      	ldr	r1, [pc, #4]	; (80068ac <_cleanup_r+0x8>)
 80068a6:	f000 b8af 	b.w	8006a08 <_fwalk_reent>
 80068aa:	bf00      	nop
 80068ac:	08009651 	.word	0x08009651

080068b0 <__sfmoreglue>:
 80068b0:	2268      	movs	r2, #104	; 0x68
 80068b2:	b570      	push	{r4, r5, r6, lr}
 80068b4:	1e4d      	subs	r5, r1, #1
 80068b6:	4355      	muls	r5, r2
 80068b8:	460e      	mov	r6, r1
 80068ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068be:	f000 f921 	bl	8006b04 <_malloc_r>
 80068c2:	4604      	mov	r4, r0
 80068c4:	b140      	cbz	r0, 80068d8 <__sfmoreglue+0x28>
 80068c6:	2100      	movs	r1, #0
 80068c8:	e9c0 1600 	strd	r1, r6, [r0]
 80068cc:	300c      	adds	r0, #12
 80068ce:	60a0      	str	r0, [r4, #8]
 80068d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068d4:	f000 f8ed 	bl	8006ab2 <memset>
 80068d8:	4620      	mov	r0, r4
 80068da:	bd70      	pop	{r4, r5, r6, pc}

080068dc <__sfp_lock_acquire>:
 80068dc:	4801      	ldr	r0, [pc, #4]	; (80068e4 <__sfp_lock_acquire+0x8>)
 80068de:	f000 b8d8 	b.w	8006a92 <__retarget_lock_acquire_recursive>
 80068e2:	bf00      	nop
 80068e4:	2000131d 	.word	0x2000131d

080068e8 <__sfp_lock_release>:
 80068e8:	4801      	ldr	r0, [pc, #4]	; (80068f0 <__sfp_lock_release+0x8>)
 80068ea:	f000 b8d3 	b.w	8006a94 <__retarget_lock_release_recursive>
 80068ee:	bf00      	nop
 80068f0:	2000131d 	.word	0x2000131d

080068f4 <__sinit_lock_acquire>:
 80068f4:	4801      	ldr	r0, [pc, #4]	; (80068fc <__sinit_lock_acquire+0x8>)
 80068f6:	f000 b8cc 	b.w	8006a92 <__retarget_lock_acquire_recursive>
 80068fa:	bf00      	nop
 80068fc:	2000131e 	.word	0x2000131e

08006900 <__sinit_lock_release>:
 8006900:	4801      	ldr	r0, [pc, #4]	; (8006908 <__sinit_lock_release+0x8>)
 8006902:	f000 b8c7 	b.w	8006a94 <__retarget_lock_release_recursive>
 8006906:	bf00      	nop
 8006908:	2000131e 	.word	0x2000131e

0800690c <__sinit>:
 800690c:	b510      	push	{r4, lr}
 800690e:	4604      	mov	r4, r0
 8006910:	f7ff fff0 	bl	80068f4 <__sinit_lock_acquire>
 8006914:	69a3      	ldr	r3, [r4, #24]
 8006916:	b11b      	cbz	r3, 8006920 <__sinit+0x14>
 8006918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691c:	f7ff bff0 	b.w	8006900 <__sinit_lock_release>
 8006920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006924:	6523      	str	r3, [r4, #80]	; 0x50
 8006926:	4b13      	ldr	r3, [pc, #76]	; (8006974 <__sinit+0x68>)
 8006928:	4a13      	ldr	r2, [pc, #76]	; (8006978 <__sinit+0x6c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	62a2      	str	r2, [r4, #40]	; 0x28
 800692e:	42a3      	cmp	r3, r4
 8006930:	bf08      	it	eq
 8006932:	2301      	moveq	r3, #1
 8006934:	4620      	mov	r0, r4
 8006936:	bf08      	it	eq
 8006938:	61a3      	streq	r3, [r4, #24]
 800693a:	f000 f81f 	bl	800697c <__sfp>
 800693e:	6060      	str	r0, [r4, #4]
 8006940:	4620      	mov	r0, r4
 8006942:	f000 f81b 	bl	800697c <__sfp>
 8006946:	60a0      	str	r0, [r4, #8]
 8006948:	4620      	mov	r0, r4
 800694a:	f000 f817 	bl	800697c <__sfp>
 800694e:	2200      	movs	r2, #0
 8006950:	2104      	movs	r1, #4
 8006952:	60e0      	str	r0, [r4, #12]
 8006954:	6860      	ldr	r0, [r4, #4]
 8006956:	f7ff ff81 	bl	800685c <std>
 800695a:	2201      	movs	r2, #1
 800695c:	2109      	movs	r1, #9
 800695e:	68a0      	ldr	r0, [r4, #8]
 8006960:	f7ff ff7c 	bl	800685c <std>
 8006964:	2202      	movs	r2, #2
 8006966:	2112      	movs	r1, #18
 8006968:	68e0      	ldr	r0, [r4, #12]
 800696a:	f7ff ff77 	bl	800685c <std>
 800696e:	2301      	movs	r3, #1
 8006970:	61a3      	str	r3, [r4, #24]
 8006972:	e7d1      	b.n	8006918 <__sinit+0xc>
 8006974:	0800b368 	.word	0x0800b368
 8006978:	080068a5 	.word	0x080068a5

0800697c <__sfp>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	4607      	mov	r7, r0
 8006980:	f7ff ffac 	bl	80068dc <__sfp_lock_acquire>
 8006984:	4b1e      	ldr	r3, [pc, #120]	; (8006a00 <__sfp+0x84>)
 8006986:	681e      	ldr	r6, [r3, #0]
 8006988:	69b3      	ldr	r3, [r6, #24]
 800698a:	b913      	cbnz	r3, 8006992 <__sfp+0x16>
 800698c:	4630      	mov	r0, r6
 800698e:	f7ff ffbd 	bl	800690c <__sinit>
 8006992:	3648      	adds	r6, #72	; 0x48
 8006994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006998:	3b01      	subs	r3, #1
 800699a:	d503      	bpl.n	80069a4 <__sfp+0x28>
 800699c:	6833      	ldr	r3, [r6, #0]
 800699e:	b30b      	cbz	r3, 80069e4 <__sfp+0x68>
 80069a0:	6836      	ldr	r6, [r6, #0]
 80069a2:	e7f7      	b.n	8006994 <__sfp+0x18>
 80069a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069a8:	b9d5      	cbnz	r5, 80069e0 <__sfp+0x64>
 80069aa:	4b16      	ldr	r3, [pc, #88]	; (8006a04 <__sfp+0x88>)
 80069ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069b0:	60e3      	str	r3, [r4, #12]
 80069b2:	6665      	str	r5, [r4, #100]	; 0x64
 80069b4:	f000 f86c 	bl	8006a90 <__retarget_lock_init_recursive>
 80069b8:	f7ff ff96 	bl	80068e8 <__sfp_lock_release>
 80069bc:	2208      	movs	r2, #8
 80069be:	4629      	mov	r1, r5
 80069c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069c8:	6025      	str	r5, [r4, #0]
 80069ca:	61a5      	str	r5, [r4, #24]
 80069cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069d0:	f000 f86f 	bl	8006ab2 <memset>
 80069d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069dc:	4620      	mov	r0, r4
 80069de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e0:	3468      	adds	r4, #104	; 0x68
 80069e2:	e7d9      	b.n	8006998 <__sfp+0x1c>
 80069e4:	2104      	movs	r1, #4
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7ff ff62 	bl	80068b0 <__sfmoreglue>
 80069ec:	4604      	mov	r4, r0
 80069ee:	6030      	str	r0, [r6, #0]
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d1d5      	bne.n	80069a0 <__sfp+0x24>
 80069f4:	f7ff ff78 	bl	80068e8 <__sfp_lock_release>
 80069f8:	230c      	movs	r3, #12
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	e7ee      	b.n	80069dc <__sfp+0x60>
 80069fe:	bf00      	nop
 8006a00:	0800b368 	.word	0x0800b368
 8006a04:	ffff0001 	.word	0xffff0001

08006a08 <_fwalk_reent>:
 8006a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	4688      	mov	r8, r1
 8006a10:	2700      	movs	r7, #0
 8006a12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a1e:	d505      	bpl.n	8006a2c <_fwalk_reent+0x24>
 8006a20:	6824      	ldr	r4, [r4, #0]
 8006a22:	2c00      	cmp	r4, #0
 8006a24:	d1f7      	bne.n	8006a16 <_fwalk_reent+0xe>
 8006a26:	4638      	mov	r0, r7
 8006a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2c:	89ab      	ldrh	r3, [r5, #12]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d907      	bls.n	8006a42 <_fwalk_reent+0x3a>
 8006a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a36:	3301      	adds	r3, #1
 8006a38:	d003      	beq.n	8006a42 <_fwalk_reent+0x3a>
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	47c0      	blx	r8
 8006a40:	4307      	orrs	r7, r0
 8006a42:	3568      	adds	r5, #104	; 0x68
 8006a44:	e7e9      	b.n	8006a1a <_fwalk_reent+0x12>
	...

08006a48 <__libc_init_array>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	4d0c      	ldr	r5, [pc, #48]	; (8006a80 <__libc_init_array+0x38>)
 8006a4e:	4c0d      	ldr	r4, [pc, #52]	; (8006a84 <__libc_init_array+0x3c>)
 8006a50:	1b64      	subs	r4, r4, r5
 8006a52:	10a4      	asrs	r4, r4, #2
 8006a54:	42a6      	cmp	r6, r4
 8006a56:	d109      	bne.n	8006a6c <__libc_init_array+0x24>
 8006a58:	f004 fbfa 	bl	800b250 <_init>
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	4d0a      	ldr	r5, [pc, #40]	; (8006a88 <__libc_init_array+0x40>)
 8006a60:	4c0a      	ldr	r4, [pc, #40]	; (8006a8c <__libc_init_array+0x44>)
 8006a62:	1b64      	subs	r4, r4, r5
 8006a64:	10a4      	asrs	r4, r4, #2
 8006a66:	42a6      	cmp	r6, r4
 8006a68:	d105      	bne.n	8006a76 <__libc_init_array+0x2e>
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a70:	4798      	blx	r3
 8006a72:	3601      	adds	r6, #1
 8006a74:	e7ee      	b.n	8006a54 <__libc_init_array+0xc>
 8006a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7a:	4798      	blx	r3
 8006a7c:	3601      	adds	r6, #1
 8006a7e:	e7f2      	b.n	8006a66 <__libc_init_array+0x1e>
 8006a80:	0800b7ac 	.word	0x0800b7ac
 8006a84:	0800b7ac 	.word	0x0800b7ac
 8006a88:	0800b7ac 	.word	0x0800b7ac
 8006a8c:	0800b7b0 	.word	0x0800b7b0

08006a90 <__retarget_lock_init_recursive>:
 8006a90:	4770      	bx	lr

08006a92 <__retarget_lock_acquire_recursive>:
 8006a92:	4770      	bx	lr

08006a94 <__retarget_lock_release_recursive>:
 8006a94:	4770      	bx	lr

08006a96 <memcpy>:
 8006a96:	440a      	add	r2, r1
 8006a98:	4291      	cmp	r1, r2
 8006a9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a9e:	d100      	bne.n	8006aa2 <memcpy+0xc>
 8006aa0:	4770      	bx	lr
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa8:	4291      	cmp	r1, r2
 8006aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aae:	d1f9      	bne.n	8006aa4 <memcpy+0xe>
 8006ab0:	bd10      	pop	{r4, pc}

08006ab2 <memset>:
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	4402      	add	r2, r0
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d100      	bne.n	8006abc <memset+0xa>
 8006aba:	4770      	bx	lr
 8006abc:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac0:	e7f9      	b.n	8006ab6 <memset+0x4>
	...

08006ac4 <sbrk_aligned>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	4e0e      	ldr	r6, [pc, #56]	; (8006b00 <sbrk_aligned+0x3c>)
 8006ac8:	460c      	mov	r4, r1
 8006aca:	6831      	ldr	r1, [r6, #0]
 8006acc:	4605      	mov	r5, r0
 8006ace:	b911      	cbnz	r1, 8006ad6 <sbrk_aligned+0x12>
 8006ad0:	f000 ff64 	bl	800799c <_sbrk_r>
 8006ad4:	6030      	str	r0, [r6, #0]
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 ff5f 	bl	800799c <_sbrk_r>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	d00a      	beq.n	8006af8 <sbrk_aligned+0x34>
 8006ae2:	1cc4      	adds	r4, r0, #3
 8006ae4:	f024 0403 	bic.w	r4, r4, #3
 8006ae8:	42a0      	cmp	r0, r4
 8006aea:	d007      	beq.n	8006afc <sbrk_aligned+0x38>
 8006aec:	1a21      	subs	r1, r4, r0
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 ff54 	bl	800799c <_sbrk_r>
 8006af4:	3001      	adds	r0, #1
 8006af6:	d101      	bne.n	8006afc <sbrk_aligned+0x38>
 8006af8:	f04f 34ff 	mov.w	r4, #4294967295
 8006afc:	4620      	mov	r0, r4
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	20001324 	.word	0x20001324

08006b04 <_malloc_r>:
 8006b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b08:	1ccd      	adds	r5, r1, #3
 8006b0a:	f025 0503 	bic.w	r5, r5, #3
 8006b0e:	3508      	adds	r5, #8
 8006b10:	2d0c      	cmp	r5, #12
 8006b12:	bf38      	it	cc
 8006b14:	250c      	movcc	r5, #12
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	4607      	mov	r7, r0
 8006b1a:	db01      	blt.n	8006b20 <_malloc_r+0x1c>
 8006b1c:	42a9      	cmp	r1, r5
 8006b1e:	d905      	bls.n	8006b2c <_malloc_r+0x28>
 8006b20:	230c      	movs	r3, #12
 8006b22:	2600      	movs	r6, #0
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4630      	mov	r0, r6
 8006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2c:	4e2e      	ldr	r6, [pc, #184]	; (8006be8 <_malloc_r+0xe4>)
 8006b2e:	f003 f96f 	bl	8009e10 <__malloc_lock>
 8006b32:	6833      	ldr	r3, [r6, #0]
 8006b34:	461c      	mov	r4, r3
 8006b36:	bb34      	cbnz	r4, 8006b86 <_malloc_r+0x82>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f7ff ffc2 	bl	8006ac4 <sbrk_aligned>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	4604      	mov	r4, r0
 8006b44:	d14d      	bne.n	8006be2 <_malloc_r+0xde>
 8006b46:	6834      	ldr	r4, [r6, #0]
 8006b48:	4626      	mov	r6, r4
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	d140      	bne.n	8006bd0 <_malloc_r+0xcc>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	4631      	mov	r1, r6
 8006b52:	4638      	mov	r0, r7
 8006b54:	eb04 0803 	add.w	r8, r4, r3
 8006b58:	f000 ff20 	bl	800799c <_sbrk_r>
 8006b5c:	4580      	cmp	r8, r0
 8006b5e:	d13a      	bne.n	8006bd6 <_malloc_r+0xd2>
 8006b60:	6821      	ldr	r1, [r4, #0]
 8006b62:	3503      	adds	r5, #3
 8006b64:	1a6d      	subs	r5, r5, r1
 8006b66:	f025 0503 	bic.w	r5, r5, #3
 8006b6a:	3508      	adds	r5, #8
 8006b6c:	2d0c      	cmp	r5, #12
 8006b6e:	bf38      	it	cc
 8006b70:	250c      	movcc	r5, #12
 8006b72:	4638      	mov	r0, r7
 8006b74:	4629      	mov	r1, r5
 8006b76:	f7ff ffa5 	bl	8006ac4 <sbrk_aligned>
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d02b      	beq.n	8006bd6 <_malloc_r+0xd2>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	442b      	add	r3, r5
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	e00e      	b.n	8006ba4 <_malloc_r+0xa0>
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	1b52      	subs	r2, r2, r5
 8006b8a:	d41e      	bmi.n	8006bca <_malloc_r+0xc6>
 8006b8c:	2a0b      	cmp	r2, #11
 8006b8e:	d916      	bls.n	8006bbe <_malloc_r+0xba>
 8006b90:	1961      	adds	r1, r4, r5
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	6025      	str	r5, [r4, #0]
 8006b96:	bf18      	it	ne
 8006b98:	6059      	strne	r1, [r3, #4]
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	bf08      	it	eq
 8006b9e:	6031      	streq	r1, [r6, #0]
 8006ba0:	5162      	str	r2, [r4, r5]
 8006ba2:	604b      	str	r3, [r1, #4]
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f104 060b 	add.w	r6, r4, #11
 8006baa:	f003 f937 	bl	8009e1c <__malloc_unlock>
 8006bae:	f026 0607 	bic.w	r6, r6, #7
 8006bb2:	1d23      	adds	r3, r4, #4
 8006bb4:	1af2      	subs	r2, r6, r3
 8006bb6:	d0b6      	beq.n	8006b26 <_malloc_r+0x22>
 8006bb8:	1b9b      	subs	r3, r3, r6
 8006bba:	50a3      	str	r3, [r4, r2]
 8006bbc:	e7b3      	b.n	8006b26 <_malloc_r+0x22>
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	bf0c      	ite	eq
 8006bc4:	6032      	streq	r2, [r6, #0]
 8006bc6:	605a      	strne	r2, [r3, #4]
 8006bc8:	e7ec      	b.n	8006ba4 <_malloc_r+0xa0>
 8006bca:	4623      	mov	r3, r4
 8006bcc:	6864      	ldr	r4, [r4, #4]
 8006bce:	e7b2      	b.n	8006b36 <_malloc_r+0x32>
 8006bd0:	4634      	mov	r4, r6
 8006bd2:	6876      	ldr	r6, [r6, #4]
 8006bd4:	e7b9      	b.n	8006b4a <_malloc_r+0x46>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	4638      	mov	r0, r7
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	f003 f91e 	bl	8009e1c <__malloc_unlock>
 8006be0:	e7a1      	b.n	8006b26 <_malloc_r+0x22>
 8006be2:	6025      	str	r5, [r4, #0]
 8006be4:	e7de      	b.n	8006ba4 <_malloc_r+0xa0>
 8006be6:	bf00      	nop
 8006be8:	20001320 	.word	0x20001320

08006bec <__cvt>:
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf2:	461f      	mov	r7, r3
 8006bf4:	bfbb      	ittet	lt
 8006bf6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006bfa:	461f      	movlt	r7, r3
 8006bfc:	2300      	movge	r3, #0
 8006bfe:	232d      	movlt	r3, #45	; 0x2d
 8006c00:	b088      	sub	sp, #32
 8006c02:	4614      	mov	r4, r2
 8006c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006c08:	7013      	strb	r3, [r2, #0]
 8006c0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006c10:	f023 0820 	bic.w	r8, r3, #32
 8006c14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c18:	d005      	beq.n	8006c26 <__cvt+0x3a>
 8006c1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c1e:	d100      	bne.n	8006c22 <__cvt+0x36>
 8006c20:	3501      	adds	r5, #1
 8006c22:	2302      	movs	r3, #2
 8006c24:	e000      	b.n	8006c28 <__cvt+0x3c>
 8006c26:	2303      	movs	r3, #3
 8006c28:	aa07      	add	r2, sp, #28
 8006c2a:	9204      	str	r2, [sp, #16]
 8006c2c:	aa06      	add	r2, sp, #24
 8006c2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c32:	e9cd 3500 	strd	r3, r5, [sp]
 8006c36:	4622      	mov	r2, r4
 8006c38:	463b      	mov	r3, r7
 8006c3a:	f001 fe99 	bl	8008970 <_dtoa_r>
 8006c3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c42:	4606      	mov	r6, r0
 8006c44:	d102      	bne.n	8006c4c <__cvt+0x60>
 8006c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c48:	07db      	lsls	r3, r3, #31
 8006c4a:	d522      	bpl.n	8006c92 <__cvt+0xa6>
 8006c4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c50:	eb06 0905 	add.w	r9, r6, r5
 8006c54:	d110      	bne.n	8006c78 <__cvt+0x8c>
 8006c56:	7833      	ldrb	r3, [r6, #0]
 8006c58:	2b30      	cmp	r3, #48	; 0x30
 8006c5a:	d10a      	bne.n	8006c72 <__cvt+0x86>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4620      	mov	r0, r4
 8006c62:	4639      	mov	r1, r7
 8006c64:	f7f9 fea0 	bl	80009a8 <__aeabi_dcmpeq>
 8006c68:	b918      	cbnz	r0, 8006c72 <__cvt+0x86>
 8006c6a:	f1c5 0501 	rsb	r5, r5, #1
 8006c6e:	f8ca 5000 	str.w	r5, [sl]
 8006c72:	f8da 3000 	ldr.w	r3, [sl]
 8006c76:	4499      	add	r9, r3
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4639      	mov	r1, r7
 8006c80:	f7f9 fe92 	bl	80009a8 <__aeabi_dcmpeq>
 8006c84:	b108      	cbz	r0, 8006c8a <__cvt+0x9e>
 8006c86:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c8a:	2230      	movs	r2, #48	; 0x30
 8006c8c:	9b07      	ldr	r3, [sp, #28]
 8006c8e:	454b      	cmp	r3, r9
 8006c90:	d307      	bcc.n	8006ca2 <__cvt+0xb6>
 8006c92:	4630      	mov	r0, r6
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c98:	1b9b      	subs	r3, r3, r6
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	b008      	add	sp, #32
 8006c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca2:	1c59      	adds	r1, r3, #1
 8006ca4:	9107      	str	r1, [sp, #28]
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	e7f0      	b.n	8006c8c <__cvt+0xa0>

08006caa <__exponent>:
 8006caa:	4603      	mov	r3, r0
 8006cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cae:	2900      	cmp	r1, #0
 8006cb0:	f803 2b02 	strb.w	r2, [r3], #2
 8006cb4:	bfb6      	itet	lt
 8006cb6:	222d      	movlt	r2, #45	; 0x2d
 8006cb8:	222b      	movge	r2, #43	; 0x2b
 8006cba:	4249      	neglt	r1, r1
 8006cbc:	2909      	cmp	r1, #9
 8006cbe:	7042      	strb	r2, [r0, #1]
 8006cc0:	dd2b      	ble.n	8006d1a <__exponent+0x70>
 8006cc2:	f10d 0407 	add.w	r4, sp, #7
 8006cc6:	46a4      	mov	ip, r4
 8006cc8:	270a      	movs	r7, #10
 8006cca:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cce:	460a      	mov	r2, r1
 8006cd0:	46a6      	mov	lr, r4
 8006cd2:	fb07 1516 	mls	r5, r7, r6, r1
 8006cd6:	2a63      	cmp	r2, #99	; 0x63
 8006cd8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006cdc:	4631      	mov	r1, r6
 8006cde:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ce2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ce6:	dcf0      	bgt.n	8006cca <__exponent+0x20>
 8006ce8:	3130      	adds	r1, #48	; 0x30
 8006cea:	f1ae 0502 	sub.w	r5, lr, #2
 8006cee:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	1c44      	adds	r4, r0, #1
 8006cf6:	4561      	cmp	r1, ip
 8006cf8:	d30a      	bcc.n	8006d10 <__exponent+0x66>
 8006cfa:	f10d 0209 	add.w	r2, sp, #9
 8006cfe:	eba2 020e 	sub.w	r2, r2, lr
 8006d02:	4565      	cmp	r5, ip
 8006d04:	bf88      	it	hi
 8006d06:	2200      	movhi	r2, #0
 8006d08:	4413      	add	r3, r2
 8006d0a:	1a18      	subs	r0, r3, r0
 8006d0c:	b003      	add	sp, #12
 8006d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d14:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d18:	e7ed      	b.n	8006cf6 <__exponent+0x4c>
 8006d1a:	2330      	movs	r3, #48	; 0x30
 8006d1c:	3130      	adds	r1, #48	; 0x30
 8006d1e:	7083      	strb	r3, [r0, #2]
 8006d20:	70c1      	strb	r1, [r0, #3]
 8006d22:	1d03      	adds	r3, r0, #4
 8006d24:	e7f1      	b.n	8006d0a <__exponent+0x60>
	...

08006d28 <_printf_float>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	b091      	sub	sp, #68	; 0x44
 8006d2e:	460c      	mov	r4, r1
 8006d30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006d34:	4616      	mov	r6, r2
 8006d36:	461f      	mov	r7, r3
 8006d38:	4605      	mov	r5, r0
 8006d3a:	f003 f82b 	bl	8009d94 <_localeconv_r>
 8006d3e:	6803      	ldr	r3, [r0, #0]
 8006d40:	4618      	mov	r0, r3
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
 8006d44:	f7f9 fa04 	bl	8000150 <strlen>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	930e      	str	r3, [sp, #56]	; 0x38
 8006d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d50:	900a      	str	r0, [sp, #40]	; 0x28
 8006d52:	3307      	adds	r3, #7
 8006d54:	f023 0307 	bic.w	r3, r3, #7
 8006d58:	f103 0208 	add.w	r2, r3, #8
 8006d5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006d60:	f8d4 b000 	ldr.w	fp, [r4]
 8006d64:	f8c8 2000 	str.w	r2, [r8]
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006d74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4b9c      	ldr	r3, [pc, #624]	; (8006ff4 <_printf_float+0x2cc>)
 8006d82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d84:	f7f9 fe42 	bl	8000a0c <__aeabi_dcmpun>
 8006d88:	bb70      	cbnz	r0, 8006de8 <_printf_float+0xc0>
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	4640      	mov	r0, r8
 8006d90:	4b98      	ldr	r3, [pc, #608]	; (8006ff4 <_printf_float+0x2cc>)
 8006d92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d94:	f7f9 fe1c 	bl	80009d0 <__aeabi_dcmple>
 8006d98:	bb30      	cbnz	r0, 8006de8 <_printf_float+0xc0>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4640      	mov	r0, r8
 8006da0:	4651      	mov	r1, sl
 8006da2:	f7f9 fe0b 	bl	80009bc <__aeabi_dcmplt>
 8006da6:	b110      	cbz	r0, 8006dae <_printf_float+0x86>
 8006da8:	232d      	movs	r3, #45	; 0x2d
 8006daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dae:	4b92      	ldr	r3, [pc, #584]	; (8006ff8 <_printf_float+0x2d0>)
 8006db0:	4892      	ldr	r0, [pc, #584]	; (8006ffc <_printf_float+0x2d4>)
 8006db2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006db6:	bf94      	ite	ls
 8006db8:	4698      	movls	r8, r3
 8006dba:	4680      	movhi	r8, r0
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	f04f 0a00 	mov.w	sl, #0
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	f02b 0304 	bic.w	r3, fp, #4
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	4633      	mov	r3, r6
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	9700      	str	r7, [sp, #0]
 8006dd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8006dd4:	f000 f9d4 	bl	8007180 <_printf_common>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f040 8090 	bne.w	8006efe <_printf_float+0x1d6>
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	b011      	add	sp, #68	; 0x44
 8006de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de8:	4642      	mov	r2, r8
 8006dea:	4653      	mov	r3, sl
 8006dec:	4640      	mov	r0, r8
 8006dee:	4651      	mov	r1, sl
 8006df0:	f7f9 fe0c 	bl	8000a0c <__aeabi_dcmpun>
 8006df4:	b148      	cbz	r0, 8006e0a <_printf_float+0xe2>
 8006df6:	f1ba 0f00 	cmp.w	sl, #0
 8006dfa:	bfb8      	it	lt
 8006dfc:	232d      	movlt	r3, #45	; 0x2d
 8006dfe:	4880      	ldr	r0, [pc, #512]	; (8007000 <_printf_float+0x2d8>)
 8006e00:	bfb8      	it	lt
 8006e02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e06:	4b7f      	ldr	r3, [pc, #508]	; (8007004 <_printf_float+0x2dc>)
 8006e08:	e7d3      	b.n	8006db2 <_printf_float+0x8a>
 8006e0a:	6863      	ldr	r3, [r4, #4]
 8006e0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	d142      	bne.n	8006e9a <_printf_float+0x172>
 8006e14:	2306      	movs	r3, #6
 8006e16:	6063      	str	r3, [r4, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	9206      	str	r2, [sp, #24]
 8006e1c:	aa0e      	add	r2, sp, #56	; 0x38
 8006e1e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006e22:	aa0d      	add	r2, sp, #52	; 0x34
 8006e24:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006e28:	9203      	str	r2, [sp, #12]
 8006e2a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006e2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e32:	6023      	str	r3, [r4, #0]
 8006e34:	6863      	ldr	r3, [r4, #4]
 8006e36:	4642      	mov	r2, r8
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	4653      	mov	r3, sl
 8006e3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e40:	f7ff fed4 	bl	8006bec <__cvt>
 8006e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e46:	4680      	mov	r8, r0
 8006e48:	2947      	cmp	r1, #71	; 0x47
 8006e4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e4c:	d108      	bne.n	8006e60 <_printf_float+0x138>
 8006e4e:	1cc8      	adds	r0, r1, #3
 8006e50:	db02      	blt.n	8006e58 <_printf_float+0x130>
 8006e52:	6863      	ldr	r3, [r4, #4]
 8006e54:	4299      	cmp	r1, r3
 8006e56:	dd40      	ble.n	8006eda <_printf_float+0x1b2>
 8006e58:	f1a9 0902 	sub.w	r9, r9, #2
 8006e5c:	fa5f f989 	uxtb.w	r9, r9
 8006e60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e64:	d81f      	bhi.n	8006ea6 <_printf_float+0x17e>
 8006e66:	464a      	mov	r2, r9
 8006e68:	3901      	subs	r1, #1
 8006e6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e6e:	910d      	str	r1, [sp, #52]	; 0x34
 8006e70:	f7ff ff1b 	bl	8006caa <__exponent>
 8006e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e76:	4682      	mov	sl, r0
 8006e78:	1813      	adds	r3, r2, r0
 8006e7a:	2a01      	cmp	r2, #1
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	dc02      	bgt.n	8006e86 <_printf_float+0x15e>
 8006e80:	6822      	ldr	r2, [r4, #0]
 8006e82:	07d2      	lsls	r2, r2, #31
 8006e84:	d501      	bpl.n	8006e8a <_printf_float+0x162>
 8006e86:	3301      	adds	r3, #1
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d09b      	beq.n	8006dca <_printf_float+0xa2>
 8006e92:	232d      	movs	r3, #45	; 0x2d
 8006e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e98:	e797      	b.n	8006dca <_printf_float+0xa2>
 8006e9a:	2947      	cmp	r1, #71	; 0x47
 8006e9c:	d1bc      	bne.n	8006e18 <_printf_float+0xf0>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1ba      	bne.n	8006e18 <_printf_float+0xf0>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e7b7      	b.n	8006e16 <_printf_float+0xee>
 8006ea6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006eaa:	d118      	bne.n	8006ede <_printf_float+0x1b6>
 8006eac:	2900      	cmp	r1, #0
 8006eae:	6863      	ldr	r3, [r4, #4]
 8006eb0:	dd0b      	ble.n	8006eca <_printf_float+0x1a2>
 8006eb2:	6121      	str	r1, [r4, #16]
 8006eb4:	b913      	cbnz	r3, 8006ebc <_printf_float+0x194>
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	07d0      	lsls	r0, r2, #31
 8006eba:	d502      	bpl.n	8006ec2 <_printf_float+0x19a>
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	440b      	add	r3, r1
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	f04f 0a00 	mov.w	sl, #0
 8006ec6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ec8:	e7df      	b.n	8006e8a <_printf_float+0x162>
 8006eca:	b913      	cbnz	r3, 8006ed2 <_printf_float+0x1aa>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	07d2      	lsls	r2, r2, #31
 8006ed0:	d501      	bpl.n	8006ed6 <_printf_float+0x1ae>
 8006ed2:	3302      	adds	r3, #2
 8006ed4:	e7f4      	b.n	8006ec0 <_printf_float+0x198>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e7f2      	b.n	8006ec0 <_printf_float+0x198>
 8006eda:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	db05      	blt.n	8006ef0 <_printf_float+0x1c8>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	6121      	str	r1, [r4, #16]
 8006ee8:	07d8      	lsls	r0, r3, #31
 8006eea:	d5ea      	bpl.n	8006ec2 <_printf_float+0x19a>
 8006eec:	1c4b      	adds	r3, r1, #1
 8006eee:	e7e7      	b.n	8006ec0 <_printf_float+0x198>
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	bfcc      	ite	gt
 8006ef4:	2201      	movgt	r2, #1
 8006ef6:	f1c1 0202 	rsble	r2, r1, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	e7e0      	b.n	8006ec0 <_printf_float+0x198>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	055a      	lsls	r2, r3, #21
 8006f02:	d407      	bmi.n	8006f14 <_printf_float+0x1ec>
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	4642      	mov	r2, r8
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d12b      	bne.n	8006f6a <_printf_float+0x242>
 8006f12:	e764      	b.n	8006dde <_printf_float+0xb6>
 8006f14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f18:	f240 80dd 	bls.w	80070d6 <_printf_float+0x3ae>
 8006f1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f20:	2200      	movs	r2, #0
 8006f22:	2300      	movs	r3, #0
 8006f24:	f7f9 fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d033      	beq.n	8006f94 <_printf_float+0x26c>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	4a35      	ldr	r2, [pc, #212]	; (8007008 <_printf_float+0x2e0>)
 8006f34:	47b8      	blx	r7
 8006f36:	3001      	adds	r0, #1
 8006f38:	f43f af51 	beq.w	8006dde <_printf_float+0xb6>
 8006f3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f40:	429a      	cmp	r2, r3
 8006f42:	db02      	blt.n	8006f4a <_printf_float+0x222>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	07d8      	lsls	r0, r3, #31
 8006f48:	d50f      	bpl.n	8006f6a <_printf_float+0x242>
 8006f4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b8      	blx	r7
 8006f54:	3001      	adds	r0, #1
 8006f56:	f43f af42 	beq.w	8006dde <_printf_float+0xb6>
 8006f5a:	f04f 0800 	mov.w	r8, #0
 8006f5e:	f104 091a 	add.w	r9, r4, #26
 8006f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f64:	3b01      	subs	r3, #1
 8006f66:	4543      	cmp	r3, r8
 8006f68:	dc09      	bgt.n	8006f7e <_printf_float+0x256>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	079b      	lsls	r3, r3, #30
 8006f6e:	f100 8102 	bmi.w	8007176 <_printf_float+0x44e>
 8006f72:	68e0      	ldr	r0, [r4, #12]
 8006f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f76:	4298      	cmp	r0, r3
 8006f78:	bfb8      	it	lt
 8006f7a:	4618      	movlt	r0, r3
 8006f7c:	e731      	b.n	8006de2 <_printf_float+0xba>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	464a      	mov	r2, r9
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f43f af28 	beq.w	8006dde <_printf_float+0xb6>
 8006f8e:	f108 0801 	add.w	r8, r8, #1
 8006f92:	e7e6      	b.n	8006f62 <_printf_float+0x23a>
 8006f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	dc38      	bgt.n	800700c <_printf_float+0x2e4>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <_printf_float+0x2e0>)
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f43f af1a 	beq.w	8006dde <_printf_float+0xb6>
 8006faa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	d102      	bne.n	8006fb8 <_printf_float+0x290>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	07d9      	lsls	r1, r3, #31
 8006fb6:	d5d8      	bpl.n	8006f6a <_printf_float+0x242>
 8006fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f43f af0b 	beq.w	8006dde <_printf_float+0xb6>
 8006fc8:	f04f 0900 	mov.w	r9, #0
 8006fcc:	f104 0a1a 	add.w	sl, r4, #26
 8006fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fd2:	425b      	negs	r3, r3
 8006fd4:	454b      	cmp	r3, r9
 8006fd6:	dc01      	bgt.n	8006fdc <_printf_float+0x2b4>
 8006fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fda:	e794      	b.n	8006f06 <_printf_float+0x1de>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4652      	mov	r2, sl
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	f43f aef9 	beq.w	8006dde <_printf_float+0xb6>
 8006fec:	f109 0901 	add.w	r9, r9, #1
 8006ff0:	e7ee      	b.n	8006fd0 <_printf_float+0x2a8>
 8006ff2:	bf00      	nop
 8006ff4:	7fefffff 	.word	0x7fefffff
 8006ff8:	0800b36c 	.word	0x0800b36c
 8006ffc:	0800b370 	.word	0x0800b370
 8007000:	0800b378 	.word	0x0800b378
 8007004:	0800b374 	.word	0x0800b374
 8007008:	0800b37c 	.word	0x0800b37c
 800700c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800700e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007010:	429a      	cmp	r2, r3
 8007012:	bfa8      	it	ge
 8007014:	461a      	movge	r2, r3
 8007016:	2a00      	cmp	r2, #0
 8007018:	4691      	mov	r9, r2
 800701a:	dc37      	bgt.n	800708c <_printf_float+0x364>
 800701c:	f04f 0b00 	mov.w	fp, #0
 8007020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007024:	f104 021a 	add.w	r2, r4, #26
 8007028:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800702c:	ebaa 0309 	sub.w	r3, sl, r9
 8007030:	455b      	cmp	r3, fp
 8007032:	dc33      	bgt.n	800709c <_printf_float+0x374>
 8007034:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007038:	429a      	cmp	r2, r3
 800703a:	db3b      	blt.n	80070b4 <_printf_float+0x38c>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	07da      	lsls	r2, r3, #31
 8007040:	d438      	bmi.n	80070b4 <_printf_float+0x38c>
 8007042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007044:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007046:	eba3 020a 	sub.w	r2, r3, sl
 800704a:	eba3 0901 	sub.w	r9, r3, r1
 800704e:	4591      	cmp	r9, r2
 8007050:	bfa8      	it	ge
 8007052:	4691      	movge	r9, r2
 8007054:	f1b9 0f00 	cmp.w	r9, #0
 8007058:	dc34      	bgt.n	80070c4 <_printf_float+0x39c>
 800705a:	f04f 0800 	mov.w	r8, #0
 800705e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007062:	f104 0a1a 	add.w	sl, r4, #26
 8007066:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	eba3 0309 	sub.w	r3, r3, r9
 8007070:	4543      	cmp	r3, r8
 8007072:	f77f af7a 	ble.w	8006f6a <_printf_float+0x242>
 8007076:	2301      	movs	r3, #1
 8007078:	4652      	mov	r2, sl
 800707a:	4631      	mov	r1, r6
 800707c:	4628      	mov	r0, r5
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	f43f aeac 	beq.w	8006dde <_printf_float+0xb6>
 8007086:	f108 0801 	add.w	r8, r8, #1
 800708a:	e7ec      	b.n	8007066 <_printf_float+0x33e>
 800708c:	4613      	mov	r3, r2
 800708e:	4631      	mov	r1, r6
 8007090:	4642      	mov	r2, r8
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	d1c0      	bne.n	800701c <_printf_float+0x2f4>
 800709a:	e6a0      	b.n	8006dde <_printf_float+0xb6>
 800709c:	2301      	movs	r3, #1
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f ae99 	beq.w	8006dde <_printf_float+0xb6>
 80070ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070ae:	f10b 0b01 	add.w	fp, fp, #1
 80070b2:	e7b9      	b.n	8007028 <_printf_float+0x300>
 80070b4:	4631      	mov	r1, r6
 80070b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	d1bf      	bne.n	8007042 <_printf_float+0x31a>
 80070c2:	e68c      	b.n	8006dde <_printf_float+0xb6>
 80070c4:	464b      	mov	r3, r9
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	eb08 020a 	add.w	r2, r8, sl
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	d1c2      	bne.n	800705a <_printf_float+0x332>
 80070d4:	e683      	b.n	8006dde <_printf_float+0xb6>
 80070d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070d8:	2a01      	cmp	r2, #1
 80070da:	dc01      	bgt.n	80070e0 <_printf_float+0x3b8>
 80070dc:	07db      	lsls	r3, r3, #31
 80070de:	d537      	bpl.n	8007150 <_printf_float+0x428>
 80070e0:	2301      	movs	r3, #1
 80070e2:	4642      	mov	r2, r8
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	f43f ae77 	beq.w	8006dde <_printf_float+0xb6>
 80070f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	f43f ae6f 	beq.w	8006dde <_printf_float+0xb6>
 8007100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	f7f9 fc4e 	bl	80009a8 <__aeabi_dcmpeq>
 800710c:	b9d8      	cbnz	r0, 8007146 <_printf_float+0x41e>
 800710e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007110:	f108 0201 	add.w	r2, r8, #1
 8007114:	3b01      	subs	r3, #1
 8007116:	4631      	mov	r1, r6
 8007118:	4628      	mov	r0, r5
 800711a:	47b8      	blx	r7
 800711c:	3001      	adds	r0, #1
 800711e:	d10e      	bne.n	800713e <_printf_float+0x416>
 8007120:	e65d      	b.n	8006dde <_printf_float+0xb6>
 8007122:	2301      	movs	r3, #1
 8007124:	464a      	mov	r2, r9
 8007126:	4631      	mov	r1, r6
 8007128:	4628      	mov	r0, r5
 800712a:	47b8      	blx	r7
 800712c:	3001      	adds	r0, #1
 800712e:	f43f ae56 	beq.w	8006dde <_printf_float+0xb6>
 8007132:	f108 0801 	add.w	r8, r8, #1
 8007136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007138:	3b01      	subs	r3, #1
 800713a:	4543      	cmp	r3, r8
 800713c:	dcf1      	bgt.n	8007122 <_printf_float+0x3fa>
 800713e:	4653      	mov	r3, sl
 8007140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007144:	e6e0      	b.n	8006f08 <_printf_float+0x1e0>
 8007146:	f04f 0800 	mov.w	r8, #0
 800714a:	f104 091a 	add.w	r9, r4, #26
 800714e:	e7f2      	b.n	8007136 <_printf_float+0x40e>
 8007150:	2301      	movs	r3, #1
 8007152:	4642      	mov	r2, r8
 8007154:	e7df      	b.n	8007116 <_printf_float+0x3ee>
 8007156:	2301      	movs	r3, #1
 8007158:	464a      	mov	r2, r9
 800715a:	4631      	mov	r1, r6
 800715c:	4628      	mov	r0, r5
 800715e:	47b8      	blx	r7
 8007160:	3001      	adds	r0, #1
 8007162:	f43f ae3c 	beq.w	8006dde <_printf_float+0xb6>
 8007166:	f108 0801 	add.w	r8, r8, #1
 800716a:	68e3      	ldr	r3, [r4, #12]
 800716c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800716e:	1a5b      	subs	r3, r3, r1
 8007170:	4543      	cmp	r3, r8
 8007172:	dcf0      	bgt.n	8007156 <_printf_float+0x42e>
 8007174:	e6fd      	b.n	8006f72 <_printf_float+0x24a>
 8007176:	f04f 0800 	mov.w	r8, #0
 800717a:	f104 0919 	add.w	r9, r4, #25
 800717e:	e7f4      	b.n	800716a <_printf_float+0x442>

08007180 <_printf_common>:
 8007180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007184:	4616      	mov	r6, r2
 8007186:	4699      	mov	r9, r3
 8007188:	688a      	ldr	r2, [r1, #8]
 800718a:	690b      	ldr	r3, [r1, #16]
 800718c:	4607      	mov	r7, r0
 800718e:	4293      	cmp	r3, r2
 8007190:	bfb8      	it	lt
 8007192:	4613      	movlt	r3, r2
 8007194:	6033      	str	r3, [r6, #0]
 8007196:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800719a:	460c      	mov	r4, r1
 800719c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a0:	b10a      	cbz	r2, 80071a6 <_printf_common+0x26>
 80071a2:	3301      	adds	r3, #1
 80071a4:	6033      	str	r3, [r6, #0]
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	0699      	lsls	r1, r3, #26
 80071aa:	bf42      	ittt	mi
 80071ac:	6833      	ldrmi	r3, [r6, #0]
 80071ae:	3302      	addmi	r3, #2
 80071b0:	6033      	strmi	r3, [r6, #0]
 80071b2:	6825      	ldr	r5, [r4, #0]
 80071b4:	f015 0506 	ands.w	r5, r5, #6
 80071b8:	d106      	bne.n	80071c8 <_printf_common+0x48>
 80071ba:	f104 0a19 	add.w	sl, r4, #25
 80071be:	68e3      	ldr	r3, [r4, #12]
 80071c0:	6832      	ldr	r2, [r6, #0]
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	42ab      	cmp	r3, r5
 80071c6:	dc28      	bgt.n	800721a <_printf_common+0x9a>
 80071c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071cc:	1e13      	subs	r3, r2, #0
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	bf18      	it	ne
 80071d2:	2301      	movne	r3, #1
 80071d4:	0692      	lsls	r2, r2, #26
 80071d6:	d42d      	bmi.n	8007234 <_printf_common+0xb4>
 80071d8:	4649      	mov	r1, r9
 80071da:	4638      	mov	r0, r7
 80071dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071e0:	47c0      	blx	r8
 80071e2:	3001      	adds	r0, #1
 80071e4:	d020      	beq.n	8007228 <_printf_common+0xa8>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	68e5      	ldr	r5, [r4, #12]
 80071ea:	f003 0306 	and.w	r3, r3, #6
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	bf18      	it	ne
 80071f2:	2500      	movne	r5, #0
 80071f4:	6832      	ldr	r2, [r6, #0]
 80071f6:	f04f 0600 	mov.w	r6, #0
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	bf08      	it	eq
 80071fe:	1aad      	subeq	r5, r5, r2
 8007200:	6922      	ldr	r2, [r4, #16]
 8007202:	bf08      	it	eq
 8007204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007208:	4293      	cmp	r3, r2
 800720a:	bfc4      	itt	gt
 800720c:	1a9b      	subgt	r3, r3, r2
 800720e:	18ed      	addgt	r5, r5, r3
 8007210:	341a      	adds	r4, #26
 8007212:	42b5      	cmp	r5, r6
 8007214:	d11a      	bne.n	800724c <_printf_common+0xcc>
 8007216:	2000      	movs	r0, #0
 8007218:	e008      	b.n	800722c <_printf_common+0xac>
 800721a:	2301      	movs	r3, #1
 800721c:	4652      	mov	r2, sl
 800721e:	4649      	mov	r1, r9
 8007220:	4638      	mov	r0, r7
 8007222:	47c0      	blx	r8
 8007224:	3001      	adds	r0, #1
 8007226:	d103      	bne.n	8007230 <_printf_common+0xb0>
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007230:	3501      	adds	r5, #1
 8007232:	e7c4      	b.n	80071be <_printf_common+0x3e>
 8007234:	2030      	movs	r0, #48	; 0x30
 8007236:	18e1      	adds	r1, r4, r3
 8007238:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007242:	4422      	add	r2, r4
 8007244:	3302      	adds	r3, #2
 8007246:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800724a:	e7c5      	b.n	80071d8 <_printf_common+0x58>
 800724c:	2301      	movs	r3, #1
 800724e:	4622      	mov	r2, r4
 8007250:	4649      	mov	r1, r9
 8007252:	4638      	mov	r0, r7
 8007254:	47c0      	blx	r8
 8007256:	3001      	adds	r0, #1
 8007258:	d0e6      	beq.n	8007228 <_printf_common+0xa8>
 800725a:	3601      	adds	r6, #1
 800725c:	e7d9      	b.n	8007212 <_printf_common+0x92>
	...

08007260 <_printf_i>:
 8007260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	7e0f      	ldrb	r7, [r1, #24]
 8007266:	4691      	mov	r9, r2
 8007268:	2f78      	cmp	r7, #120	; 0x78
 800726a:	4680      	mov	r8, r0
 800726c:	460c      	mov	r4, r1
 800726e:	469a      	mov	sl, r3
 8007270:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007276:	d807      	bhi.n	8007288 <_printf_i+0x28>
 8007278:	2f62      	cmp	r7, #98	; 0x62
 800727a:	d80a      	bhi.n	8007292 <_printf_i+0x32>
 800727c:	2f00      	cmp	r7, #0
 800727e:	f000 80d9 	beq.w	8007434 <_printf_i+0x1d4>
 8007282:	2f58      	cmp	r7, #88	; 0x58
 8007284:	f000 80a4 	beq.w	80073d0 <_printf_i+0x170>
 8007288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800728c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007290:	e03a      	b.n	8007308 <_printf_i+0xa8>
 8007292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007296:	2b15      	cmp	r3, #21
 8007298:	d8f6      	bhi.n	8007288 <_printf_i+0x28>
 800729a:	a101      	add	r1, pc, #4	; (adr r1, 80072a0 <_printf_i+0x40>)
 800729c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072a0:	080072f9 	.word	0x080072f9
 80072a4:	0800730d 	.word	0x0800730d
 80072a8:	08007289 	.word	0x08007289
 80072ac:	08007289 	.word	0x08007289
 80072b0:	08007289 	.word	0x08007289
 80072b4:	08007289 	.word	0x08007289
 80072b8:	0800730d 	.word	0x0800730d
 80072bc:	08007289 	.word	0x08007289
 80072c0:	08007289 	.word	0x08007289
 80072c4:	08007289 	.word	0x08007289
 80072c8:	08007289 	.word	0x08007289
 80072cc:	0800741b 	.word	0x0800741b
 80072d0:	0800733d 	.word	0x0800733d
 80072d4:	080073fd 	.word	0x080073fd
 80072d8:	08007289 	.word	0x08007289
 80072dc:	08007289 	.word	0x08007289
 80072e0:	0800743d 	.word	0x0800743d
 80072e4:	08007289 	.word	0x08007289
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	08007289 	.word	0x08007289
 80072f0:	08007289 	.word	0x08007289
 80072f4:	08007405 	.word	0x08007405
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	1d1a      	adds	r2, r3, #4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	602a      	str	r2, [r5, #0]
 8007300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007308:	2301      	movs	r3, #1
 800730a:	e0a4      	b.n	8007456 <_printf_i+0x1f6>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	6829      	ldr	r1, [r5, #0]
 8007310:	0606      	lsls	r6, r0, #24
 8007312:	f101 0304 	add.w	r3, r1, #4
 8007316:	d50a      	bpl.n	800732e <_printf_i+0xce>
 8007318:	680e      	ldr	r6, [r1, #0]
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	2e00      	cmp	r6, #0
 800731e:	da03      	bge.n	8007328 <_printf_i+0xc8>
 8007320:	232d      	movs	r3, #45	; 0x2d
 8007322:	4276      	negs	r6, r6
 8007324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007328:	230a      	movs	r3, #10
 800732a:	485e      	ldr	r0, [pc, #376]	; (80074a4 <_printf_i+0x244>)
 800732c:	e019      	b.n	8007362 <_printf_i+0x102>
 800732e:	680e      	ldr	r6, [r1, #0]
 8007330:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007334:	602b      	str	r3, [r5, #0]
 8007336:	bf18      	it	ne
 8007338:	b236      	sxthne	r6, r6
 800733a:	e7ef      	b.n	800731c <_printf_i+0xbc>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	6820      	ldr	r0, [r4, #0]
 8007340:	1d19      	adds	r1, r3, #4
 8007342:	6029      	str	r1, [r5, #0]
 8007344:	0601      	lsls	r1, r0, #24
 8007346:	d501      	bpl.n	800734c <_printf_i+0xec>
 8007348:	681e      	ldr	r6, [r3, #0]
 800734a:	e002      	b.n	8007352 <_printf_i+0xf2>
 800734c:	0646      	lsls	r6, r0, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0xe8>
 8007350:	881e      	ldrh	r6, [r3, #0]
 8007352:	2f6f      	cmp	r7, #111	; 0x6f
 8007354:	bf0c      	ite	eq
 8007356:	2308      	moveq	r3, #8
 8007358:	230a      	movne	r3, #10
 800735a:	4852      	ldr	r0, [pc, #328]	; (80074a4 <_printf_i+0x244>)
 800735c:	2100      	movs	r1, #0
 800735e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007362:	6865      	ldr	r5, [r4, #4]
 8007364:	2d00      	cmp	r5, #0
 8007366:	bfa8      	it	ge
 8007368:	6821      	ldrge	r1, [r4, #0]
 800736a:	60a5      	str	r5, [r4, #8]
 800736c:	bfa4      	itt	ge
 800736e:	f021 0104 	bicge.w	r1, r1, #4
 8007372:	6021      	strge	r1, [r4, #0]
 8007374:	b90e      	cbnz	r6, 800737a <_printf_i+0x11a>
 8007376:	2d00      	cmp	r5, #0
 8007378:	d04d      	beq.n	8007416 <_printf_i+0x1b6>
 800737a:	4615      	mov	r5, r2
 800737c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007380:	fb03 6711 	mls	r7, r3, r1, r6
 8007384:	5dc7      	ldrb	r7, [r0, r7]
 8007386:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800738a:	4637      	mov	r7, r6
 800738c:	42bb      	cmp	r3, r7
 800738e:	460e      	mov	r6, r1
 8007390:	d9f4      	bls.n	800737c <_printf_i+0x11c>
 8007392:	2b08      	cmp	r3, #8
 8007394:	d10b      	bne.n	80073ae <_printf_i+0x14e>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	07de      	lsls	r6, r3, #31
 800739a:	d508      	bpl.n	80073ae <_printf_i+0x14e>
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	6861      	ldr	r1, [r4, #4]
 80073a0:	4299      	cmp	r1, r3
 80073a2:	bfde      	ittt	le
 80073a4:	2330      	movle	r3, #48	; 0x30
 80073a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073ae:	1b52      	subs	r2, r2, r5
 80073b0:	6122      	str	r2, [r4, #16]
 80073b2:	464b      	mov	r3, r9
 80073b4:	4621      	mov	r1, r4
 80073b6:	4640      	mov	r0, r8
 80073b8:	f8cd a000 	str.w	sl, [sp]
 80073bc:	aa03      	add	r2, sp, #12
 80073be:	f7ff fedf 	bl	8007180 <_printf_common>
 80073c2:	3001      	adds	r0, #1
 80073c4:	d14c      	bne.n	8007460 <_printf_i+0x200>
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ca:	b004      	add	sp, #16
 80073cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d0:	4834      	ldr	r0, [pc, #208]	; (80074a4 <_printf_i+0x244>)
 80073d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073d6:	6829      	ldr	r1, [r5, #0]
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	f851 6b04 	ldr.w	r6, [r1], #4
 80073de:	6029      	str	r1, [r5, #0]
 80073e0:	061d      	lsls	r5, r3, #24
 80073e2:	d514      	bpl.n	800740e <_printf_i+0x1ae>
 80073e4:	07df      	lsls	r7, r3, #31
 80073e6:	bf44      	itt	mi
 80073e8:	f043 0320 	orrmi.w	r3, r3, #32
 80073ec:	6023      	strmi	r3, [r4, #0]
 80073ee:	b91e      	cbnz	r6, 80073f8 <_printf_i+0x198>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	f023 0320 	bic.w	r3, r3, #32
 80073f6:	6023      	str	r3, [r4, #0]
 80073f8:	2310      	movs	r3, #16
 80073fa:	e7af      	b.n	800735c <_printf_i+0xfc>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	f043 0320 	orr.w	r3, r3, #32
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	2378      	movs	r3, #120	; 0x78
 8007406:	4828      	ldr	r0, [pc, #160]	; (80074a8 <_printf_i+0x248>)
 8007408:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800740c:	e7e3      	b.n	80073d6 <_printf_i+0x176>
 800740e:	0659      	lsls	r1, r3, #25
 8007410:	bf48      	it	mi
 8007412:	b2b6      	uxthmi	r6, r6
 8007414:	e7e6      	b.n	80073e4 <_printf_i+0x184>
 8007416:	4615      	mov	r5, r2
 8007418:	e7bb      	b.n	8007392 <_printf_i+0x132>
 800741a:	682b      	ldr	r3, [r5, #0]
 800741c:	6826      	ldr	r6, [r4, #0]
 800741e:	1d18      	adds	r0, r3, #4
 8007420:	6961      	ldr	r1, [r4, #20]
 8007422:	6028      	str	r0, [r5, #0]
 8007424:	0635      	lsls	r5, r6, #24
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	d501      	bpl.n	800742e <_printf_i+0x1ce>
 800742a:	6019      	str	r1, [r3, #0]
 800742c:	e002      	b.n	8007434 <_printf_i+0x1d4>
 800742e:	0670      	lsls	r0, r6, #25
 8007430:	d5fb      	bpl.n	800742a <_printf_i+0x1ca>
 8007432:	8019      	strh	r1, [r3, #0]
 8007434:	2300      	movs	r3, #0
 8007436:	4615      	mov	r5, r2
 8007438:	6123      	str	r3, [r4, #16]
 800743a:	e7ba      	b.n	80073b2 <_printf_i+0x152>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	2100      	movs	r1, #0
 8007440:	1d1a      	adds	r2, r3, #4
 8007442:	602a      	str	r2, [r5, #0]
 8007444:	681d      	ldr	r5, [r3, #0]
 8007446:	6862      	ldr	r2, [r4, #4]
 8007448:	4628      	mov	r0, r5
 800744a:	f002 fcd3 	bl	8009df4 <memchr>
 800744e:	b108      	cbz	r0, 8007454 <_printf_i+0x1f4>
 8007450:	1b40      	subs	r0, r0, r5
 8007452:	6060      	str	r0, [r4, #4]
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	2300      	movs	r3, #0
 800745a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800745e:	e7a8      	b.n	80073b2 <_printf_i+0x152>
 8007460:	462a      	mov	r2, r5
 8007462:	4649      	mov	r1, r9
 8007464:	4640      	mov	r0, r8
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	47d0      	blx	sl
 800746a:	3001      	adds	r0, #1
 800746c:	d0ab      	beq.n	80073c6 <_printf_i+0x166>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	079b      	lsls	r3, r3, #30
 8007472:	d413      	bmi.n	800749c <_printf_i+0x23c>
 8007474:	68e0      	ldr	r0, [r4, #12]
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	4298      	cmp	r0, r3
 800747a:	bfb8      	it	lt
 800747c:	4618      	movlt	r0, r3
 800747e:	e7a4      	b.n	80073ca <_printf_i+0x16a>
 8007480:	2301      	movs	r3, #1
 8007482:	4632      	mov	r2, r6
 8007484:	4649      	mov	r1, r9
 8007486:	4640      	mov	r0, r8
 8007488:	47d0      	blx	sl
 800748a:	3001      	adds	r0, #1
 800748c:	d09b      	beq.n	80073c6 <_printf_i+0x166>
 800748e:	3501      	adds	r5, #1
 8007490:	68e3      	ldr	r3, [r4, #12]
 8007492:	9903      	ldr	r1, [sp, #12]
 8007494:	1a5b      	subs	r3, r3, r1
 8007496:	42ab      	cmp	r3, r5
 8007498:	dcf2      	bgt.n	8007480 <_printf_i+0x220>
 800749a:	e7eb      	b.n	8007474 <_printf_i+0x214>
 800749c:	2500      	movs	r5, #0
 800749e:	f104 0619 	add.w	r6, r4, #25
 80074a2:	e7f5      	b.n	8007490 <_printf_i+0x230>
 80074a4:	0800b37e 	.word	0x0800b37e
 80074a8:	0800b38f 	.word	0x0800b38f

080074ac <_scanf_float>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	b087      	sub	sp, #28
 80074b2:	9303      	str	r3, [sp, #12]
 80074b4:	688b      	ldr	r3, [r1, #8]
 80074b6:	4617      	mov	r7, r2
 80074b8:	1e5a      	subs	r2, r3, #1
 80074ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80074be:	bf85      	ittet	hi
 80074c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80074c4:	195b      	addhi	r3, r3, r5
 80074c6:	2300      	movls	r3, #0
 80074c8:	9302      	strhi	r3, [sp, #8]
 80074ca:	bf88      	it	hi
 80074cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80074d0:	468b      	mov	fp, r1
 80074d2:	f04f 0500 	mov.w	r5, #0
 80074d6:	bf8c      	ite	hi
 80074d8:	608b      	strhi	r3, [r1, #8]
 80074da:	9302      	strls	r3, [sp, #8]
 80074dc:	680b      	ldr	r3, [r1, #0]
 80074de:	4680      	mov	r8, r0
 80074e0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80074e4:	f84b 3b1c 	str.w	r3, [fp], #28
 80074e8:	460c      	mov	r4, r1
 80074ea:	465e      	mov	r6, fp
 80074ec:	46aa      	mov	sl, r5
 80074ee:	46a9      	mov	r9, r5
 80074f0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80074f4:	9501      	str	r5, [sp, #4]
 80074f6:	68a2      	ldr	r2, [r4, #8]
 80074f8:	b152      	cbz	r2, 8007510 <_scanf_float+0x64>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b4e      	cmp	r3, #78	; 0x4e
 8007500:	d864      	bhi.n	80075cc <_scanf_float+0x120>
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d83c      	bhi.n	8007580 <_scanf_float+0xd4>
 8007506:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800750a:	b2c8      	uxtb	r0, r1
 800750c:	280e      	cmp	r0, #14
 800750e:	d93a      	bls.n	8007586 <_scanf_float+0xda>
 8007510:	f1b9 0f00 	cmp.w	r9, #0
 8007514:	d003      	beq.n	800751e <_scanf_float+0x72>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007522:	f1ba 0f01 	cmp.w	sl, #1
 8007526:	f200 8113 	bhi.w	8007750 <_scanf_float+0x2a4>
 800752a:	455e      	cmp	r6, fp
 800752c:	f200 8105 	bhi.w	800773a <_scanf_float+0x28e>
 8007530:	2501      	movs	r5, #1
 8007532:	4628      	mov	r0, r5
 8007534:	b007      	add	sp, #28
 8007536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800753e:	2a0d      	cmp	r2, #13
 8007540:	d8e6      	bhi.n	8007510 <_scanf_float+0x64>
 8007542:	a101      	add	r1, pc, #4	; (adr r1, 8007548 <_scanf_float+0x9c>)
 8007544:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007548:	08007687 	.word	0x08007687
 800754c:	08007511 	.word	0x08007511
 8007550:	08007511 	.word	0x08007511
 8007554:	08007511 	.word	0x08007511
 8007558:	080076e7 	.word	0x080076e7
 800755c:	080076bf 	.word	0x080076bf
 8007560:	08007511 	.word	0x08007511
 8007564:	08007511 	.word	0x08007511
 8007568:	08007695 	.word	0x08007695
 800756c:	08007511 	.word	0x08007511
 8007570:	08007511 	.word	0x08007511
 8007574:	08007511 	.word	0x08007511
 8007578:	08007511 	.word	0x08007511
 800757c:	0800764d 	.word	0x0800764d
 8007580:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007584:	e7db      	b.n	800753e <_scanf_float+0x92>
 8007586:	290e      	cmp	r1, #14
 8007588:	d8c2      	bhi.n	8007510 <_scanf_float+0x64>
 800758a:	a001      	add	r0, pc, #4	; (adr r0, 8007590 <_scanf_float+0xe4>)
 800758c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007590:	0800763f 	.word	0x0800763f
 8007594:	08007511 	.word	0x08007511
 8007598:	0800763f 	.word	0x0800763f
 800759c:	080076d3 	.word	0x080076d3
 80075a0:	08007511 	.word	0x08007511
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	08007629 	.word	0x08007629
 80075ac:	08007629 	.word	0x08007629
 80075b0:	08007629 	.word	0x08007629
 80075b4:	08007629 	.word	0x08007629
 80075b8:	08007629 	.word	0x08007629
 80075bc:	08007629 	.word	0x08007629
 80075c0:	08007629 	.word	0x08007629
 80075c4:	08007629 	.word	0x08007629
 80075c8:	08007629 	.word	0x08007629
 80075cc:	2b6e      	cmp	r3, #110	; 0x6e
 80075ce:	d809      	bhi.n	80075e4 <_scanf_float+0x138>
 80075d0:	2b60      	cmp	r3, #96	; 0x60
 80075d2:	d8b2      	bhi.n	800753a <_scanf_float+0x8e>
 80075d4:	2b54      	cmp	r3, #84	; 0x54
 80075d6:	d077      	beq.n	80076c8 <_scanf_float+0x21c>
 80075d8:	2b59      	cmp	r3, #89	; 0x59
 80075da:	d199      	bne.n	8007510 <_scanf_float+0x64>
 80075dc:	2d07      	cmp	r5, #7
 80075de:	d197      	bne.n	8007510 <_scanf_float+0x64>
 80075e0:	2508      	movs	r5, #8
 80075e2:	e029      	b.n	8007638 <_scanf_float+0x18c>
 80075e4:	2b74      	cmp	r3, #116	; 0x74
 80075e6:	d06f      	beq.n	80076c8 <_scanf_float+0x21c>
 80075e8:	2b79      	cmp	r3, #121	; 0x79
 80075ea:	e7f6      	b.n	80075da <_scanf_float+0x12e>
 80075ec:	6821      	ldr	r1, [r4, #0]
 80075ee:	05c8      	lsls	r0, r1, #23
 80075f0:	d51a      	bpl.n	8007628 <_scanf_float+0x17c>
 80075f2:	9b02      	ldr	r3, [sp, #8]
 80075f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80075f8:	6021      	str	r1, [r4, #0]
 80075fa:	f109 0901 	add.w	r9, r9, #1
 80075fe:	b11b      	cbz	r3, 8007608 <_scanf_float+0x15c>
 8007600:	3b01      	subs	r3, #1
 8007602:	3201      	adds	r2, #1
 8007604:	9302      	str	r3, [sp, #8]
 8007606:	60a2      	str	r2, [r4, #8]
 8007608:	68a3      	ldr	r3, [r4, #8]
 800760a:	3b01      	subs	r3, #1
 800760c:	60a3      	str	r3, [r4, #8]
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	3301      	adds	r3, #1
 8007612:	6123      	str	r3, [r4, #16]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3b01      	subs	r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	607b      	str	r3, [r7, #4]
 800761c:	f340 8084 	ble.w	8007728 <_scanf_float+0x27c>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	e766      	b.n	80074f6 <_scanf_float+0x4a>
 8007628:	eb1a 0f05 	cmn.w	sl, r5
 800762c:	f47f af70 	bne.w	8007510 <_scanf_float+0x64>
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007636:	6022      	str	r2, [r4, #0]
 8007638:	f806 3b01 	strb.w	r3, [r6], #1
 800763c:	e7e4      	b.n	8007608 <_scanf_float+0x15c>
 800763e:	6822      	ldr	r2, [r4, #0]
 8007640:	0610      	lsls	r0, r2, #24
 8007642:	f57f af65 	bpl.w	8007510 <_scanf_float+0x64>
 8007646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800764a:	e7f4      	b.n	8007636 <_scanf_float+0x18a>
 800764c:	f1ba 0f00 	cmp.w	sl, #0
 8007650:	d10e      	bne.n	8007670 <_scanf_float+0x1c4>
 8007652:	f1b9 0f00 	cmp.w	r9, #0
 8007656:	d10e      	bne.n	8007676 <_scanf_float+0x1ca>
 8007658:	6822      	ldr	r2, [r4, #0]
 800765a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800765e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007662:	d108      	bne.n	8007676 <_scanf_float+0x1ca>
 8007664:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007668:	f04f 0a01 	mov.w	sl, #1
 800766c:	6022      	str	r2, [r4, #0]
 800766e:	e7e3      	b.n	8007638 <_scanf_float+0x18c>
 8007670:	f1ba 0f02 	cmp.w	sl, #2
 8007674:	d055      	beq.n	8007722 <_scanf_float+0x276>
 8007676:	2d01      	cmp	r5, #1
 8007678:	d002      	beq.n	8007680 <_scanf_float+0x1d4>
 800767a:	2d04      	cmp	r5, #4
 800767c:	f47f af48 	bne.w	8007510 <_scanf_float+0x64>
 8007680:	3501      	adds	r5, #1
 8007682:	b2ed      	uxtb	r5, r5
 8007684:	e7d8      	b.n	8007638 <_scanf_float+0x18c>
 8007686:	f1ba 0f01 	cmp.w	sl, #1
 800768a:	f47f af41 	bne.w	8007510 <_scanf_float+0x64>
 800768e:	f04f 0a02 	mov.w	sl, #2
 8007692:	e7d1      	b.n	8007638 <_scanf_float+0x18c>
 8007694:	b97d      	cbnz	r5, 80076b6 <_scanf_float+0x20a>
 8007696:	f1b9 0f00 	cmp.w	r9, #0
 800769a:	f47f af3c 	bne.w	8007516 <_scanf_float+0x6a>
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80076a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80076a8:	f47f af39 	bne.w	800751e <_scanf_float+0x72>
 80076ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076b0:	2501      	movs	r5, #1
 80076b2:	6022      	str	r2, [r4, #0]
 80076b4:	e7c0      	b.n	8007638 <_scanf_float+0x18c>
 80076b6:	2d03      	cmp	r5, #3
 80076b8:	d0e2      	beq.n	8007680 <_scanf_float+0x1d4>
 80076ba:	2d05      	cmp	r5, #5
 80076bc:	e7de      	b.n	800767c <_scanf_float+0x1d0>
 80076be:	2d02      	cmp	r5, #2
 80076c0:	f47f af26 	bne.w	8007510 <_scanf_float+0x64>
 80076c4:	2503      	movs	r5, #3
 80076c6:	e7b7      	b.n	8007638 <_scanf_float+0x18c>
 80076c8:	2d06      	cmp	r5, #6
 80076ca:	f47f af21 	bne.w	8007510 <_scanf_float+0x64>
 80076ce:	2507      	movs	r5, #7
 80076d0:	e7b2      	b.n	8007638 <_scanf_float+0x18c>
 80076d2:	6822      	ldr	r2, [r4, #0]
 80076d4:	0591      	lsls	r1, r2, #22
 80076d6:	f57f af1b 	bpl.w	8007510 <_scanf_float+0x64>
 80076da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80076e4:	e7a8      	b.n	8007638 <_scanf_float+0x18c>
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80076ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80076f0:	d006      	beq.n	8007700 <_scanf_float+0x254>
 80076f2:	0550      	lsls	r0, r2, #21
 80076f4:	f57f af0c 	bpl.w	8007510 <_scanf_float+0x64>
 80076f8:	f1b9 0f00 	cmp.w	r9, #0
 80076fc:	f43f af0f 	beq.w	800751e <_scanf_float+0x72>
 8007700:	0591      	lsls	r1, r2, #22
 8007702:	bf58      	it	pl
 8007704:	9901      	ldrpl	r1, [sp, #4]
 8007706:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800770a:	bf58      	it	pl
 800770c:	eba9 0101 	subpl.w	r1, r9, r1
 8007710:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007714:	f04f 0900 	mov.w	r9, #0
 8007718:	bf58      	it	pl
 800771a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800771e:	6022      	str	r2, [r4, #0]
 8007720:	e78a      	b.n	8007638 <_scanf_float+0x18c>
 8007722:	f04f 0a03 	mov.w	sl, #3
 8007726:	e787      	b.n	8007638 <_scanf_float+0x18c>
 8007728:	4639      	mov	r1, r7
 800772a:	4640      	mov	r0, r8
 800772c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007730:	4798      	blx	r3
 8007732:	2800      	cmp	r0, #0
 8007734:	f43f aedf 	beq.w	80074f6 <_scanf_float+0x4a>
 8007738:	e6ea      	b.n	8007510 <_scanf_float+0x64>
 800773a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800773e:	463a      	mov	r2, r7
 8007740:	4640      	mov	r0, r8
 8007742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007746:	4798      	blx	r3
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	3b01      	subs	r3, #1
 800774c:	6123      	str	r3, [r4, #16]
 800774e:	e6ec      	b.n	800752a <_scanf_float+0x7e>
 8007750:	1e6b      	subs	r3, r5, #1
 8007752:	2b06      	cmp	r3, #6
 8007754:	d825      	bhi.n	80077a2 <_scanf_float+0x2f6>
 8007756:	2d02      	cmp	r5, #2
 8007758:	d836      	bhi.n	80077c8 <_scanf_float+0x31c>
 800775a:	455e      	cmp	r6, fp
 800775c:	f67f aee8 	bls.w	8007530 <_scanf_float+0x84>
 8007760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007764:	463a      	mov	r2, r7
 8007766:	4640      	mov	r0, r8
 8007768:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800776c:	4798      	blx	r3
 800776e:	6923      	ldr	r3, [r4, #16]
 8007770:	3b01      	subs	r3, #1
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	e7f1      	b.n	800775a <_scanf_float+0x2ae>
 8007776:	9802      	ldr	r0, [sp, #8]
 8007778:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800777c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007780:	463a      	mov	r2, r7
 8007782:	9002      	str	r0, [sp, #8]
 8007784:	4640      	mov	r0, r8
 8007786:	4798      	blx	r3
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	3b01      	subs	r3, #1
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007792:	fa5f fa8a 	uxtb.w	sl, sl
 8007796:	f1ba 0f02 	cmp.w	sl, #2
 800779a:	d1ec      	bne.n	8007776 <_scanf_float+0x2ca>
 800779c:	3d03      	subs	r5, #3
 800779e:	b2ed      	uxtb	r5, r5
 80077a0:	1b76      	subs	r6, r6, r5
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	05da      	lsls	r2, r3, #23
 80077a6:	d52f      	bpl.n	8007808 <_scanf_float+0x35c>
 80077a8:	055b      	lsls	r3, r3, #21
 80077aa:	d510      	bpl.n	80077ce <_scanf_float+0x322>
 80077ac:	455e      	cmp	r6, fp
 80077ae:	f67f aebf 	bls.w	8007530 <_scanf_float+0x84>
 80077b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077b6:	463a      	mov	r2, r7
 80077b8:	4640      	mov	r0, r8
 80077ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077be:	4798      	blx	r3
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	e7f1      	b.n	80077ac <_scanf_float+0x300>
 80077c8:	46aa      	mov	sl, r5
 80077ca:	9602      	str	r6, [sp, #8]
 80077cc:	e7df      	b.n	800778e <_scanf_float+0x2e2>
 80077ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	2965      	cmp	r1, #101	; 0x65
 80077d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80077da:	f106 35ff 	add.w	r5, r6, #4294967295
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	d00c      	beq.n	80077fc <_scanf_float+0x350>
 80077e2:	2945      	cmp	r1, #69	; 0x45
 80077e4:	d00a      	beq.n	80077fc <_scanf_float+0x350>
 80077e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077ea:	463a      	mov	r2, r7
 80077ec:	4640      	mov	r0, r8
 80077ee:	4798      	blx	r3
 80077f0:	6923      	ldr	r3, [r4, #16]
 80077f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	1eb5      	subs	r5, r6, #2
 80077fa:	6123      	str	r3, [r4, #16]
 80077fc:	463a      	mov	r2, r7
 80077fe:	4640      	mov	r0, r8
 8007800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007804:	4798      	blx	r3
 8007806:	462e      	mov	r6, r5
 8007808:	6825      	ldr	r5, [r4, #0]
 800780a:	f015 0510 	ands.w	r5, r5, #16
 800780e:	d155      	bne.n	80078bc <_scanf_float+0x410>
 8007810:	7035      	strb	r5, [r6, #0]
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800781c:	d11b      	bne.n	8007856 <_scanf_float+0x3aa>
 800781e:	9b01      	ldr	r3, [sp, #4]
 8007820:	454b      	cmp	r3, r9
 8007822:	eba3 0209 	sub.w	r2, r3, r9
 8007826:	d123      	bne.n	8007870 <_scanf_float+0x3c4>
 8007828:	2200      	movs	r2, #0
 800782a:	4659      	mov	r1, fp
 800782c:	4640      	mov	r0, r8
 800782e:	f000 ff6b 	bl	8008708 <_strtod_r>
 8007832:	6822      	ldr	r2, [r4, #0]
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	f012 0f02 	tst.w	r2, #2
 800783a:	4606      	mov	r6, r0
 800783c:	460f      	mov	r7, r1
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	d021      	beq.n	8007886 <_scanf_float+0x3da>
 8007842:	1d1a      	adds	r2, r3, #4
 8007844:	9903      	ldr	r1, [sp, #12]
 8007846:	600a      	str	r2, [r1, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	e9c3 6700 	strd	r6, r7, [r3]
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	3301      	adds	r3, #1
 8007852:	60e3      	str	r3, [r4, #12]
 8007854:	e66d      	b.n	8007532 <_scanf_float+0x86>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0e5      	beq.n	8007828 <_scanf_float+0x37c>
 800785c:	9905      	ldr	r1, [sp, #20]
 800785e:	230a      	movs	r3, #10
 8007860:	462a      	mov	r2, r5
 8007862:	4640      	mov	r0, r8
 8007864:	3101      	adds	r1, #1
 8007866:	f000 ffd1 	bl	800880c <_strtol_r>
 800786a:	9b04      	ldr	r3, [sp, #16]
 800786c:	9e05      	ldr	r6, [sp, #20]
 800786e:	1ac2      	subs	r2, r0, r3
 8007870:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007874:	429e      	cmp	r6, r3
 8007876:	bf28      	it	cs
 8007878:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800787c:	4630      	mov	r0, r6
 800787e:	4910      	ldr	r1, [pc, #64]	; (80078c0 <_scanf_float+0x414>)
 8007880:	f000 f8d4 	bl	8007a2c <siprintf>
 8007884:	e7d0      	b.n	8007828 <_scanf_float+0x37c>
 8007886:	f012 0f04 	tst.w	r2, #4
 800788a:	f103 0204 	add.w	r2, r3, #4
 800788e:	d1d9      	bne.n	8007844 <_scanf_float+0x398>
 8007890:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007894:	f8cc 2000 	str.w	r2, [ip]
 8007898:	f8d3 8000 	ldr.w	r8, [r3]
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	f7f9 f8b4 	bl	8000a0c <__aeabi_dcmpun>
 80078a4:	b128      	cbz	r0, 80078b2 <_scanf_float+0x406>
 80078a6:	4807      	ldr	r0, [pc, #28]	; (80078c4 <_scanf_float+0x418>)
 80078a8:	f000 f888 	bl	80079bc <nanf>
 80078ac:	f8c8 0000 	str.w	r0, [r8]
 80078b0:	e7cd      	b.n	800784e <_scanf_float+0x3a2>
 80078b2:	4630      	mov	r0, r6
 80078b4:	4639      	mov	r1, r7
 80078b6:	f7f9 f907 	bl	8000ac8 <__aeabi_d2f>
 80078ba:	e7f7      	b.n	80078ac <_scanf_float+0x400>
 80078bc:	2500      	movs	r5, #0
 80078be:	e638      	b.n	8007532 <_scanf_float+0x86>
 80078c0:	0800b3a0 	.word	0x0800b3a0
 80078c4:	0800b7a8 	.word	0x0800b7a8

080078c8 <cleanup_glue>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	460c      	mov	r4, r1
 80078cc:	6809      	ldr	r1, [r1, #0]
 80078ce:	4605      	mov	r5, r0
 80078d0:	b109      	cbz	r1, 80078d6 <cleanup_glue+0xe>
 80078d2:	f7ff fff9 	bl	80078c8 <cleanup_glue>
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078de:	f002 bf6f 	b.w	800a7c0 <_free_r>
	...

080078e4 <_reclaim_reent>:
 80078e4:	4b2c      	ldr	r3, [pc, #176]	; (8007998 <_reclaim_reent+0xb4>)
 80078e6:	b570      	push	{r4, r5, r6, lr}
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4604      	mov	r4, r0
 80078ec:	4283      	cmp	r3, r0
 80078ee:	d051      	beq.n	8007994 <_reclaim_reent+0xb0>
 80078f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078f2:	b143      	cbz	r3, 8007906 <_reclaim_reent+0x22>
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d14a      	bne.n	8007990 <_reclaim_reent+0xac>
 80078fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078fc:	6819      	ldr	r1, [r3, #0]
 80078fe:	b111      	cbz	r1, 8007906 <_reclaim_reent+0x22>
 8007900:	4620      	mov	r0, r4
 8007902:	f002 ff5d 	bl	800a7c0 <_free_r>
 8007906:	6961      	ldr	r1, [r4, #20]
 8007908:	b111      	cbz	r1, 8007910 <_reclaim_reent+0x2c>
 800790a:	4620      	mov	r0, r4
 800790c:	f002 ff58 	bl	800a7c0 <_free_r>
 8007910:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007912:	b111      	cbz	r1, 800791a <_reclaim_reent+0x36>
 8007914:	4620      	mov	r0, r4
 8007916:	f002 ff53 	bl	800a7c0 <_free_r>
 800791a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800791c:	b111      	cbz	r1, 8007924 <_reclaim_reent+0x40>
 800791e:	4620      	mov	r0, r4
 8007920:	f002 ff4e 	bl	800a7c0 <_free_r>
 8007924:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007926:	b111      	cbz	r1, 800792e <_reclaim_reent+0x4a>
 8007928:	4620      	mov	r0, r4
 800792a:	f002 ff49 	bl	800a7c0 <_free_r>
 800792e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007930:	b111      	cbz	r1, 8007938 <_reclaim_reent+0x54>
 8007932:	4620      	mov	r0, r4
 8007934:	f002 ff44 	bl	800a7c0 <_free_r>
 8007938:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800793a:	b111      	cbz	r1, 8007942 <_reclaim_reent+0x5e>
 800793c:	4620      	mov	r0, r4
 800793e:	f002 ff3f 	bl	800a7c0 <_free_r>
 8007942:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007944:	b111      	cbz	r1, 800794c <_reclaim_reent+0x68>
 8007946:	4620      	mov	r0, r4
 8007948:	f002 ff3a 	bl	800a7c0 <_free_r>
 800794c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800794e:	b111      	cbz	r1, 8007956 <_reclaim_reent+0x72>
 8007950:	4620      	mov	r0, r4
 8007952:	f002 ff35 	bl	800a7c0 <_free_r>
 8007956:	69a3      	ldr	r3, [r4, #24]
 8007958:	b1e3      	cbz	r3, 8007994 <_reclaim_reent+0xb0>
 800795a:	4620      	mov	r0, r4
 800795c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800795e:	4798      	blx	r3
 8007960:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007962:	b1b9      	cbz	r1, 8007994 <_reclaim_reent+0xb0>
 8007964:	4620      	mov	r0, r4
 8007966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800796a:	f7ff bfad 	b.w	80078c8 <cleanup_glue>
 800796e:	5949      	ldr	r1, [r1, r5]
 8007970:	b941      	cbnz	r1, 8007984 <_reclaim_reent+0xa0>
 8007972:	3504      	adds	r5, #4
 8007974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007976:	2d80      	cmp	r5, #128	; 0x80
 8007978:	68d9      	ldr	r1, [r3, #12]
 800797a:	d1f8      	bne.n	800796e <_reclaim_reent+0x8a>
 800797c:	4620      	mov	r0, r4
 800797e:	f002 ff1f 	bl	800a7c0 <_free_r>
 8007982:	e7ba      	b.n	80078fa <_reclaim_reent+0x16>
 8007984:	680e      	ldr	r6, [r1, #0]
 8007986:	4620      	mov	r0, r4
 8007988:	f002 ff1a 	bl	800a7c0 <_free_r>
 800798c:	4631      	mov	r1, r6
 800798e:	e7ef      	b.n	8007970 <_reclaim_reent+0x8c>
 8007990:	2500      	movs	r5, #0
 8007992:	e7ef      	b.n	8007974 <_reclaim_reent+0x90>
 8007994:	bd70      	pop	{r4, r5, r6, pc}
 8007996:	bf00      	nop
 8007998:	20000010 	.word	0x20000010

0800799c <_sbrk_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	2300      	movs	r3, #0
 80079a0:	4d05      	ldr	r5, [pc, #20]	; (80079b8 <_sbrk_r+0x1c>)
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	602b      	str	r3, [r5, #0]
 80079a8:	f7f9 fd4e 	bl	8001448 <_sbrk>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_sbrk_r+0x1a>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_sbrk_r+0x1a>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	20001328 	.word	0x20001328

080079bc <nanf>:
 80079bc:	4800      	ldr	r0, [pc, #0]	; (80079c0 <nanf+0x4>)
 80079be:	4770      	bx	lr
 80079c0:	7fc00000 	.word	0x7fc00000

080079c4 <sniprintf>:
 80079c4:	b40c      	push	{r2, r3}
 80079c6:	b530      	push	{r4, r5, lr}
 80079c8:	4b17      	ldr	r3, [pc, #92]	; (8007a28 <sniprintf+0x64>)
 80079ca:	1e0c      	subs	r4, r1, #0
 80079cc:	681d      	ldr	r5, [r3, #0]
 80079ce:	b09d      	sub	sp, #116	; 0x74
 80079d0:	da08      	bge.n	80079e4 <sniprintf+0x20>
 80079d2:	238b      	movs	r3, #139	; 0x8b
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	b01d      	add	sp, #116	; 0x74
 80079dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079e0:	b002      	add	sp, #8
 80079e2:	4770      	bx	lr
 80079e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079ec:	bf0c      	ite	eq
 80079ee:	4623      	moveq	r3, r4
 80079f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079f4:	9304      	str	r3, [sp, #16]
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079fc:	9002      	str	r0, [sp, #8]
 80079fe:	9006      	str	r0, [sp, #24]
 8007a00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a04:	4628      	mov	r0, r5
 8007a06:	ab21      	add	r3, sp, #132	; 0x84
 8007a08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a0a:	a902      	add	r1, sp, #8
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	f002 ff7b 	bl	800a908 <_svfiprintf_r>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	bfbc      	itt	lt
 8007a16:	238b      	movlt	r3, #139	; 0x8b
 8007a18:	602b      	strlt	r3, [r5, #0]
 8007a1a:	2c00      	cmp	r4, #0
 8007a1c:	d0dd      	beq.n	80079da <sniprintf+0x16>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	e7d9      	b.n	80079da <sniprintf+0x16>
 8007a26:	bf00      	nop
 8007a28:	20000010 	.word	0x20000010

08007a2c <siprintf>:
 8007a2c:	b40e      	push	{r1, r2, r3}
 8007a2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a32:	b500      	push	{lr}
 8007a34:	b09c      	sub	sp, #112	; 0x70
 8007a36:	ab1d      	add	r3, sp, #116	; 0x74
 8007a38:	9002      	str	r0, [sp, #8]
 8007a3a:	9006      	str	r0, [sp, #24]
 8007a3c:	9107      	str	r1, [sp, #28]
 8007a3e:	9104      	str	r1, [sp, #16]
 8007a40:	4808      	ldr	r0, [pc, #32]	; (8007a64 <siprintf+0x38>)
 8007a42:	4909      	ldr	r1, [pc, #36]	; (8007a68 <siprintf+0x3c>)
 8007a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a48:	9105      	str	r1, [sp, #20]
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	a902      	add	r1, sp, #8
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	f002 ff5a 	bl	800a908 <_svfiprintf_r>
 8007a54:	2200      	movs	r2, #0
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	b01c      	add	sp, #112	; 0x70
 8007a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a60:	b003      	add	sp, #12
 8007a62:	4770      	bx	lr
 8007a64:	20000010 	.word	0x20000010
 8007a68:	ffff0208 	.word	0xffff0208

08007a6c <__sread>:
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	460c      	mov	r4, r1
 8007a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a74:	f003 f848 	bl	800ab08 <_read_r>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	bfab      	itete	ge
 8007a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a80:	181b      	addge	r3, r3, r0
 8007a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a86:	bfac      	ite	ge
 8007a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a8a:	81a3      	strhlt	r3, [r4, #12]
 8007a8c:	bd10      	pop	{r4, pc}

08007a8e <__swrite>:
 8007a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a92:	461f      	mov	r7, r3
 8007a94:	898b      	ldrh	r3, [r1, #12]
 8007a96:	4605      	mov	r5, r0
 8007a98:	05db      	lsls	r3, r3, #23
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	d505      	bpl.n	8007aac <__swrite+0x1e>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa8:	f002 f978 	bl	8009d9c <_lseek_r>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	4632      	mov	r2, r6
 8007ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	463b      	mov	r3, r7
 8007aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	f000 bea5 	b.w	8008810 <_write_r>

08007ac6 <__sseek>:
 8007ac6:	b510      	push	{r4, lr}
 8007ac8:	460c      	mov	r4, r1
 8007aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ace:	f002 f965 	bl	8009d9c <_lseek_r>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	bf15      	itete	ne
 8007ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ae2:	81a3      	strheq	r3, [r4, #12]
 8007ae4:	bf18      	it	ne
 8007ae6:	81a3      	strhne	r3, [r4, #12]
 8007ae8:	bd10      	pop	{r4, pc}

08007aea <__sclose>:
 8007aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aee:	f000 bea1 	b.w	8008834 <_close_r>

08007af2 <sulp>:
 8007af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af6:	460f      	mov	r7, r1
 8007af8:	4690      	mov	r8, r2
 8007afa:	f002 fd05 	bl	800a508 <__ulp>
 8007afe:	4604      	mov	r4, r0
 8007b00:	460d      	mov	r5, r1
 8007b02:	f1b8 0f00 	cmp.w	r8, #0
 8007b06:	d011      	beq.n	8007b2c <sulp+0x3a>
 8007b08:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007b0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dd0b      	ble.n	8007b2c <sulp+0x3a>
 8007b14:	2400      	movs	r4, #0
 8007b16:	051b      	lsls	r3, r3, #20
 8007b18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b1c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b20:	4622      	mov	r2, r4
 8007b22:	462b      	mov	r3, r5
 8007b24:	f7f8 fcd8 	bl	80004d8 <__aeabi_dmul>
 8007b28:	4604      	mov	r4, r0
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b34:	0000      	movs	r0, r0
	...

08007b38 <_strtod_l>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	469b      	mov	fp, r3
 8007b3e:	2300      	movs	r3, #0
 8007b40:	b09f      	sub	sp, #124	; 0x7c
 8007b42:	931a      	str	r3, [sp, #104]	; 0x68
 8007b44:	4b9e      	ldr	r3, [pc, #632]	; (8007dc0 <_strtod_l+0x288>)
 8007b46:	4682      	mov	sl, r0
 8007b48:	681f      	ldr	r7, [r3, #0]
 8007b4a:	460e      	mov	r6, r1
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	9215      	str	r2, [sp, #84]	; 0x54
 8007b50:	f7f8 fafe 	bl	8000150 <strlen>
 8007b54:	f04f 0800 	mov.w	r8, #0
 8007b58:	4604      	mov	r4, r0
 8007b5a:	f04f 0900 	mov.w	r9, #0
 8007b5e:	9619      	str	r6, [sp, #100]	; 0x64
 8007b60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	2a2b      	cmp	r2, #43	; 0x2b
 8007b66:	d04c      	beq.n	8007c02 <_strtod_l+0xca>
 8007b68:	d83a      	bhi.n	8007be0 <_strtod_l+0xa8>
 8007b6a:	2a0d      	cmp	r2, #13
 8007b6c:	d833      	bhi.n	8007bd6 <_strtod_l+0x9e>
 8007b6e:	2a08      	cmp	r2, #8
 8007b70:	d833      	bhi.n	8007bda <_strtod_l+0xa2>
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	d03d      	beq.n	8007bf2 <_strtod_l+0xba>
 8007b76:	2300      	movs	r3, #0
 8007b78:	930a      	str	r3, [sp, #40]	; 0x28
 8007b7a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007b7c:	782b      	ldrb	r3, [r5, #0]
 8007b7e:	2b30      	cmp	r3, #48	; 0x30
 8007b80:	f040 80aa 	bne.w	8007cd8 <_strtod_l+0x1a0>
 8007b84:	786b      	ldrb	r3, [r5, #1]
 8007b86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b8a:	2b58      	cmp	r3, #88	; 0x58
 8007b8c:	d166      	bne.n	8007c5c <_strtod_l+0x124>
 8007b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b90:	4650      	mov	r0, sl
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	ab1a      	add	r3, sp, #104	; 0x68
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4a8a      	ldr	r2, [pc, #552]	; (8007dc4 <_strtod_l+0x28c>)
 8007b9a:	f8cd b008 	str.w	fp, [sp, #8]
 8007b9e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ba0:	a919      	add	r1, sp, #100	; 0x64
 8007ba2:	f001 fdf9 	bl	8009798 <__gethex>
 8007ba6:	f010 0607 	ands.w	r6, r0, #7
 8007baa:	4604      	mov	r4, r0
 8007bac:	d005      	beq.n	8007bba <_strtod_l+0x82>
 8007bae:	2e06      	cmp	r6, #6
 8007bb0:	d129      	bne.n	8007c06 <_strtod_l+0xce>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	9519      	str	r5, [sp, #100]	; 0x64
 8007bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8007bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f040 858a 	bne.w	80086d6 <_strtod_l+0xb9e>
 8007bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc4:	b1d3      	cbz	r3, 8007bfc <_strtod_l+0xc4>
 8007bc6:	4642      	mov	r2, r8
 8007bc8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4619      	mov	r1, r3
 8007bd0:	b01f      	add	sp, #124	; 0x7c
 8007bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd6:	2a20      	cmp	r2, #32
 8007bd8:	d1cd      	bne.n	8007b76 <_strtod_l+0x3e>
 8007bda:	3301      	adds	r3, #1
 8007bdc:	9319      	str	r3, [sp, #100]	; 0x64
 8007bde:	e7bf      	b.n	8007b60 <_strtod_l+0x28>
 8007be0:	2a2d      	cmp	r2, #45	; 0x2d
 8007be2:	d1c8      	bne.n	8007b76 <_strtod_l+0x3e>
 8007be4:	2201      	movs	r2, #1
 8007be6:	920a      	str	r2, [sp, #40]	; 0x28
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	9219      	str	r2, [sp, #100]	; 0x64
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1c3      	bne.n	8007b7a <_strtod_l+0x42>
 8007bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bf4:	9619      	str	r6, [sp, #100]	; 0x64
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 856b 	bne.w	80086d2 <_strtod_l+0xb9a>
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	464b      	mov	r3, r9
 8007c00:	e7e4      	b.n	8007bcc <_strtod_l+0x94>
 8007c02:	2200      	movs	r2, #0
 8007c04:	e7ef      	b.n	8007be6 <_strtod_l+0xae>
 8007c06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007c08:	b13a      	cbz	r2, 8007c1a <_strtod_l+0xe2>
 8007c0a:	2135      	movs	r1, #53	; 0x35
 8007c0c:	a81c      	add	r0, sp, #112	; 0x70
 8007c0e:	f002 fd7f 	bl	800a710 <__copybits>
 8007c12:	4650      	mov	r0, sl
 8007c14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c16:	f002 f947 	bl	8009ea8 <_Bfree>
 8007c1a:	3e01      	subs	r6, #1
 8007c1c:	2e04      	cmp	r6, #4
 8007c1e:	d806      	bhi.n	8007c2e <_strtod_l+0xf6>
 8007c20:	e8df f006 	tbb	[pc, r6]
 8007c24:	1714030a 	.word	0x1714030a
 8007c28:	0a          	.byte	0x0a
 8007c29:	00          	.byte	0x00
 8007c2a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007c2e:	0721      	lsls	r1, r4, #28
 8007c30:	d5c3      	bpl.n	8007bba <_strtod_l+0x82>
 8007c32:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007c36:	e7c0      	b.n	8007bba <_strtod_l+0x82>
 8007c38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c3a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007c3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c46:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007c4a:	e7f0      	b.n	8007c2e <_strtod_l+0xf6>
 8007c4c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007dc8 <_strtod_l+0x290>
 8007c50:	e7ed      	b.n	8007c2e <_strtod_l+0xf6>
 8007c52:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007c56:	f04f 38ff 	mov.w	r8, #4294967295
 8007c5a:	e7e8      	b.n	8007c2e <_strtod_l+0xf6>
 8007c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	9219      	str	r2, [sp, #100]	; 0x64
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	2b30      	cmp	r3, #48	; 0x30
 8007c66:	d0f9      	beq.n	8007c5c <_strtod_l+0x124>
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0a6      	beq.n	8007bba <_strtod_l+0x82>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	9307      	str	r3, [sp, #28]
 8007c70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c72:	220a      	movs	r2, #10
 8007c74:	9308      	str	r3, [sp, #32]
 8007c76:	2300      	movs	r3, #0
 8007c78:	469b      	mov	fp, r3
 8007c7a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007c7e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c80:	7805      	ldrb	r5, [r0, #0]
 8007c82:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007c86:	b2d9      	uxtb	r1, r3
 8007c88:	2909      	cmp	r1, #9
 8007c8a:	d927      	bls.n	8007cdc <_strtod_l+0x1a4>
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	4639      	mov	r1, r7
 8007c90:	f002 ff52 	bl	800ab38 <strncmp>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d033      	beq.n	8007d00 <_strtod_l+0x1c8>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	465c      	mov	r4, fp
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	9004      	str	r0, [sp, #16]
 8007ca2:	2a65      	cmp	r2, #101	; 0x65
 8007ca4:	d001      	beq.n	8007caa <_strtod_l+0x172>
 8007ca6:	2a45      	cmp	r2, #69	; 0x45
 8007ca8:	d114      	bne.n	8007cd4 <_strtod_l+0x19c>
 8007caa:	b91c      	cbnz	r4, 8007cb4 <_strtod_l+0x17c>
 8007cac:	9a07      	ldr	r2, [sp, #28]
 8007cae:	4302      	orrs	r2, r0
 8007cb0:	d09f      	beq.n	8007bf2 <_strtod_l+0xba>
 8007cb2:	2400      	movs	r4, #0
 8007cb4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007cb6:	1c72      	adds	r2, r6, #1
 8007cb8:	9219      	str	r2, [sp, #100]	; 0x64
 8007cba:	7872      	ldrb	r2, [r6, #1]
 8007cbc:	2a2b      	cmp	r2, #43	; 0x2b
 8007cbe:	d079      	beq.n	8007db4 <_strtod_l+0x27c>
 8007cc0:	2a2d      	cmp	r2, #45	; 0x2d
 8007cc2:	f000 8083 	beq.w	8007dcc <_strtod_l+0x294>
 8007cc6:	2700      	movs	r7, #0
 8007cc8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007ccc:	2909      	cmp	r1, #9
 8007cce:	f240 8083 	bls.w	8007dd8 <_strtod_l+0x2a0>
 8007cd2:	9619      	str	r6, [sp, #100]	; 0x64
 8007cd4:	2500      	movs	r5, #0
 8007cd6:	e09f      	b.n	8007e18 <_strtod_l+0x2e0>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	e7c8      	b.n	8007c6e <_strtod_l+0x136>
 8007cdc:	f1bb 0f08 	cmp.w	fp, #8
 8007ce0:	bfd5      	itete	le
 8007ce2:	9906      	ldrle	r1, [sp, #24]
 8007ce4:	9905      	ldrgt	r1, [sp, #20]
 8007ce6:	fb02 3301 	mlale	r3, r2, r1, r3
 8007cea:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007cee:	f100 0001 	add.w	r0, r0, #1
 8007cf2:	bfd4      	ite	le
 8007cf4:	9306      	strle	r3, [sp, #24]
 8007cf6:	9305      	strgt	r3, [sp, #20]
 8007cf8:	f10b 0b01 	add.w	fp, fp, #1
 8007cfc:	9019      	str	r0, [sp, #100]	; 0x64
 8007cfe:	e7be      	b.n	8007c7e <_strtod_l+0x146>
 8007d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d02:	191a      	adds	r2, r3, r4
 8007d04:	9219      	str	r2, [sp, #100]	; 0x64
 8007d06:	5d1a      	ldrb	r2, [r3, r4]
 8007d08:	f1bb 0f00 	cmp.w	fp, #0
 8007d0c:	d036      	beq.n	8007d7c <_strtod_l+0x244>
 8007d0e:	465c      	mov	r4, fp
 8007d10:	9004      	str	r0, [sp, #16]
 8007d12:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007d16:	2b09      	cmp	r3, #9
 8007d18:	d912      	bls.n	8007d40 <_strtod_l+0x208>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e7c1      	b.n	8007ca2 <_strtod_l+0x16a>
 8007d1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d20:	3001      	adds	r0, #1
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	9219      	str	r2, [sp, #100]	; 0x64
 8007d26:	785a      	ldrb	r2, [r3, #1]
 8007d28:	2a30      	cmp	r2, #48	; 0x30
 8007d2a:	d0f8      	beq.n	8007d1e <_strtod_l+0x1e6>
 8007d2c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	f200 84d5 	bhi.w	80086e0 <_strtod_l+0xba8>
 8007d36:	9004      	str	r0, [sp, #16]
 8007d38:	2000      	movs	r0, #0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d3e:	9308      	str	r3, [sp, #32]
 8007d40:	3a30      	subs	r2, #48	; 0x30
 8007d42:	f100 0301 	add.w	r3, r0, #1
 8007d46:	d013      	beq.n	8007d70 <_strtod_l+0x238>
 8007d48:	9904      	ldr	r1, [sp, #16]
 8007d4a:	1905      	adds	r5, r0, r4
 8007d4c:	4419      	add	r1, r3
 8007d4e:	9104      	str	r1, [sp, #16]
 8007d50:	4623      	mov	r3, r4
 8007d52:	210a      	movs	r1, #10
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	d113      	bne.n	8007d80 <_strtod_l+0x248>
 8007d58:	1823      	adds	r3, r4, r0
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	f104 0401 	add.w	r4, r4, #1
 8007d60:	4404      	add	r4, r0
 8007d62:	dc1b      	bgt.n	8007d9c <_strtod_l+0x264>
 8007d64:	230a      	movs	r3, #10
 8007d66:	9906      	ldr	r1, [sp, #24]
 8007d68:	fb03 2301 	mla	r3, r3, r1, r2
 8007d6c:	9306      	str	r3, [sp, #24]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d72:	4618      	mov	r0, r3
 8007d74:	1c51      	adds	r1, r2, #1
 8007d76:	9119      	str	r1, [sp, #100]	; 0x64
 8007d78:	7852      	ldrb	r2, [r2, #1]
 8007d7a:	e7ca      	b.n	8007d12 <_strtod_l+0x1da>
 8007d7c:	4658      	mov	r0, fp
 8007d7e:	e7d3      	b.n	8007d28 <_strtod_l+0x1f0>
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	dc04      	bgt.n	8007d8e <_strtod_l+0x256>
 8007d84:	9f06      	ldr	r7, [sp, #24]
 8007d86:	434f      	muls	r7, r1
 8007d88:	9706      	str	r7, [sp, #24]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	e7e2      	b.n	8007d54 <_strtod_l+0x21c>
 8007d8e:	1c5f      	adds	r7, r3, #1
 8007d90:	2f10      	cmp	r7, #16
 8007d92:	bfde      	ittt	le
 8007d94:	9f05      	ldrle	r7, [sp, #20]
 8007d96:	434f      	mulle	r7, r1
 8007d98:	9705      	strle	r7, [sp, #20]
 8007d9a:	e7f6      	b.n	8007d8a <_strtod_l+0x252>
 8007d9c:	2c10      	cmp	r4, #16
 8007d9e:	bfdf      	itttt	le
 8007da0:	230a      	movle	r3, #10
 8007da2:	9905      	ldrle	r1, [sp, #20]
 8007da4:	fb03 2301 	mlale	r3, r3, r1, r2
 8007da8:	9305      	strle	r3, [sp, #20]
 8007daa:	e7e0      	b.n	8007d6e <_strtod_l+0x236>
 8007dac:	2300      	movs	r3, #0
 8007dae:	9304      	str	r3, [sp, #16]
 8007db0:	2301      	movs	r3, #1
 8007db2:	e77b      	b.n	8007cac <_strtod_l+0x174>
 8007db4:	2700      	movs	r7, #0
 8007db6:	1cb2      	adds	r2, r6, #2
 8007db8:	9219      	str	r2, [sp, #100]	; 0x64
 8007dba:	78b2      	ldrb	r2, [r6, #2]
 8007dbc:	e784      	b.n	8007cc8 <_strtod_l+0x190>
 8007dbe:	bf00      	nop
 8007dc0:	0800b5f0 	.word	0x0800b5f0
 8007dc4:	0800b3a8 	.word	0x0800b3a8
 8007dc8:	7ff00000 	.word	0x7ff00000
 8007dcc:	2701      	movs	r7, #1
 8007dce:	e7f2      	b.n	8007db6 <_strtod_l+0x27e>
 8007dd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007dd2:	1c51      	adds	r1, r2, #1
 8007dd4:	9119      	str	r1, [sp, #100]	; 0x64
 8007dd6:	7852      	ldrb	r2, [r2, #1]
 8007dd8:	2a30      	cmp	r2, #48	; 0x30
 8007dda:	d0f9      	beq.n	8007dd0 <_strtod_l+0x298>
 8007ddc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007de0:	2908      	cmp	r1, #8
 8007de2:	f63f af77 	bhi.w	8007cd4 <_strtod_l+0x19c>
 8007de6:	f04f 0e0a 	mov.w	lr, #10
 8007dea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007dee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007df0:	9209      	str	r2, [sp, #36]	; 0x24
 8007df2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007df4:	1c51      	adds	r1, r2, #1
 8007df6:	9119      	str	r1, [sp, #100]	; 0x64
 8007df8:	7852      	ldrb	r2, [r2, #1]
 8007dfa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007dfe:	2d09      	cmp	r5, #9
 8007e00:	d935      	bls.n	8007e6e <_strtod_l+0x336>
 8007e02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e04:	1b49      	subs	r1, r1, r5
 8007e06:	2908      	cmp	r1, #8
 8007e08:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007e0c:	dc02      	bgt.n	8007e14 <_strtod_l+0x2dc>
 8007e0e:	4565      	cmp	r5, ip
 8007e10:	bfa8      	it	ge
 8007e12:	4665      	movge	r5, ip
 8007e14:	b107      	cbz	r7, 8007e18 <_strtod_l+0x2e0>
 8007e16:	426d      	negs	r5, r5
 8007e18:	2c00      	cmp	r4, #0
 8007e1a:	d14c      	bne.n	8007eb6 <_strtod_l+0x37e>
 8007e1c:	9907      	ldr	r1, [sp, #28]
 8007e1e:	4301      	orrs	r1, r0
 8007e20:	f47f aecb 	bne.w	8007bba <_strtod_l+0x82>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f47f aee4 	bne.w	8007bf2 <_strtod_l+0xba>
 8007e2a:	2a69      	cmp	r2, #105	; 0x69
 8007e2c:	d026      	beq.n	8007e7c <_strtod_l+0x344>
 8007e2e:	dc23      	bgt.n	8007e78 <_strtod_l+0x340>
 8007e30:	2a49      	cmp	r2, #73	; 0x49
 8007e32:	d023      	beq.n	8007e7c <_strtod_l+0x344>
 8007e34:	2a4e      	cmp	r2, #78	; 0x4e
 8007e36:	f47f aedc 	bne.w	8007bf2 <_strtod_l+0xba>
 8007e3a:	499d      	ldr	r1, [pc, #628]	; (80080b0 <_strtod_l+0x578>)
 8007e3c:	a819      	add	r0, sp, #100	; 0x64
 8007e3e:	f001 fef9 	bl	8009c34 <__match>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f43f aed5 	beq.w	8007bf2 <_strtod_l+0xba>
 8007e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b28      	cmp	r3, #40	; 0x28
 8007e4e:	d12c      	bne.n	8007eaa <_strtod_l+0x372>
 8007e50:	4998      	ldr	r1, [pc, #608]	; (80080b4 <_strtod_l+0x57c>)
 8007e52:	aa1c      	add	r2, sp, #112	; 0x70
 8007e54:	a819      	add	r0, sp, #100	; 0x64
 8007e56:	f001 ff01 	bl	8009c5c <__hexnan>
 8007e5a:	2805      	cmp	r0, #5
 8007e5c:	d125      	bne.n	8007eaa <_strtod_l+0x372>
 8007e5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e60:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007e64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007e68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007e6c:	e6a5      	b.n	8007bba <_strtod_l+0x82>
 8007e6e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007e72:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007e76:	e7bc      	b.n	8007df2 <_strtod_l+0x2ba>
 8007e78:	2a6e      	cmp	r2, #110	; 0x6e
 8007e7a:	e7dc      	b.n	8007e36 <_strtod_l+0x2fe>
 8007e7c:	498e      	ldr	r1, [pc, #568]	; (80080b8 <_strtod_l+0x580>)
 8007e7e:	a819      	add	r0, sp, #100	; 0x64
 8007e80:	f001 fed8 	bl	8009c34 <__match>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	f43f aeb4 	beq.w	8007bf2 <_strtod_l+0xba>
 8007e8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e8c:	498b      	ldr	r1, [pc, #556]	; (80080bc <_strtod_l+0x584>)
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	a819      	add	r0, sp, #100	; 0x64
 8007e92:	9319      	str	r3, [sp, #100]	; 0x64
 8007e94:	f001 fece 	bl	8009c34 <__match>
 8007e98:	b910      	cbnz	r0, 8007ea0 <_strtod_l+0x368>
 8007e9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	9319      	str	r3, [sp, #100]	; 0x64
 8007ea0:	f04f 0800 	mov.w	r8, #0
 8007ea4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80080c0 <_strtod_l+0x588>
 8007ea8:	e687      	b.n	8007bba <_strtod_l+0x82>
 8007eaa:	4886      	ldr	r0, [pc, #536]	; (80080c4 <_strtod_l+0x58c>)
 8007eac:	f002 fe3e 	bl	800ab2c <nan>
 8007eb0:	4680      	mov	r8, r0
 8007eb2:	4689      	mov	r9, r1
 8007eb4:	e681      	b.n	8007bba <_strtod_l+0x82>
 8007eb6:	9b04      	ldr	r3, [sp, #16]
 8007eb8:	f1bb 0f00 	cmp.w	fp, #0
 8007ebc:	bf08      	it	eq
 8007ebe:	46a3      	moveq	fp, r4
 8007ec0:	1aeb      	subs	r3, r5, r3
 8007ec2:	2c10      	cmp	r4, #16
 8007ec4:	9806      	ldr	r0, [sp, #24]
 8007ec6:	4626      	mov	r6, r4
 8007ec8:	9307      	str	r3, [sp, #28]
 8007eca:	bfa8      	it	ge
 8007ecc:	2610      	movge	r6, #16
 8007ece:	f7f8 fa89 	bl	80003e4 <__aeabi_ui2d>
 8007ed2:	2c09      	cmp	r4, #9
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	4689      	mov	r9, r1
 8007ed8:	dd13      	ble.n	8007f02 <_strtod_l+0x3ca>
 8007eda:	4b7b      	ldr	r3, [pc, #492]	; (80080c8 <_strtod_l+0x590>)
 8007edc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ee0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007ee4:	f7f8 faf8 	bl	80004d8 <__aeabi_dmul>
 8007ee8:	4680      	mov	r8, r0
 8007eea:	9805      	ldr	r0, [sp, #20]
 8007eec:	4689      	mov	r9, r1
 8007eee:	f7f8 fa79 	bl	80003e4 <__aeabi_ui2d>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	4649      	mov	r1, r9
 8007efa:	f7f8 f937 	bl	800016c <__adddf3>
 8007efe:	4680      	mov	r8, r0
 8007f00:	4689      	mov	r9, r1
 8007f02:	2c0f      	cmp	r4, #15
 8007f04:	dc36      	bgt.n	8007f74 <_strtod_l+0x43c>
 8007f06:	9b07      	ldr	r3, [sp, #28]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f43f ae56 	beq.w	8007bba <_strtod_l+0x82>
 8007f0e:	dd22      	ble.n	8007f56 <_strtod_l+0x41e>
 8007f10:	2b16      	cmp	r3, #22
 8007f12:	dc09      	bgt.n	8007f28 <_strtod_l+0x3f0>
 8007f14:	496c      	ldr	r1, [pc, #432]	; (80080c8 <_strtod_l+0x590>)
 8007f16:	4642      	mov	r2, r8
 8007f18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f1c:	464b      	mov	r3, r9
 8007f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f22:	f7f8 fad9 	bl	80004d8 <__aeabi_dmul>
 8007f26:	e7c3      	b.n	8007eb0 <_strtod_l+0x378>
 8007f28:	9a07      	ldr	r2, [sp, #28]
 8007f2a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	db20      	blt.n	8007f74 <_strtod_l+0x43c>
 8007f32:	4d65      	ldr	r5, [pc, #404]	; (80080c8 <_strtod_l+0x590>)
 8007f34:	f1c4 040f 	rsb	r4, r4, #15
 8007f38:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f42:	464b      	mov	r3, r9
 8007f44:	f7f8 fac8 	bl	80004d8 <__aeabi_dmul>
 8007f48:	9b07      	ldr	r3, [sp, #28]
 8007f4a:	1b1c      	subs	r4, r3, r4
 8007f4c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007f50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f54:	e7e5      	b.n	8007f22 <_strtod_l+0x3ea>
 8007f56:	9b07      	ldr	r3, [sp, #28]
 8007f58:	3316      	adds	r3, #22
 8007f5a:	db0b      	blt.n	8007f74 <_strtod_l+0x43c>
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	4640      	mov	r0, r8
 8007f60:	1b5d      	subs	r5, r3, r5
 8007f62:	4b59      	ldr	r3, [pc, #356]	; (80080c8 <_strtod_l+0x590>)
 8007f64:	4649      	mov	r1, r9
 8007f66:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007f6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f6e:	f7f8 fbdd 	bl	800072c <__aeabi_ddiv>
 8007f72:	e79d      	b.n	8007eb0 <_strtod_l+0x378>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	1ba6      	subs	r6, r4, r6
 8007f78:	441e      	add	r6, r3
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	dd74      	ble.n	8008068 <_strtod_l+0x530>
 8007f7e:	f016 030f 	ands.w	r3, r6, #15
 8007f82:	d00a      	beq.n	8007f9a <_strtod_l+0x462>
 8007f84:	4950      	ldr	r1, [pc, #320]	; (80080c8 <_strtod_l+0x590>)
 8007f86:	4642      	mov	r2, r8
 8007f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f90:	464b      	mov	r3, r9
 8007f92:	f7f8 faa1 	bl	80004d8 <__aeabi_dmul>
 8007f96:	4680      	mov	r8, r0
 8007f98:	4689      	mov	r9, r1
 8007f9a:	f036 060f 	bics.w	r6, r6, #15
 8007f9e:	d052      	beq.n	8008046 <_strtod_l+0x50e>
 8007fa0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007fa4:	dd27      	ble.n	8007ff6 <_strtod_l+0x4be>
 8007fa6:	f04f 0b00 	mov.w	fp, #0
 8007faa:	f8cd b010 	str.w	fp, [sp, #16]
 8007fae:	f8cd b020 	str.w	fp, [sp, #32]
 8007fb2:	f8cd b018 	str.w	fp, [sp, #24]
 8007fb6:	2322      	movs	r3, #34	; 0x22
 8007fb8:	f04f 0800 	mov.w	r8, #0
 8007fbc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80080c0 <_strtod_l+0x588>
 8007fc0:	f8ca 3000 	str.w	r3, [sl]
 8007fc4:	9b08      	ldr	r3, [sp, #32]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f43f adf7 	beq.w	8007bba <_strtod_l+0x82>
 8007fcc:	4650      	mov	r0, sl
 8007fce:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007fd0:	f001 ff6a 	bl	8009ea8 <_Bfree>
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	9906      	ldr	r1, [sp, #24]
 8007fd8:	f001 ff66 	bl	8009ea8 <_Bfree>
 8007fdc:	4650      	mov	r0, sl
 8007fde:	9904      	ldr	r1, [sp, #16]
 8007fe0:	f001 ff62 	bl	8009ea8 <_Bfree>
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	9908      	ldr	r1, [sp, #32]
 8007fe8:	f001 ff5e 	bl	8009ea8 <_Bfree>
 8007fec:	4659      	mov	r1, fp
 8007fee:	4650      	mov	r0, sl
 8007ff0:	f001 ff5a 	bl	8009ea8 <_Bfree>
 8007ff4:	e5e1      	b.n	8007bba <_strtod_l+0x82>
 8007ff6:	4b35      	ldr	r3, [pc, #212]	; (80080cc <_strtod_l+0x594>)
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	9305      	str	r3, [sp, #20]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4649      	mov	r1, r9
 8008000:	461f      	mov	r7, r3
 8008002:	1136      	asrs	r6, r6, #4
 8008004:	2e01      	cmp	r6, #1
 8008006:	dc21      	bgt.n	800804c <_strtod_l+0x514>
 8008008:	b10b      	cbz	r3, 800800e <_strtod_l+0x4d6>
 800800a:	4680      	mov	r8, r0
 800800c:	4689      	mov	r9, r1
 800800e:	4b2f      	ldr	r3, [pc, #188]	; (80080cc <_strtod_l+0x594>)
 8008010:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008014:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008018:	4642      	mov	r2, r8
 800801a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800801e:	464b      	mov	r3, r9
 8008020:	f7f8 fa5a 	bl	80004d8 <__aeabi_dmul>
 8008024:	4b26      	ldr	r3, [pc, #152]	; (80080c0 <_strtod_l+0x588>)
 8008026:	460a      	mov	r2, r1
 8008028:	400b      	ands	r3, r1
 800802a:	4929      	ldr	r1, [pc, #164]	; (80080d0 <_strtod_l+0x598>)
 800802c:	4680      	mov	r8, r0
 800802e:	428b      	cmp	r3, r1
 8008030:	d8b9      	bhi.n	8007fa6 <_strtod_l+0x46e>
 8008032:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008036:	428b      	cmp	r3, r1
 8008038:	bf86      	itte	hi
 800803a:	f04f 38ff 	movhi.w	r8, #4294967295
 800803e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80080d4 <_strtod_l+0x59c>
 8008042:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008046:	2300      	movs	r3, #0
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	e07f      	b.n	800814c <_strtod_l+0x614>
 800804c:	07f2      	lsls	r2, r6, #31
 800804e:	d505      	bpl.n	800805c <_strtod_l+0x524>
 8008050:	9b05      	ldr	r3, [sp, #20]
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f7f8 fa3f 	bl	80004d8 <__aeabi_dmul>
 800805a:	2301      	movs	r3, #1
 800805c:	9a05      	ldr	r2, [sp, #20]
 800805e:	3701      	adds	r7, #1
 8008060:	3208      	adds	r2, #8
 8008062:	1076      	asrs	r6, r6, #1
 8008064:	9205      	str	r2, [sp, #20]
 8008066:	e7cd      	b.n	8008004 <_strtod_l+0x4cc>
 8008068:	d0ed      	beq.n	8008046 <_strtod_l+0x50e>
 800806a:	4276      	negs	r6, r6
 800806c:	f016 020f 	ands.w	r2, r6, #15
 8008070:	d00a      	beq.n	8008088 <_strtod_l+0x550>
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <_strtod_l+0x590>)
 8008074:	4640      	mov	r0, r8
 8008076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800807a:	4649      	mov	r1, r9
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f7f8 fb54 	bl	800072c <__aeabi_ddiv>
 8008084:	4680      	mov	r8, r0
 8008086:	4689      	mov	r9, r1
 8008088:	1136      	asrs	r6, r6, #4
 800808a:	d0dc      	beq.n	8008046 <_strtod_l+0x50e>
 800808c:	2e1f      	cmp	r6, #31
 800808e:	dd23      	ble.n	80080d8 <_strtod_l+0x5a0>
 8008090:	f04f 0b00 	mov.w	fp, #0
 8008094:	f8cd b010 	str.w	fp, [sp, #16]
 8008098:	f8cd b020 	str.w	fp, [sp, #32]
 800809c:	f8cd b018 	str.w	fp, [sp, #24]
 80080a0:	2322      	movs	r3, #34	; 0x22
 80080a2:	f04f 0800 	mov.w	r8, #0
 80080a6:	f04f 0900 	mov.w	r9, #0
 80080aa:	f8ca 3000 	str.w	r3, [sl]
 80080ae:	e789      	b.n	8007fc4 <_strtod_l+0x48c>
 80080b0:	0800b379 	.word	0x0800b379
 80080b4:	0800b3bc 	.word	0x0800b3bc
 80080b8:	0800b371 	.word	0x0800b371
 80080bc:	0800b4fc 	.word	0x0800b4fc
 80080c0:	7ff00000 	.word	0x7ff00000
 80080c4:	0800b7a8 	.word	0x0800b7a8
 80080c8:	0800b688 	.word	0x0800b688
 80080cc:	0800b660 	.word	0x0800b660
 80080d0:	7ca00000 	.word	0x7ca00000
 80080d4:	7fefffff 	.word	0x7fefffff
 80080d8:	f016 0310 	ands.w	r3, r6, #16
 80080dc:	bf18      	it	ne
 80080de:	236a      	movne	r3, #106	; 0x6a
 80080e0:	4640      	mov	r0, r8
 80080e2:	9305      	str	r3, [sp, #20]
 80080e4:	4649      	mov	r1, r9
 80080e6:	2300      	movs	r3, #0
 80080e8:	4fb0      	ldr	r7, [pc, #704]	; (80083ac <_strtod_l+0x874>)
 80080ea:	07f2      	lsls	r2, r6, #31
 80080ec:	d504      	bpl.n	80080f8 <_strtod_l+0x5c0>
 80080ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f2:	f7f8 f9f1 	bl	80004d8 <__aeabi_dmul>
 80080f6:	2301      	movs	r3, #1
 80080f8:	1076      	asrs	r6, r6, #1
 80080fa:	f107 0708 	add.w	r7, r7, #8
 80080fe:	d1f4      	bne.n	80080ea <_strtod_l+0x5b2>
 8008100:	b10b      	cbz	r3, 8008106 <_strtod_l+0x5ce>
 8008102:	4680      	mov	r8, r0
 8008104:	4689      	mov	r9, r1
 8008106:	9b05      	ldr	r3, [sp, #20]
 8008108:	b1c3      	cbz	r3, 800813c <_strtod_l+0x604>
 800810a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800810e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008112:	2b00      	cmp	r3, #0
 8008114:	4649      	mov	r1, r9
 8008116:	dd11      	ble.n	800813c <_strtod_l+0x604>
 8008118:	2b1f      	cmp	r3, #31
 800811a:	f340 8127 	ble.w	800836c <_strtod_l+0x834>
 800811e:	2b34      	cmp	r3, #52	; 0x34
 8008120:	bfd8      	it	le
 8008122:	f04f 33ff 	movle.w	r3, #4294967295
 8008126:	f04f 0800 	mov.w	r8, #0
 800812a:	bfcf      	iteee	gt
 800812c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008130:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008134:	fa03 f202 	lslle.w	r2, r3, r2
 8008138:	ea02 0901 	andle.w	r9, r2, r1
 800813c:	2200      	movs	r2, #0
 800813e:	2300      	movs	r3, #0
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 fc30 	bl	80009a8 <__aeabi_dcmpeq>
 8008148:	2800      	cmp	r0, #0
 800814a:	d1a1      	bne.n	8008090 <_strtod_l+0x558>
 800814c:	9b06      	ldr	r3, [sp, #24]
 800814e:	465a      	mov	r2, fp
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	4650      	mov	r0, sl
 8008154:	4623      	mov	r3, r4
 8008156:	9908      	ldr	r1, [sp, #32]
 8008158:	f001 ff0e 	bl	8009f78 <__s2b>
 800815c:	9008      	str	r0, [sp, #32]
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f af21 	beq.w	8007fa6 <_strtod_l+0x46e>
 8008164:	9b04      	ldr	r3, [sp, #16]
 8008166:	f04f 0b00 	mov.w	fp, #0
 800816a:	1b5d      	subs	r5, r3, r5
 800816c:	9b07      	ldr	r3, [sp, #28]
 800816e:	f8cd b010 	str.w	fp, [sp, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	bfb4      	ite	lt
 8008176:	462b      	movlt	r3, r5
 8008178:	2300      	movge	r3, #0
 800817a:	930e      	str	r3, [sp, #56]	; 0x38
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008182:	9314      	str	r3, [sp, #80]	; 0x50
 8008184:	9b08      	ldr	r3, [sp, #32]
 8008186:	4650      	mov	r0, sl
 8008188:	6859      	ldr	r1, [r3, #4]
 800818a:	f001 fe4d 	bl	8009e28 <_Balloc>
 800818e:	9006      	str	r0, [sp, #24]
 8008190:	2800      	cmp	r0, #0
 8008192:	f43f af10 	beq.w	8007fb6 <_strtod_l+0x47e>
 8008196:	9b08      	ldr	r3, [sp, #32]
 8008198:	300c      	adds	r0, #12
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	f103 010c 	add.w	r1, r3, #12
 80081a0:	3202      	adds	r2, #2
 80081a2:	0092      	lsls	r2, r2, #2
 80081a4:	f7fe fc77 	bl	8006a96 <memcpy>
 80081a8:	ab1c      	add	r3, sp, #112	; 0x70
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	ab1b      	add	r3, sp, #108	; 0x6c
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	4642      	mov	r2, r8
 80081b2:	464b      	mov	r3, r9
 80081b4:	4650      	mov	r0, sl
 80081b6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80081ba:	f002 fa1f 	bl	800a5fc <__d2b>
 80081be:	901a      	str	r0, [sp, #104]	; 0x68
 80081c0:	2800      	cmp	r0, #0
 80081c2:	f43f aef8 	beq.w	8007fb6 <_strtod_l+0x47e>
 80081c6:	2101      	movs	r1, #1
 80081c8:	4650      	mov	r0, sl
 80081ca:	f001 ff6d 	bl	800a0a8 <__i2b>
 80081ce:	4603      	mov	r3, r0
 80081d0:	9004      	str	r0, [sp, #16]
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f43f aeef 	beq.w	8007fb6 <_strtod_l+0x47e>
 80081d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80081da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80081dc:	2d00      	cmp	r5, #0
 80081de:	bfab      	itete	ge
 80081e0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80081e2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80081e4:	18ee      	addge	r6, r5, r3
 80081e6:	1b5c      	sublt	r4, r3, r5
 80081e8:	9b05      	ldr	r3, [sp, #20]
 80081ea:	bfa8      	it	ge
 80081ec:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80081ee:	eba5 0503 	sub.w	r5, r5, r3
 80081f2:	4415      	add	r5, r2
 80081f4:	4b6e      	ldr	r3, [pc, #440]	; (80083b0 <_strtod_l+0x878>)
 80081f6:	f105 35ff 	add.w	r5, r5, #4294967295
 80081fa:	bfb8      	it	lt
 80081fc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80081fe:	429d      	cmp	r5, r3
 8008200:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008204:	f280 80c4 	bge.w	8008390 <_strtod_l+0x858>
 8008208:	1b5b      	subs	r3, r3, r5
 800820a:	2b1f      	cmp	r3, #31
 800820c:	f04f 0701 	mov.w	r7, #1
 8008210:	eba2 0203 	sub.w	r2, r2, r3
 8008214:	f300 80b1 	bgt.w	800837a <_strtod_l+0x842>
 8008218:	2500      	movs	r5, #0
 800821a:	fa07 f303 	lsl.w	r3, r7, r3
 800821e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008220:	18b7      	adds	r7, r6, r2
 8008222:	9b05      	ldr	r3, [sp, #20]
 8008224:	42be      	cmp	r6, r7
 8008226:	4414      	add	r4, r2
 8008228:	441c      	add	r4, r3
 800822a:	4633      	mov	r3, r6
 800822c:	bfa8      	it	ge
 800822e:	463b      	movge	r3, r7
 8008230:	42a3      	cmp	r3, r4
 8008232:	bfa8      	it	ge
 8008234:	4623      	movge	r3, r4
 8008236:	2b00      	cmp	r3, #0
 8008238:	bfc2      	ittt	gt
 800823a:	1aff      	subgt	r7, r7, r3
 800823c:	1ae4      	subgt	r4, r4, r3
 800823e:	1af6      	subgt	r6, r6, r3
 8008240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008242:	2b00      	cmp	r3, #0
 8008244:	dd17      	ble.n	8008276 <_strtod_l+0x73e>
 8008246:	461a      	mov	r2, r3
 8008248:	4650      	mov	r0, sl
 800824a:	9904      	ldr	r1, [sp, #16]
 800824c:	f001 ffea 	bl	800a224 <__pow5mult>
 8008250:	9004      	str	r0, [sp, #16]
 8008252:	2800      	cmp	r0, #0
 8008254:	f43f aeaf 	beq.w	8007fb6 <_strtod_l+0x47e>
 8008258:	4601      	mov	r1, r0
 800825a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800825c:	4650      	mov	r0, sl
 800825e:	f001 ff39 	bl	800a0d4 <__multiply>
 8008262:	9009      	str	r0, [sp, #36]	; 0x24
 8008264:	2800      	cmp	r0, #0
 8008266:	f43f aea6 	beq.w	8007fb6 <_strtod_l+0x47e>
 800826a:	4650      	mov	r0, sl
 800826c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800826e:	f001 fe1b 	bl	8009ea8 <_Bfree>
 8008272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008274:	931a      	str	r3, [sp, #104]	; 0x68
 8008276:	2f00      	cmp	r7, #0
 8008278:	f300 808e 	bgt.w	8008398 <_strtod_l+0x860>
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	2b00      	cmp	r3, #0
 8008280:	dd08      	ble.n	8008294 <_strtod_l+0x75c>
 8008282:	4650      	mov	r0, sl
 8008284:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008286:	9906      	ldr	r1, [sp, #24]
 8008288:	f001 ffcc 	bl	800a224 <__pow5mult>
 800828c:	9006      	str	r0, [sp, #24]
 800828e:	2800      	cmp	r0, #0
 8008290:	f43f ae91 	beq.w	8007fb6 <_strtod_l+0x47e>
 8008294:	2c00      	cmp	r4, #0
 8008296:	dd08      	ble.n	80082aa <_strtod_l+0x772>
 8008298:	4622      	mov	r2, r4
 800829a:	4650      	mov	r0, sl
 800829c:	9906      	ldr	r1, [sp, #24]
 800829e:	f002 f81b 	bl	800a2d8 <__lshift>
 80082a2:	9006      	str	r0, [sp, #24]
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f43f ae86 	beq.w	8007fb6 <_strtod_l+0x47e>
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	dd08      	ble.n	80082c0 <_strtod_l+0x788>
 80082ae:	4632      	mov	r2, r6
 80082b0:	4650      	mov	r0, sl
 80082b2:	9904      	ldr	r1, [sp, #16]
 80082b4:	f002 f810 	bl	800a2d8 <__lshift>
 80082b8:	9004      	str	r0, [sp, #16]
 80082ba:	2800      	cmp	r0, #0
 80082bc:	f43f ae7b 	beq.w	8007fb6 <_strtod_l+0x47e>
 80082c0:	4650      	mov	r0, sl
 80082c2:	9a06      	ldr	r2, [sp, #24]
 80082c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80082c6:	f002 f893 	bl	800a3f0 <__mdiff>
 80082ca:	4683      	mov	fp, r0
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f43f ae72 	beq.w	8007fb6 <_strtod_l+0x47e>
 80082d2:	2400      	movs	r4, #0
 80082d4:	68c3      	ldr	r3, [r0, #12]
 80082d6:	9904      	ldr	r1, [sp, #16]
 80082d8:	60c4      	str	r4, [r0, #12]
 80082da:	930b      	str	r3, [sp, #44]	; 0x2c
 80082dc:	f002 f86c 	bl	800a3b8 <__mcmp>
 80082e0:	42a0      	cmp	r0, r4
 80082e2:	da6b      	bge.n	80083bc <_strtod_l+0x884>
 80082e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e6:	ea53 0308 	orrs.w	r3, r3, r8
 80082ea:	f040 8091 	bne.w	8008410 <_strtod_l+0x8d8>
 80082ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 808c 	bne.w	8008410 <_strtod_l+0x8d8>
 80082f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082fc:	0d1b      	lsrs	r3, r3, #20
 80082fe:	051b      	lsls	r3, r3, #20
 8008300:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008304:	f240 8084 	bls.w	8008410 <_strtod_l+0x8d8>
 8008308:	f8db 3014 	ldr.w	r3, [fp, #20]
 800830c:	b91b      	cbnz	r3, 8008316 <_strtod_l+0x7de>
 800830e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008312:	2b01      	cmp	r3, #1
 8008314:	dd7c      	ble.n	8008410 <_strtod_l+0x8d8>
 8008316:	4659      	mov	r1, fp
 8008318:	2201      	movs	r2, #1
 800831a:	4650      	mov	r0, sl
 800831c:	f001 ffdc 	bl	800a2d8 <__lshift>
 8008320:	9904      	ldr	r1, [sp, #16]
 8008322:	4683      	mov	fp, r0
 8008324:	f002 f848 	bl	800a3b8 <__mcmp>
 8008328:	2800      	cmp	r0, #0
 800832a:	dd71      	ble.n	8008410 <_strtod_l+0x8d8>
 800832c:	9905      	ldr	r1, [sp, #20]
 800832e:	464b      	mov	r3, r9
 8008330:	4a20      	ldr	r2, [pc, #128]	; (80083b4 <_strtod_l+0x87c>)
 8008332:	2900      	cmp	r1, #0
 8008334:	f000 808c 	beq.w	8008450 <_strtod_l+0x918>
 8008338:	ea02 0109 	and.w	r1, r2, r9
 800833c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008340:	f300 8086 	bgt.w	8008450 <_strtod_l+0x918>
 8008344:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008348:	f77f aeaa 	ble.w	80080a0 <_strtod_l+0x568>
 800834c:	4640      	mov	r0, r8
 800834e:	4649      	mov	r1, r9
 8008350:	4b19      	ldr	r3, [pc, #100]	; (80083b8 <_strtod_l+0x880>)
 8008352:	2200      	movs	r2, #0
 8008354:	f7f8 f8c0 	bl	80004d8 <__aeabi_dmul>
 8008358:	460b      	mov	r3, r1
 800835a:	4303      	orrs	r3, r0
 800835c:	bf08      	it	eq
 800835e:	2322      	moveq	r3, #34	; 0x22
 8008360:	4680      	mov	r8, r0
 8008362:	4689      	mov	r9, r1
 8008364:	bf08      	it	eq
 8008366:	f8ca 3000 	streq.w	r3, [sl]
 800836a:	e62f      	b.n	8007fcc <_strtod_l+0x494>
 800836c:	f04f 32ff 	mov.w	r2, #4294967295
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	ea03 0808 	and.w	r8, r3, r8
 8008378:	e6e0      	b.n	800813c <_strtod_l+0x604>
 800837a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800837e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008382:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008386:	35e2      	adds	r5, #226	; 0xe2
 8008388:	fa07 f505 	lsl.w	r5, r7, r5
 800838c:	970f      	str	r7, [sp, #60]	; 0x3c
 800838e:	e747      	b.n	8008220 <_strtod_l+0x6e8>
 8008390:	2301      	movs	r3, #1
 8008392:	2500      	movs	r5, #0
 8008394:	930f      	str	r3, [sp, #60]	; 0x3c
 8008396:	e743      	b.n	8008220 <_strtod_l+0x6e8>
 8008398:	463a      	mov	r2, r7
 800839a:	4650      	mov	r0, sl
 800839c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800839e:	f001 ff9b 	bl	800a2d8 <__lshift>
 80083a2:	901a      	str	r0, [sp, #104]	; 0x68
 80083a4:	2800      	cmp	r0, #0
 80083a6:	f47f af69 	bne.w	800827c <_strtod_l+0x744>
 80083aa:	e604      	b.n	8007fb6 <_strtod_l+0x47e>
 80083ac:	0800b3d0 	.word	0x0800b3d0
 80083b0:	fffffc02 	.word	0xfffffc02
 80083b4:	7ff00000 	.word	0x7ff00000
 80083b8:	39500000 	.word	0x39500000
 80083bc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80083c0:	d165      	bne.n	800848e <_strtod_l+0x956>
 80083c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083c8:	b35a      	cbz	r2, 8008422 <_strtod_l+0x8ea>
 80083ca:	4a99      	ldr	r2, [pc, #612]	; (8008630 <_strtod_l+0xaf8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d12b      	bne.n	8008428 <_strtod_l+0x8f0>
 80083d0:	9b05      	ldr	r3, [sp, #20]
 80083d2:	4641      	mov	r1, r8
 80083d4:	b303      	cbz	r3, 8008418 <_strtod_l+0x8e0>
 80083d6:	464a      	mov	r2, r9
 80083d8:	4b96      	ldr	r3, [pc, #600]	; (8008634 <_strtod_l+0xafc>)
 80083da:	4013      	ands	r3, r2
 80083dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80083e0:	f04f 32ff 	mov.w	r2, #4294967295
 80083e4:	d81b      	bhi.n	800841e <_strtod_l+0x8e6>
 80083e6:	0d1b      	lsrs	r3, r3, #20
 80083e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083ec:	fa02 f303 	lsl.w	r3, r2, r3
 80083f0:	4299      	cmp	r1, r3
 80083f2:	d119      	bne.n	8008428 <_strtod_l+0x8f0>
 80083f4:	4b90      	ldr	r3, [pc, #576]	; (8008638 <_strtod_l+0xb00>)
 80083f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d102      	bne.n	8008402 <_strtod_l+0x8ca>
 80083fc:	3101      	adds	r1, #1
 80083fe:	f43f adda 	beq.w	8007fb6 <_strtod_l+0x47e>
 8008402:	f04f 0800 	mov.w	r8, #0
 8008406:	4b8b      	ldr	r3, [pc, #556]	; (8008634 <_strtod_l+0xafc>)
 8008408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800840a:	401a      	ands	r2, r3
 800840c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008410:	9b05      	ldr	r3, [sp, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d19a      	bne.n	800834c <_strtod_l+0x814>
 8008416:	e5d9      	b.n	8007fcc <_strtod_l+0x494>
 8008418:	f04f 33ff 	mov.w	r3, #4294967295
 800841c:	e7e8      	b.n	80083f0 <_strtod_l+0x8b8>
 800841e:	4613      	mov	r3, r2
 8008420:	e7e6      	b.n	80083f0 <_strtod_l+0x8b8>
 8008422:	ea53 0308 	orrs.w	r3, r3, r8
 8008426:	d081      	beq.n	800832c <_strtod_l+0x7f4>
 8008428:	b1e5      	cbz	r5, 8008464 <_strtod_l+0x92c>
 800842a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842c:	421d      	tst	r5, r3
 800842e:	d0ef      	beq.n	8008410 <_strtod_l+0x8d8>
 8008430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008432:	4640      	mov	r0, r8
 8008434:	4649      	mov	r1, r9
 8008436:	9a05      	ldr	r2, [sp, #20]
 8008438:	b1c3      	cbz	r3, 800846c <_strtod_l+0x934>
 800843a:	f7ff fb5a 	bl	8007af2 <sulp>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008446:	f7f7 fe91 	bl	800016c <__adddf3>
 800844a:	4680      	mov	r8, r0
 800844c:	4689      	mov	r9, r1
 800844e:	e7df      	b.n	8008410 <_strtod_l+0x8d8>
 8008450:	4013      	ands	r3, r2
 8008452:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008456:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800845a:	f04f 38ff 	mov.w	r8, #4294967295
 800845e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008462:	e7d5      	b.n	8008410 <_strtod_l+0x8d8>
 8008464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008466:	ea13 0f08 	tst.w	r3, r8
 800846a:	e7e0      	b.n	800842e <_strtod_l+0x8f6>
 800846c:	f7ff fb41 	bl	8007af2 <sulp>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008478:	f7f7 fe76 	bl	8000168 <__aeabi_dsub>
 800847c:	2200      	movs	r2, #0
 800847e:	2300      	movs	r3, #0
 8008480:	4680      	mov	r8, r0
 8008482:	4689      	mov	r9, r1
 8008484:	f7f8 fa90 	bl	80009a8 <__aeabi_dcmpeq>
 8008488:	2800      	cmp	r0, #0
 800848a:	d0c1      	beq.n	8008410 <_strtod_l+0x8d8>
 800848c:	e608      	b.n	80080a0 <_strtod_l+0x568>
 800848e:	4658      	mov	r0, fp
 8008490:	9904      	ldr	r1, [sp, #16]
 8008492:	f002 f90f 	bl	800a6b4 <__ratio>
 8008496:	2200      	movs	r2, #0
 8008498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800849c:	4606      	mov	r6, r0
 800849e:	460f      	mov	r7, r1
 80084a0:	f7f8 fa96 	bl	80009d0 <__aeabi_dcmple>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d070      	beq.n	800858a <_strtod_l+0xa52>
 80084a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d042      	beq.n	8008534 <_strtod_l+0x9fc>
 80084ae:	2600      	movs	r6, #0
 80084b0:	4f62      	ldr	r7, [pc, #392]	; (800863c <_strtod_l+0xb04>)
 80084b2:	4d62      	ldr	r5, [pc, #392]	; (800863c <_strtod_l+0xb04>)
 80084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084ba:	0d1b      	lsrs	r3, r3, #20
 80084bc:	051b      	lsls	r3, r3, #20
 80084be:	930f      	str	r3, [sp, #60]	; 0x3c
 80084c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084c2:	4b5f      	ldr	r3, [pc, #380]	; (8008640 <_strtod_l+0xb08>)
 80084c4:	429a      	cmp	r2, r3
 80084c6:	f040 80c3 	bne.w	8008650 <_strtod_l+0xb18>
 80084ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084cc:	4640      	mov	r0, r8
 80084ce:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80084d2:	4649      	mov	r1, r9
 80084d4:	f002 f818 	bl	800a508 <__ulp>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f7 fffa 	bl	80004d8 <__aeabi_dmul>
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	f7f7 fe40 	bl	800016c <__adddf3>
 80084ec:	460b      	mov	r3, r1
 80084ee:	4951      	ldr	r1, [pc, #324]	; (8008634 <_strtod_l+0xafc>)
 80084f0:	4a54      	ldr	r2, [pc, #336]	; (8008644 <_strtod_l+0xb0c>)
 80084f2:	4019      	ands	r1, r3
 80084f4:	4291      	cmp	r1, r2
 80084f6:	4680      	mov	r8, r0
 80084f8:	d95d      	bls.n	80085b6 <_strtod_l+0xa7e>
 80084fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084fc:	4b4e      	ldr	r3, [pc, #312]	; (8008638 <_strtod_l+0xb00>)
 80084fe:	429a      	cmp	r2, r3
 8008500:	d103      	bne.n	800850a <_strtod_l+0x9d2>
 8008502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008504:	3301      	adds	r3, #1
 8008506:	f43f ad56 	beq.w	8007fb6 <_strtod_l+0x47e>
 800850a:	f04f 38ff 	mov.w	r8, #4294967295
 800850e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008638 <_strtod_l+0xb00>
 8008512:	4650      	mov	r0, sl
 8008514:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008516:	f001 fcc7 	bl	8009ea8 <_Bfree>
 800851a:	4650      	mov	r0, sl
 800851c:	9906      	ldr	r1, [sp, #24]
 800851e:	f001 fcc3 	bl	8009ea8 <_Bfree>
 8008522:	4650      	mov	r0, sl
 8008524:	9904      	ldr	r1, [sp, #16]
 8008526:	f001 fcbf 	bl	8009ea8 <_Bfree>
 800852a:	4659      	mov	r1, fp
 800852c:	4650      	mov	r0, sl
 800852e:	f001 fcbb 	bl	8009ea8 <_Bfree>
 8008532:	e627      	b.n	8008184 <_strtod_l+0x64c>
 8008534:	f1b8 0f00 	cmp.w	r8, #0
 8008538:	d119      	bne.n	800856e <_strtod_l+0xa36>
 800853a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008540:	b9e3      	cbnz	r3, 800857c <_strtod_l+0xa44>
 8008542:	2200      	movs	r2, #0
 8008544:	4630      	mov	r0, r6
 8008546:	4639      	mov	r1, r7
 8008548:	4b3c      	ldr	r3, [pc, #240]	; (800863c <_strtod_l+0xb04>)
 800854a:	f7f8 fa37 	bl	80009bc <__aeabi_dcmplt>
 800854e:	b9c8      	cbnz	r0, 8008584 <_strtod_l+0xa4c>
 8008550:	2200      	movs	r2, #0
 8008552:	4630      	mov	r0, r6
 8008554:	4639      	mov	r1, r7
 8008556:	4b3c      	ldr	r3, [pc, #240]	; (8008648 <_strtod_l+0xb10>)
 8008558:	f7f7 ffbe 	bl	80004d8 <__aeabi_dmul>
 800855c:	4604      	mov	r4, r0
 800855e:	460d      	mov	r5, r1
 8008560:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008564:	9416      	str	r4, [sp, #88]	; 0x58
 8008566:	9317      	str	r3, [sp, #92]	; 0x5c
 8008568:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800856c:	e7a2      	b.n	80084b4 <_strtod_l+0x97c>
 800856e:	f1b8 0f01 	cmp.w	r8, #1
 8008572:	d103      	bne.n	800857c <_strtod_l+0xa44>
 8008574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008576:	2b00      	cmp	r3, #0
 8008578:	f43f ad92 	beq.w	80080a0 <_strtod_l+0x568>
 800857c:	2600      	movs	r6, #0
 800857e:	2400      	movs	r4, #0
 8008580:	4f32      	ldr	r7, [pc, #200]	; (800864c <_strtod_l+0xb14>)
 8008582:	e796      	b.n	80084b2 <_strtod_l+0x97a>
 8008584:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008586:	4d30      	ldr	r5, [pc, #192]	; (8008648 <_strtod_l+0xb10>)
 8008588:	e7ea      	b.n	8008560 <_strtod_l+0xa28>
 800858a:	4b2f      	ldr	r3, [pc, #188]	; (8008648 <_strtod_l+0xb10>)
 800858c:	2200      	movs	r2, #0
 800858e:	4630      	mov	r0, r6
 8008590:	4639      	mov	r1, r7
 8008592:	f7f7 ffa1 	bl	80004d8 <__aeabi_dmul>
 8008596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008598:	4604      	mov	r4, r0
 800859a:	460d      	mov	r5, r1
 800859c:	b933      	cbnz	r3, 80085ac <_strtod_l+0xa74>
 800859e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085a2:	9010      	str	r0, [sp, #64]	; 0x40
 80085a4:	9311      	str	r3, [sp, #68]	; 0x44
 80085a6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80085aa:	e783      	b.n	80084b4 <_strtod_l+0x97c>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80085b4:	e7f7      	b.n	80085a6 <_strtod_l+0xa6e>
 80085b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80085ba:	9b05      	ldr	r3, [sp, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1a8      	bne.n	8008512 <_strtod_l+0x9da>
 80085c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085c6:	0d1b      	lsrs	r3, r3, #20
 80085c8:	051b      	lsls	r3, r3, #20
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d1a1      	bne.n	8008512 <_strtod_l+0x9da>
 80085ce:	4620      	mov	r0, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	f7f8 fac9 	bl	8000b68 <__aeabi_d2lz>
 80085d6:	f7f7 ff51 	bl	800047c <__aeabi_l2d>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4620      	mov	r0, r4
 80085e0:	4629      	mov	r1, r5
 80085e2:	f7f7 fdc1 	bl	8000168 <__aeabi_dsub>
 80085e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085ec:	ea43 0308 	orr.w	r3, r3, r8
 80085f0:	4313      	orrs	r3, r2
 80085f2:	4604      	mov	r4, r0
 80085f4:	460d      	mov	r5, r1
 80085f6:	d066      	beq.n	80086c6 <_strtod_l+0xb8e>
 80085f8:	a309      	add	r3, pc, #36	; (adr r3, 8008620 <_strtod_l+0xae8>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f7f8 f9dd 	bl	80009bc <__aeabi_dcmplt>
 8008602:	2800      	cmp	r0, #0
 8008604:	f47f ace2 	bne.w	8007fcc <_strtod_l+0x494>
 8008608:	a307      	add	r3, pc, #28	; (adr r3, 8008628 <_strtod_l+0xaf0>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f8 f9f1 	bl	80009f8 <__aeabi_dcmpgt>
 8008616:	2800      	cmp	r0, #0
 8008618:	f43f af7b 	beq.w	8008512 <_strtod_l+0x9da>
 800861c:	e4d6      	b.n	8007fcc <_strtod_l+0x494>
 800861e:	bf00      	nop
 8008620:	94a03595 	.word	0x94a03595
 8008624:	3fdfffff 	.word	0x3fdfffff
 8008628:	35afe535 	.word	0x35afe535
 800862c:	3fe00000 	.word	0x3fe00000
 8008630:	000fffff 	.word	0x000fffff
 8008634:	7ff00000 	.word	0x7ff00000
 8008638:	7fefffff 	.word	0x7fefffff
 800863c:	3ff00000 	.word	0x3ff00000
 8008640:	7fe00000 	.word	0x7fe00000
 8008644:	7c9fffff 	.word	0x7c9fffff
 8008648:	3fe00000 	.word	0x3fe00000
 800864c:	bff00000 	.word	0xbff00000
 8008650:	9b05      	ldr	r3, [sp, #20]
 8008652:	b313      	cbz	r3, 800869a <_strtod_l+0xb62>
 8008654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008656:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800865a:	d81e      	bhi.n	800869a <_strtod_l+0xb62>
 800865c:	a326      	add	r3, pc, #152	; (adr r3, 80086f8 <_strtod_l+0xbc0>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	4620      	mov	r0, r4
 8008664:	4629      	mov	r1, r5
 8008666:	f7f8 f9b3 	bl	80009d0 <__aeabi_dcmple>
 800866a:	b190      	cbz	r0, 8008692 <_strtod_l+0xb5a>
 800866c:	4629      	mov	r1, r5
 800866e:	4620      	mov	r0, r4
 8008670:	f7f8 fa0a 	bl	8000a88 <__aeabi_d2uiz>
 8008674:	2801      	cmp	r0, #1
 8008676:	bf38      	it	cc
 8008678:	2001      	movcc	r0, #1
 800867a:	f7f7 feb3 	bl	80003e4 <__aeabi_ui2d>
 800867e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008680:	4604      	mov	r4, r0
 8008682:	460d      	mov	r5, r1
 8008684:	b9d3      	cbnz	r3, 80086bc <_strtod_l+0xb84>
 8008686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800868a:	9012      	str	r0, [sp, #72]	; 0x48
 800868c:	9313      	str	r3, [sp, #76]	; 0x4c
 800868e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008692:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008694:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008698:	1a9f      	subs	r7, r3, r2
 800869a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800869e:	f001 ff33 	bl	800a508 <__ulp>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4630      	mov	r0, r6
 80086a8:	4639      	mov	r1, r7
 80086aa:	f7f7 ff15 	bl	80004d8 <__aeabi_dmul>
 80086ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086b2:	f7f7 fd5b 	bl	800016c <__adddf3>
 80086b6:	4680      	mov	r8, r0
 80086b8:	4689      	mov	r9, r1
 80086ba:	e77e      	b.n	80085ba <_strtod_l+0xa82>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80086c4:	e7e3      	b.n	800868e <_strtod_l+0xb56>
 80086c6:	a30e      	add	r3, pc, #56	; (adr r3, 8008700 <_strtod_l+0xbc8>)
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f7f8 f976 	bl	80009bc <__aeabi_dcmplt>
 80086d0:	e7a1      	b.n	8008616 <_strtod_l+0xade>
 80086d2:	2300      	movs	r3, #0
 80086d4:	930a      	str	r3, [sp, #40]	; 0x28
 80086d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	f7ff ba71 	b.w	8007bc2 <_strtod_l+0x8a>
 80086e0:	2a65      	cmp	r2, #101	; 0x65
 80086e2:	f43f ab63 	beq.w	8007dac <_strtod_l+0x274>
 80086e6:	2a45      	cmp	r2, #69	; 0x45
 80086e8:	f43f ab60 	beq.w	8007dac <_strtod_l+0x274>
 80086ec:	2301      	movs	r3, #1
 80086ee:	f7ff bb95 	b.w	8007e1c <_strtod_l+0x2e4>
 80086f2:	bf00      	nop
 80086f4:	f3af 8000 	nop.w
 80086f8:	ffc00000 	.word	0xffc00000
 80086fc:	41dfffff 	.word	0x41dfffff
 8008700:	94a03595 	.word	0x94a03595
 8008704:	3fcfffff 	.word	0x3fcfffff

08008708 <_strtod_r>:
 8008708:	4b01      	ldr	r3, [pc, #4]	; (8008710 <_strtod_r+0x8>)
 800870a:	f7ff ba15 	b.w	8007b38 <_strtod_l>
 800870e:	bf00      	nop
 8008710:	20000078 	.word	0x20000078

08008714 <_strtol_l.constprop.0>:
 8008714:	2b01      	cmp	r3, #1
 8008716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800871a:	4680      	mov	r8, r0
 800871c:	d001      	beq.n	8008722 <_strtol_l.constprop.0+0xe>
 800871e:	2b24      	cmp	r3, #36	; 0x24
 8008720:	d906      	bls.n	8008730 <_strtol_l.constprop.0+0x1c>
 8008722:	f7fe f895 	bl	8006850 <__errno>
 8008726:	2316      	movs	r3, #22
 8008728:	6003      	str	r3, [r0, #0]
 800872a:	2000      	movs	r0, #0
 800872c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008730:	460d      	mov	r5, r1
 8008732:	4f35      	ldr	r7, [pc, #212]	; (8008808 <_strtol_l.constprop.0+0xf4>)
 8008734:	4628      	mov	r0, r5
 8008736:	f815 4b01 	ldrb.w	r4, [r5], #1
 800873a:	5de6      	ldrb	r6, [r4, r7]
 800873c:	f016 0608 	ands.w	r6, r6, #8
 8008740:	d1f8      	bne.n	8008734 <_strtol_l.constprop.0+0x20>
 8008742:	2c2d      	cmp	r4, #45	; 0x2d
 8008744:	d12f      	bne.n	80087a6 <_strtol_l.constprop.0+0x92>
 8008746:	2601      	movs	r6, #1
 8008748:	782c      	ldrb	r4, [r5, #0]
 800874a:	1c85      	adds	r5, r0, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d057      	beq.n	8008800 <_strtol_l.constprop.0+0xec>
 8008750:	2b10      	cmp	r3, #16
 8008752:	d109      	bne.n	8008768 <_strtol_l.constprop.0+0x54>
 8008754:	2c30      	cmp	r4, #48	; 0x30
 8008756:	d107      	bne.n	8008768 <_strtol_l.constprop.0+0x54>
 8008758:	7828      	ldrb	r0, [r5, #0]
 800875a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800875e:	2858      	cmp	r0, #88	; 0x58
 8008760:	d149      	bne.n	80087f6 <_strtol_l.constprop.0+0xe2>
 8008762:	2310      	movs	r3, #16
 8008764:	786c      	ldrb	r4, [r5, #1]
 8008766:	3502      	adds	r5, #2
 8008768:	2700      	movs	r7, #0
 800876a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800876e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008772:	fbbe f9f3 	udiv	r9, lr, r3
 8008776:	4638      	mov	r0, r7
 8008778:	fb03 ea19 	mls	sl, r3, r9, lr
 800877c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008780:	f1bc 0f09 	cmp.w	ip, #9
 8008784:	d814      	bhi.n	80087b0 <_strtol_l.constprop.0+0x9c>
 8008786:	4664      	mov	r4, ip
 8008788:	42a3      	cmp	r3, r4
 800878a:	dd22      	ble.n	80087d2 <_strtol_l.constprop.0+0xbe>
 800878c:	2f00      	cmp	r7, #0
 800878e:	db1d      	blt.n	80087cc <_strtol_l.constprop.0+0xb8>
 8008790:	4581      	cmp	r9, r0
 8008792:	d31b      	bcc.n	80087cc <_strtol_l.constprop.0+0xb8>
 8008794:	d101      	bne.n	800879a <_strtol_l.constprop.0+0x86>
 8008796:	45a2      	cmp	sl, r4
 8008798:	db18      	blt.n	80087cc <_strtol_l.constprop.0+0xb8>
 800879a:	2701      	movs	r7, #1
 800879c:	fb00 4003 	mla	r0, r0, r3, r4
 80087a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087a4:	e7ea      	b.n	800877c <_strtol_l.constprop.0+0x68>
 80087a6:	2c2b      	cmp	r4, #43	; 0x2b
 80087a8:	bf04      	itt	eq
 80087aa:	782c      	ldrbeq	r4, [r5, #0]
 80087ac:	1c85      	addeq	r5, r0, #2
 80087ae:	e7cd      	b.n	800874c <_strtol_l.constprop.0+0x38>
 80087b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80087b4:	f1bc 0f19 	cmp.w	ip, #25
 80087b8:	d801      	bhi.n	80087be <_strtol_l.constprop.0+0xaa>
 80087ba:	3c37      	subs	r4, #55	; 0x37
 80087bc:	e7e4      	b.n	8008788 <_strtol_l.constprop.0+0x74>
 80087be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80087c2:	f1bc 0f19 	cmp.w	ip, #25
 80087c6:	d804      	bhi.n	80087d2 <_strtol_l.constprop.0+0xbe>
 80087c8:	3c57      	subs	r4, #87	; 0x57
 80087ca:	e7dd      	b.n	8008788 <_strtol_l.constprop.0+0x74>
 80087cc:	f04f 37ff 	mov.w	r7, #4294967295
 80087d0:	e7e6      	b.n	80087a0 <_strtol_l.constprop.0+0x8c>
 80087d2:	2f00      	cmp	r7, #0
 80087d4:	da07      	bge.n	80087e6 <_strtol_l.constprop.0+0xd2>
 80087d6:	2322      	movs	r3, #34	; 0x22
 80087d8:	4670      	mov	r0, lr
 80087da:	f8c8 3000 	str.w	r3, [r8]
 80087de:	2a00      	cmp	r2, #0
 80087e0:	d0a4      	beq.n	800872c <_strtol_l.constprop.0+0x18>
 80087e2:	1e69      	subs	r1, r5, #1
 80087e4:	e005      	b.n	80087f2 <_strtol_l.constprop.0+0xde>
 80087e6:	b106      	cbz	r6, 80087ea <_strtol_l.constprop.0+0xd6>
 80087e8:	4240      	negs	r0, r0
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	d09e      	beq.n	800872c <_strtol_l.constprop.0+0x18>
 80087ee:	2f00      	cmp	r7, #0
 80087f0:	d1f7      	bne.n	80087e2 <_strtol_l.constprop.0+0xce>
 80087f2:	6011      	str	r1, [r2, #0]
 80087f4:	e79a      	b.n	800872c <_strtol_l.constprop.0+0x18>
 80087f6:	2430      	movs	r4, #48	; 0x30
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1b5      	bne.n	8008768 <_strtol_l.constprop.0+0x54>
 80087fc:	2308      	movs	r3, #8
 80087fe:	e7b3      	b.n	8008768 <_strtol_l.constprop.0+0x54>
 8008800:	2c30      	cmp	r4, #48	; 0x30
 8008802:	d0a9      	beq.n	8008758 <_strtol_l.constprop.0+0x44>
 8008804:	230a      	movs	r3, #10
 8008806:	e7af      	b.n	8008768 <_strtol_l.constprop.0+0x54>
 8008808:	0800b3f9 	.word	0x0800b3f9

0800880c <_strtol_r>:
 800880c:	f7ff bf82 	b.w	8008714 <_strtol_l.constprop.0>

08008810 <_write_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	4611      	mov	r1, r2
 8008818:	2200      	movs	r2, #0
 800881a:	4d05      	ldr	r5, [pc, #20]	; (8008830 <_write_r+0x20>)
 800881c:	602a      	str	r2, [r5, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	f7f8 fdc6 	bl	80013b0 <_write>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_write_r+0x1e>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_write_r+0x1e>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	20001328 	.word	0x20001328

08008834 <_close_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	2300      	movs	r3, #0
 8008838:	4d05      	ldr	r5, [pc, #20]	; (8008850 <_close_r+0x1c>)
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	f7f8 fdd2 	bl	80013e8 <_close>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_close_r+0x1a>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_close_r+0x1a>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	20001328 	.word	0x20001328

08008854 <quorem>:
 8008854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	6903      	ldr	r3, [r0, #16]
 800885a:	690c      	ldr	r4, [r1, #16]
 800885c:	4607      	mov	r7, r0
 800885e:	42a3      	cmp	r3, r4
 8008860:	f2c0 8082 	blt.w	8008968 <quorem+0x114>
 8008864:	3c01      	subs	r4, #1
 8008866:	f100 0514 	add.w	r5, r0, #20
 800886a:	f101 0814 	add.w	r8, r1, #20
 800886e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800887c:	3301      	adds	r3, #1
 800887e:	429a      	cmp	r2, r3
 8008880:	fbb2 f6f3 	udiv	r6, r2, r3
 8008884:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008888:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800888c:	d331      	bcc.n	80088f2 <quorem+0x9e>
 800888e:	f04f 0e00 	mov.w	lr, #0
 8008892:	4640      	mov	r0, r8
 8008894:	46ac      	mov	ip, r5
 8008896:	46f2      	mov	sl, lr
 8008898:	f850 2b04 	ldr.w	r2, [r0], #4
 800889c:	b293      	uxth	r3, r2
 800889e:	fb06 e303 	mla	r3, r6, r3, lr
 80088a2:	0c12      	lsrs	r2, r2, #16
 80088a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	fb06 e202 	mla	r2, r6, r2, lr
 80088ae:	ebaa 0303 	sub.w	r3, sl, r3
 80088b2:	f8dc a000 	ldr.w	sl, [ip]
 80088b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088ba:	fa1f fa8a 	uxth.w	sl, sl
 80088be:	4453      	add	r3, sl
 80088c0:	f8dc a000 	ldr.w	sl, [ip]
 80088c4:	b292      	uxth	r2, r2
 80088c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088d4:	4581      	cmp	r9, r0
 80088d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088da:	f84c 3b04 	str.w	r3, [ip], #4
 80088de:	d2db      	bcs.n	8008898 <quorem+0x44>
 80088e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80088e4:	b92b      	cbnz	r3, 80088f2 <quorem+0x9e>
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	3b04      	subs	r3, #4
 80088ea:	429d      	cmp	r5, r3
 80088ec:	461a      	mov	r2, r3
 80088ee:	d32f      	bcc.n	8008950 <quorem+0xfc>
 80088f0:	613c      	str	r4, [r7, #16]
 80088f2:	4638      	mov	r0, r7
 80088f4:	f001 fd60 	bl	800a3b8 <__mcmp>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	db25      	blt.n	8008948 <quorem+0xf4>
 80088fc:	4628      	mov	r0, r5
 80088fe:	f04f 0c00 	mov.w	ip, #0
 8008902:	3601      	adds	r6, #1
 8008904:	f858 1b04 	ldr.w	r1, [r8], #4
 8008908:	f8d0 e000 	ldr.w	lr, [r0]
 800890c:	b28b      	uxth	r3, r1
 800890e:	ebac 0303 	sub.w	r3, ip, r3
 8008912:	fa1f f28e 	uxth.w	r2, lr
 8008916:	4413      	add	r3, r2
 8008918:	0c0a      	lsrs	r2, r1, #16
 800891a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800891e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008922:	b29b      	uxth	r3, r3
 8008924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008928:	45c1      	cmp	r9, r8
 800892a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800892e:	f840 3b04 	str.w	r3, [r0], #4
 8008932:	d2e7      	bcs.n	8008904 <quorem+0xb0>
 8008934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008938:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800893c:	b922      	cbnz	r2, 8008948 <quorem+0xf4>
 800893e:	3b04      	subs	r3, #4
 8008940:	429d      	cmp	r5, r3
 8008942:	461a      	mov	r2, r3
 8008944:	d30a      	bcc.n	800895c <quorem+0x108>
 8008946:	613c      	str	r4, [r7, #16]
 8008948:	4630      	mov	r0, r6
 800894a:	b003      	add	sp, #12
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	6812      	ldr	r2, [r2, #0]
 8008952:	3b04      	subs	r3, #4
 8008954:	2a00      	cmp	r2, #0
 8008956:	d1cb      	bne.n	80088f0 <quorem+0x9c>
 8008958:	3c01      	subs	r4, #1
 800895a:	e7c6      	b.n	80088ea <quorem+0x96>
 800895c:	6812      	ldr	r2, [r2, #0]
 800895e:	3b04      	subs	r3, #4
 8008960:	2a00      	cmp	r2, #0
 8008962:	d1f0      	bne.n	8008946 <quorem+0xf2>
 8008964:	3c01      	subs	r4, #1
 8008966:	e7eb      	b.n	8008940 <quorem+0xec>
 8008968:	2000      	movs	r0, #0
 800896a:	e7ee      	b.n	800894a <quorem+0xf6>
 800896c:	0000      	movs	r0, r0
	...

08008970 <_dtoa_r>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	4616      	mov	r6, r2
 8008976:	461f      	mov	r7, r3
 8008978:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800897a:	b099      	sub	sp, #100	; 0x64
 800897c:	4605      	mov	r5, r0
 800897e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008982:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008986:	b974      	cbnz	r4, 80089a6 <_dtoa_r+0x36>
 8008988:	2010      	movs	r0, #16
 800898a:	f001 fa19 	bl	8009dc0 <malloc>
 800898e:	4602      	mov	r2, r0
 8008990:	6268      	str	r0, [r5, #36]	; 0x24
 8008992:	b920      	cbnz	r0, 800899e <_dtoa_r+0x2e>
 8008994:	21ea      	movs	r1, #234	; 0xea
 8008996:	4ba8      	ldr	r3, [pc, #672]	; (8008c38 <_dtoa_r+0x2c8>)
 8008998:	48a8      	ldr	r0, [pc, #672]	; (8008c3c <_dtoa_r+0x2cc>)
 800899a:	f002 f8ef 	bl	800ab7c <__assert_func>
 800899e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089a2:	6004      	str	r4, [r0, #0]
 80089a4:	60c4      	str	r4, [r0, #12]
 80089a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	b151      	cbz	r1, 80089c2 <_dtoa_r+0x52>
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	2301      	movs	r3, #1
 80089b0:	4093      	lsls	r3, r2
 80089b2:	604a      	str	r2, [r1, #4]
 80089b4:	608b      	str	r3, [r1, #8]
 80089b6:	4628      	mov	r0, r5
 80089b8:	f001 fa76 	bl	8009ea8 <_Bfree>
 80089bc:	2200      	movs	r2, #0
 80089be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	1e3b      	subs	r3, r7, #0
 80089c4:	bfaf      	iteee	ge
 80089c6:	2300      	movge	r3, #0
 80089c8:	2201      	movlt	r2, #1
 80089ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089ce:	9305      	strlt	r3, [sp, #20]
 80089d0:	bfa8      	it	ge
 80089d2:	f8c8 3000 	strge.w	r3, [r8]
 80089d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80089da:	4b99      	ldr	r3, [pc, #612]	; (8008c40 <_dtoa_r+0x2d0>)
 80089dc:	bfb8      	it	lt
 80089de:	f8c8 2000 	strlt.w	r2, [r8]
 80089e2:	ea33 0309 	bics.w	r3, r3, r9
 80089e6:	d119      	bne.n	8008a1c <_dtoa_r+0xac>
 80089e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80089ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089f4:	4333      	orrs	r3, r6
 80089f6:	f000 857f 	beq.w	80094f8 <_dtoa_r+0xb88>
 80089fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089fc:	b953      	cbnz	r3, 8008a14 <_dtoa_r+0xa4>
 80089fe:	4b91      	ldr	r3, [pc, #580]	; (8008c44 <_dtoa_r+0x2d4>)
 8008a00:	e022      	b.n	8008a48 <_dtoa_r+0xd8>
 8008a02:	4b91      	ldr	r3, [pc, #580]	; (8008c48 <_dtoa_r+0x2d8>)
 8008a04:	9303      	str	r3, [sp, #12]
 8008a06:	3308      	adds	r3, #8
 8008a08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	9803      	ldr	r0, [sp, #12]
 8008a0e:	b019      	add	sp, #100	; 0x64
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	4b8b      	ldr	r3, [pc, #556]	; (8008c44 <_dtoa_r+0x2d4>)
 8008a16:	9303      	str	r3, [sp, #12]
 8008a18:	3303      	adds	r3, #3
 8008a1a:	e7f5      	b.n	8008a08 <_dtoa_r+0x98>
 8008a1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008a20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008a24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f7f7 ffbc 	bl	80009a8 <__aeabi_dcmpeq>
 8008a30:	4680      	mov	r8, r0
 8008a32:	b158      	cbz	r0, 8008a4c <_dtoa_r+0xdc>
 8008a34:	2301      	movs	r3, #1
 8008a36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8558 	beq.w	80094f2 <_dtoa_r+0xb82>
 8008a42:	4882      	ldr	r0, [pc, #520]	; (8008c4c <_dtoa_r+0x2dc>)
 8008a44:	6018      	str	r0, [r3, #0]
 8008a46:	1e43      	subs	r3, r0, #1
 8008a48:	9303      	str	r3, [sp, #12]
 8008a4a:	e7df      	b.n	8008a0c <_dtoa_r+0x9c>
 8008a4c:	ab16      	add	r3, sp, #88	; 0x58
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	ab17      	add	r3, sp, #92	; 0x5c
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	4628      	mov	r0, r5
 8008a56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a5a:	f001 fdcf 	bl	800a5fc <__d2b>
 8008a5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008a62:	4683      	mov	fp, r0
 8008a64:	2c00      	cmp	r4, #0
 8008a66:	d07f      	beq.n	8008b68 <_dtoa_r+0x1f8>
 8008a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008a7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008a7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008a82:	2200      	movs	r2, #0
 8008a84:	4b72      	ldr	r3, [pc, #456]	; (8008c50 <_dtoa_r+0x2e0>)
 8008a86:	f7f7 fb6f 	bl	8000168 <__aeabi_dsub>
 8008a8a:	a365      	add	r3, pc, #404	; (adr r3, 8008c20 <_dtoa_r+0x2b0>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fd22 	bl	80004d8 <__aeabi_dmul>
 8008a94:	a364      	add	r3, pc, #400	; (adr r3, 8008c28 <_dtoa_r+0x2b8>)
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	f7f7 fb67 	bl	800016c <__adddf3>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	f7f7 fcae 	bl	8000404 <__aeabi_i2d>
 8008aa8:	a361      	add	r3, pc, #388	; (adr r3, 8008c30 <_dtoa_r+0x2c0>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f7f7 fd13 	bl	80004d8 <__aeabi_dmul>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	4639      	mov	r1, r7
 8008aba:	f7f7 fb57 	bl	800016c <__adddf3>
 8008abe:	4606      	mov	r6, r0
 8008ac0:	460f      	mov	r7, r1
 8008ac2:	f7f7 ffb9 	bl	8000a38 <__aeabi_d2iz>
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	4682      	mov	sl, r0
 8008aca:	2300      	movs	r3, #0
 8008acc:	4630      	mov	r0, r6
 8008ace:	4639      	mov	r1, r7
 8008ad0:	f7f7 ff74 	bl	80009bc <__aeabi_dcmplt>
 8008ad4:	b148      	cbz	r0, 8008aea <_dtoa_r+0x17a>
 8008ad6:	4650      	mov	r0, sl
 8008ad8:	f7f7 fc94 	bl	8000404 <__aeabi_i2d>
 8008adc:	4632      	mov	r2, r6
 8008ade:	463b      	mov	r3, r7
 8008ae0:	f7f7 ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8008ae4:	b908      	cbnz	r0, 8008aea <_dtoa_r+0x17a>
 8008ae6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aea:	f1ba 0f16 	cmp.w	sl, #22
 8008aee:	d858      	bhi.n	8008ba2 <_dtoa_r+0x232>
 8008af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008af4:	4b57      	ldr	r3, [pc, #348]	; (8008c54 <_dtoa_r+0x2e4>)
 8008af6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f7f7 ff5d 	bl	80009bc <__aeabi_dcmplt>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d04f      	beq.n	8008ba6 <_dtoa_r+0x236>
 8008b06:	2300      	movs	r3, #0
 8008b08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b10:	1b1c      	subs	r4, r3, r4
 8008b12:	1e63      	subs	r3, r4, #1
 8008b14:	9309      	str	r3, [sp, #36]	; 0x24
 8008b16:	bf49      	itett	mi
 8008b18:	f1c4 0301 	rsbmi	r3, r4, #1
 8008b1c:	2300      	movpl	r3, #0
 8008b1e:	9306      	strmi	r3, [sp, #24]
 8008b20:	2300      	movmi	r3, #0
 8008b22:	bf54      	ite	pl
 8008b24:	9306      	strpl	r3, [sp, #24]
 8008b26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008b28:	f1ba 0f00 	cmp.w	sl, #0
 8008b2c:	db3d      	blt.n	8008baa <_dtoa_r+0x23a>
 8008b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b30:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008b34:	4453      	add	r3, sl
 8008b36:	9309      	str	r3, [sp, #36]	; 0x24
 8008b38:	2300      	movs	r3, #0
 8008b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	f200 808c 	bhi.w	8008c5c <_dtoa_r+0x2ec>
 8008b44:	2b05      	cmp	r3, #5
 8008b46:	bfc4      	itt	gt
 8008b48:	3b04      	subgt	r3, #4
 8008b4a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b4e:	bfc8      	it	gt
 8008b50:	2400      	movgt	r4, #0
 8008b52:	f1a3 0302 	sub.w	r3, r3, #2
 8008b56:	bfd8      	it	le
 8008b58:	2401      	movle	r4, #1
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	f200 808a 	bhi.w	8008c74 <_dtoa_r+0x304>
 8008b60:	e8df f003 	tbb	[pc, r3]
 8008b64:	5b4d4f2d 	.word	0x5b4d4f2d
 8008b68:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008b6c:	441c      	add	r4, r3
 8008b6e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008b72:	2b20      	cmp	r3, #32
 8008b74:	bfc3      	ittte	gt
 8008b76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b7a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008b7e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b82:	f1c3 0320 	rsble	r3, r3, #32
 8008b86:	bfc6      	itte	gt
 8008b88:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b8c:	4318      	orrgt	r0, r3
 8008b8e:	fa06 f003 	lslle.w	r0, r6, r3
 8008b92:	f7f7 fc27 	bl	80003e4 <__aeabi_ui2d>
 8008b96:	2301      	movs	r3, #1
 8008b98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008b9c:	3c01      	subs	r4, #1
 8008b9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ba0:	e76f      	b.n	8008a82 <_dtoa_r+0x112>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e7b2      	b.n	8008b0c <_dtoa_r+0x19c>
 8008ba6:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ba8:	e7b1      	b.n	8008b0e <_dtoa_r+0x19e>
 8008baa:	9b06      	ldr	r3, [sp, #24]
 8008bac:	eba3 030a 	sub.w	r3, r3, sl
 8008bb0:	9306      	str	r3, [sp, #24]
 8008bb2:	f1ca 0300 	rsb	r3, sl, #0
 8008bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bb8:	2300      	movs	r3, #0
 8008bba:	930e      	str	r3, [sp, #56]	; 0x38
 8008bbc:	e7be      	b.n	8008b3c <_dtoa_r+0x1cc>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	dc58      	bgt.n	8008c7a <_dtoa_r+0x30a>
 8008bc8:	f04f 0901 	mov.w	r9, #1
 8008bcc:	464b      	mov	r3, r9
 8008bce:	f8cd 9020 	str.w	r9, [sp, #32]
 8008bd2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008bda:	6042      	str	r2, [r0, #4]
 8008bdc:	2204      	movs	r2, #4
 8008bde:	f102 0614 	add.w	r6, r2, #20
 8008be2:	429e      	cmp	r6, r3
 8008be4:	6841      	ldr	r1, [r0, #4]
 8008be6:	d94e      	bls.n	8008c86 <_dtoa_r+0x316>
 8008be8:	4628      	mov	r0, r5
 8008bea:	f001 f91d 	bl	8009e28 <_Balloc>
 8008bee:	9003      	str	r0, [sp, #12]
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d14c      	bne.n	8008c8e <_dtoa_r+0x31e>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008bfa:	4b17      	ldr	r3, [pc, #92]	; (8008c58 <_dtoa_r+0x2e8>)
 8008bfc:	e6cc      	b.n	8008998 <_dtoa_r+0x28>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e7de      	b.n	8008bc0 <_dtoa_r+0x250>
 8008c02:	2300      	movs	r3, #0
 8008c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c08:	eb0a 0903 	add.w	r9, sl, r3
 8008c0c:	f109 0301 	add.w	r3, r9, #1
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	9308      	str	r3, [sp, #32]
 8008c14:	bfb8      	it	lt
 8008c16:	2301      	movlt	r3, #1
 8008c18:	e7dd      	b.n	8008bd6 <_dtoa_r+0x266>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e7f2      	b.n	8008c04 <_dtoa_r+0x294>
 8008c1e:	bf00      	nop
 8008c20:	636f4361 	.word	0x636f4361
 8008c24:	3fd287a7 	.word	0x3fd287a7
 8008c28:	8b60c8b3 	.word	0x8b60c8b3
 8008c2c:	3fc68a28 	.word	0x3fc68a28
 8008c30:	509f79fb 	.word	0x509f79fb
 8008c34:	3fd34413 	.word	0x3fd34413
 8008c38:	0800b506 	.word	0x0800b506
 8008c3c:	0800b51d 	.word	0x0800b51d
 8008c40:	7ff00000 	.word	0x7ff00000
 8008c44:	0800b502 	.word	0x0800b502
 8008c48:	0800b4f9 	.word	0x0800b4f9
 8008c4c:	0800b37d 	.word	0x0800b37d
 8008c50:	3ff80000 	.word	0x3ff80000
 8008c54:	0800b688 	.word	0x0800b688
 8008c58:	0800b578 	.word	0x0800b578
 8008c5c:	2401      	movs	r4, #1
 8008c5e:	2300      	movs	r3, #0
 8008c60:	940b      	str	r4, [sp, #44]	; 0x2c
 8008c62:	9322      	str	r3, [sp, #136]	; 0x88
 8008c64:	f04f 39ff 	mov.w	r9, #4294967295
 8008c68:	2200      	movs	r2, #0
 8008c6a:	2312      	movs	r3, #18
 8008c6c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008c70:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c72:	e7b0      	b.n	8008bd6 <_dtoa_r+0x266>
 8008c74:	2301      	movs	r3, #1
 8008c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c78:	e7f4      	b.n	8008c64 <_dtoa_r+0x2f4>
 8008c7a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008c7e:	464b      	mov	r3, r9
 8008c80:	f8cd 9020 	str.w	r9, [sp, #32]
 8008c84:	e7a7      	b.n	8008bd6 <_dtoa_r+0x266>
 8008c86:	3101      	adds	r1, #1
 8008c88:	6041      	str	r1, [r0, #4]
 8008c8a:	0052      	lsls	r2, r2, #1
 8008c8c:	e7a7      	b.n	8008bde <_dtoa_r+0x26e>
 8008c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c90:	9a03      	ldr	r2, [sp, #12]
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	9b08      	ldr	r3, [sp, #32]
 8008c96:	2b0e      	cmp	r3, #14
 8008c98:	f200 80a8 	bhi.w	8008dec <_dtoa_r+0x47c>
 8008c9c:	2c00      	cmp	r4, #0
 8008c9e:	f000 80a5 	beq.w	8008dec <_dtoa_r+0x47c>
 8008ca2:	f1ba 0f00 	cmp.w	sl, #0
 8008ca6:	dd34      	ble.n	8008d12 <_dtoa_r+0x3a2>
 8008ca8:	4a9a      	ldr	r2, [pc, #616]	; (8008f14 <_dtoa_r+0x5a4>)
 8008caa:	f00a 030f 	and.w	r3, sl, #15
 8008cae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008cb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008cbe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008cc2:	d016      	beq.n	8008cf2 <_dtoa_r+0x382>
 8008cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cc8:	4b93      	ldr	r3, [pc, #588]	; (8008f18 <_dtoa_r+0x5a8>)
 8008cca:	2703      	movs	r7, #3
 8008ccc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cd0:	f7f7 fd2c 	bl	800072c <__aeabi_ddiv>
 8008cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cd8:	f004 040f 	and.w	r4, r4, #15
 8008cdc:	4e8e      	ldr	r6, [pc, #568]	; (8008f18 <_dtoa_r+0x5a8>)
 8008cde:	b954      	cbnz	r4, 8008cf6 <_dtoa_r+0x386>
 8008ce0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ce8:	f7f7 fd20 	bl	800072c <__aeabi_ddiv>
 8008cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cf0:	e029      	b.n	8008d46 <_dtoa_r+0x3d6>
 8008cf2:	2702      	movs	r7, #2
 8008cf4:	e7f2      	b.n	8008cdc <_dtoa_r+0x36c>
 8008cf6:	07e1      	lsls	r1, r4, #31
 8008cf8:	d508      	bpl.n	8008d0c <_dtoa_r+0x39c>
 8008cfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cfe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d02:	f7f7 fbe9 	bl	80004d8 <__aeabi_dmul>
 8008d06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d0a:	3701      	adds	r7, #1
 8008d0c:	1064      	asrs	r4, r4, #1
 8008d0e:	3608      	adds	r6, #8
 8008d10:	e7e5      	b.n	8008cde <_dtoa_r+0x36e>
 8008d12:	f000 80a5 	beq.w	8008e60 <_dtoa_r+0x4f0>
 8008d16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d1a:	f1ca 0400 	rsb	r4, sl, #0
 8008d1e:	4b7d      	ldr	r3, [pc, #500]	; (8008f14 <_dtoa_r+0x5a4>)
 8008d20:	f004 020f 	and.w	r2, r4, #15
 8008d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2c:	f7f7 fbd4 	bl	80004d8 <__aeabi_dmul>
 8008d30:	2702      	movs	r7, #2
 8008d32:	2300      	movs	r3, #0
 8008d34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d38:	4e77      	ldr	r6, [pc, #476]	; (8008f18 <_dtoa_r+0x5a8>)
 8008d3a:	1124      	asrs	r4, r4, #4
 8008d3c:	2c00      	cmp	r4, #0
 8008d3e:	f040 8084 	bne.w	8008e4a <_dtoa_r+0x4da>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1d2      	bne.n	8008cec <_dtoa_r+0x37c>
 8008d46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 808b 	beq.w	8008e64 <_dtoa_r+0x4f4>
 8008d4e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008d56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	4b6f      	ldr	r3, [pc, #444]	; (8008f1c <_dtoa_r+0x5ac>)
 8008d5e:	f7f7 fe2d 	bl	80009bc <__aeabi_dcmplt>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d07e      	beq.n	8008e64 <_dtoa_r+0x4f4>
 8008d66:	9b08      	ldr	r3, [sp, #32]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d07b      	beq.n	8008e64 <_dtoa_r+0x4f4>
 8008d6c:	f1b9 0f00 	cmp.w	r9, #0
 8008d70:	dd38      	ble.n	8008de4 <_dtoa_r+0x474>
 8008d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d76:	2200      	movs	r2, #0
 8008d78:	4b69      	ldr	r3, [pc, #420]	; (8008f20 <_dtoa_r+0x5b0>)
 8008d7a:	f7f7 fbad 	bl	80004d8 <__aeabi_dmul>
 8008d7e:	464c      	mov	r4, r9
 8008d80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d84:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008d88:	3701      	adds	r7, #1
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	f7f7 fb3a 	bl	8000404 <__aeabi_i2d>
 8008d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d94:	f7f7 fba0 	bl	80004d8 <__aeabi_dmul>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	4b62      	ldr	r3, [pc, #392]	; (8008f24 <_dtoa_r+0x5b4>)
 8008d9c:	f7f7 f9e6 	bl	800016c <__adddf3>
 8008da0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008da4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008da8:	9611      	str	r6, [sp, #68]	; 0x44
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	d15d      	bne.n	8008e6a <_dtoa_r+0x4fa>
 8008dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008db2:	2200      	movs	r2, #0
 8008db4:	4b5c      	ldr	r3, [pc, #368]	; (8008f28 <_dtoa_r+0x5b8>)
 8008db6:	f7f7 f9d7 	bl	8000168 <__aeabi_dsub>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008dc2:	4633      	mov	r3, r6
 8008dc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dc6:	f7f7 fe17 	bl	80009f8 <__aeabi_dcmpgt>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f040 829c 	bne.w	8009308 <_dtoa_r+0x998>
 8008dd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dd6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008dda:	f7f7 fdef 	bl	80009bc <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f040 8290 	bne.w	8009304 <_dtoa_r+0x994>
 8008de4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008de8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f2c0 8152 	blt.w	8009098 <_dtoa_r+0x728>
 8008df4:	f1ba 0f0e 	cmp.w	sl, #14
 8008df8:	f300 814e 	bgt.w	8009098 <_dtoa_r+0x728>
 8008dfc:	4b45      	ldr	r3, [pc, #276]	; (8008f14 <_dtoa_r+0x5a4>)
 8008dfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e06:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008e0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f280 80db 	bge.w	8008fc8 <_dtoa_r+0x658>
 8008e12:	9b08      	ldr	r3, [sp, #32]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f300 80d7 	bgt.w	8008fc8 <_dtoa_r+0x658>
 8008e1a:	f040 8272 	bne.w	8009302 <_dtoa_r+0x992>
 8008e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e22:	2200      	movs	r2, #0
 8008e24:	4b40      	ldr	r3, [pc, #256]	; (8008f28 <_dtoa_r+0x5b8>)
 8008e26:	f7f7 fb57 	bl	80004d8 <__aeabi_dmul>
 8008e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e2e:	f7f7 fdd9 	bl	80009e4 <__aeabi_dcmpge>
 8008e32:	9c08      	ldr	r4, [sp, #32]
 8008e34:	4626      	mov	r6, r4
 8008e36:	2800      	cmp	r0, #0
 8008e38:	f040 8248 	bne.w	80092cc <_dtoa_r+0x95c>
 8008e3c:	2331      	movs	r3, #49	; 0x31
 8008e3e:	9f03      	ldr	r7, [sp, #12]
 8008e40:	f10a 0a01 	add.w	sl, sl, #1
 8008e44:	f807 3b01 	strb.w	r3, [r7], #1
 8008e48:	e244      	b.n	80092d4 <_dtoa_r+0x964>
 8008e4a:	07e2      	lsls	r2, r4, #31
 8008e4c:	d505      	bpl.n	8008e5a <_dtoa_r+0x4ea>
 8008e4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e52:	f7f7 fb41 	bl	80004d8 <__aeabi_dmul>
 8008e56:	2301      	movs	r3, #1
 8008e58:	3701      	adds	r7, #1
 8008e5a:	1064      	asrs	r4, r4, #1
 8008e5c:	3608      	adds	r6, #8
 8008e5e:	e76d      	b.n	8008d3c <_dtoa_r+0x3cc>
 8008e60:	2702      	movs	r7, #2
 8008e62:	e770      	b.n	8008d46 <_dtoa_r+0x3d6>
 8008e64:	46d0      	mov	r8, sl
 8008e66:	9c08      	ldr	r4, [sp, #32]
 8008e68:	e78f      	b.n	8008d8a <_dtoa_r+0x41a>
 8008e6a:	9903      	ldr	r1, [sp, #12]
 8008e6c:	4b29      	ldr	r3, [pc, #164]	; (8008f14 <_dtoa_r+0x5a4>)
 8008e6e:	4421      	add	r1, r4
 8008e70:	9112      	str	r1, [sp, #72]	; 0x48
 8008e72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e78:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e7c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e80:	2900      	cmp	r1, #0
 8008e82:	d055      	beq.n	8008f30 <_dtoa_r+0x5c0>
 8008e84:	2000      	movs	r0, #0
 8008e86:	4929      	ldr	r1, [pc, #164]	; (8008f2c <_dtoa_r+0x5bc>)
 8008e88:	f7f7 fc50 	bl	800072c <__aeabi_ddiv>
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	4632      	mov	r2, r6
 8008e90:	f7f7 f96a 	bl	8000168 <__aeabi_dsub>
 8008e94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e98:	9f03      	ldr	r7, [sp, #12]
 8008e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e9e:	f7f7 fdcb 	bl	8000a38 <__aeabi_d2iz>
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	f7f7 faae 	bl	8000404 <__aeabi_i2d>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eb0:	f7f7 f95a 	bl	8000168 <__aeabi_dsub>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	3430      	adds	r4, #48	; 0x30
 8008eba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ebe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ec2:	f807 4b01 	strb.w	r4, [r7], #1
 8008ec6:	f7f7 fd79 	bl	80009bc <__aeabi_dcmplt>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d174      	bne.n	8008fb8 <_dtoa_r+0x648>
 8008ece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	4911      	ldr	r1, [pc, #68]	; (8008f1c <_dtoa_r+0x5ac>)
 8008ed6:	f7f7 f947 	bl	8000168 <__aeabi_dsub>
 8008eda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ede:	f7f7 fd6d 	bl	80009bc <__aeabi_dcmplt>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	f040 80b7 	bne.w	8009056 <_dtoa_r+0x6e6>
 8008ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eea:	429f      	cmp	r7, r3
 8008eec:	f43f af7a 	beq.w	8008de4 <_dtoa_r+0x474>
 8008ef0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <_dtoa_r+0x5b0>)
 8008ef8:	f7f7 faee 	bl	80004d8 <__aeabi_dmul>
 8008efc:	2200      	movs	r2, #0
 8008efe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f06:	4b06      	ldr	r3, [pc, #24]	; (8008f20 <_dtoa_r+0x5b0>)
 8008f08:	f7f7 fae6 	bl	80004d8 <__aeabi_dmul>
 8008f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f10:	e7c3      	b.n	8008e9a <_dtoa_r+0x52a>
 8008f12:	bf00      	nop
 8008f14:	0800b688 	.word	0x0800b688
 8008f18:	0800b660 	.word	0x0800b660
 8008f1c:	3ff00000 	.word	0x3ff00000
 8008f20:	40240000 	.word	0x40240000
 8008f24:	401c0000 	.word	0x401c0000
 8008f28:	40140000 	.word	0x40140000
 8008f2c:	3fe00000 	.word	0x3fe00000
 8008f30:	4630      	mov	r0, r6
 8008f32:	4639      	mov	r1, r7
 8008f34:	f7f7 fad0 	bl	80004d8 <__aeabi_dmul>
 8008f38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f3e:	9c03      	ldr	r4, [sp, #12]
 8008f40:	9314      	str	r3, [sp, #80]	; 0x50
 8008f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f46:	f7f7 fd77 	bl	8000a38 <__aeabi_d2iz>
 8008f4a:	9015      	str	r0, [sp, #84]	; 0x54
 8008f4c:	f7f7 fa5a 	bl	8000404 <__aeabi_i2d>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f58:	f7f7 f906 	bl	8000168 <__aeabi_dsub>
 8008f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f5e:	4606      	mov	r6, r0
 8008f60:	3330      	adds	r3, #48	; 0x30
 8008f62:	f804 3b01 	strb.w	r3, [r4], #1
 8008f66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f68:	460f      	mov	r7, r1
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	d124      	bne.n	8008fbc <_dtoa_r+0x64c>
 8008f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f76:	4bb0      	ldr	r3, [pc, #704]	; (8009238 <_dtoa_r+0x8c8>)
 8008f78:	f7f7 f8f8 	bl	800016c <__adddf3>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 fd38 	bl	80009f8 <__aeabi_dcmpgt>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d163      	bne.n	8009054 <_dtoa_r+0x6e4>
 8008f8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f90:	2000      	movs	r0, #0
 8008f92:	49a9      	ldr	r1, [pc, #676]	; (8009238 <_dtoa_r+0x8c8>)
 8008f94:	f7f7 f8e8 	bl	8000168 <__aeabi_dsub>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 fd0c 	bl	80009bc <__aeabi_dcmplt>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f43f af1d 	beq.w	8008de4 <_dtoa_r+0x474>
 8008faa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008fac:	1e7b      	subs	r3, r7, #1
 8008fae:	9314      	str	r3, [sp, #80]	; 0x50
 8008fb0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008fb4:	2b30      	cmp	r3, #48	; 0x30
 8008fb6:	d0f8      	beq.n	8008faa <_dtoa_r+0x63a>
 8008fb8:	46c2      	mov	sl, r8
 8008fba:	e03b      	b.n	8009034 <_dtoa_r+0x6c4>
 8008fbc:	4b9f      	ldr	r3, [pc, #636]	; (800923c <_dtoa_r+0x8cc>)
 8008fbe:	f7f7 fa8b 	bl	80004d8 <__aeabi_dmul>
 8008fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fc6:	e7bc      	b.n	8008f42 <_dtoa_r+0x5d2>
 8008fc8:	9f03      	ldr	r7, [sp, #12]
 8008fca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008fce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fba9 	bl	800072c <__aeabi_ddiv>
 8008fda:	f7f7 fd2d 	bl	8000a38 <__aeabi_d2iz>
 8008fde:	4604      	mov	r4, r0
 8008fe0:	f7f7 fa10 	bl	8000404 <__aeabi_i2d>
 8008fe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fe8:	f7f7 fa76 	bl	80004d8 <__aeabi_dmul>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	f7f7 f8b8 	bl	8000168 <__aeabi_dsub>
 8008ff8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008ffc:	f807 6b01 	strb.w	r6, [r7], #1
 8009000:	9e03      	ldr	r6, [sp, #12]
 8009002:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009006:	1bbe      	subs	r6, r7, r6
 8009008:	45b4      	cmp	ip, r6
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	d136      	bne.n	800907e <_dtoa_r+0x70e>
 8009010:	f7f7 f8ac 	bl	800016c <__adddf3>
 8009014:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009018:	4680      	mov	r8, r0
 800901a:	4689      	mov	r9, r1
 800901c:	f7f7 fcec 	bl	80009f8 <__aeabi_dcmpgt>
 8009020:	bb58      	cbnz	r0, 800907a <_dtoa_r+0x70a>
 8009022:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f7f7 fcbd 	bl	80009a8 <__aeabi_dcmpeq>
 800902e:	b108      	cbz	r0, 8009034 <_dtoa_r+0x6c4>
 8009030:	07e1      	lsls	r1, r4, #31
 8009032:	d422      	bmi.n	800907a <_dtoa_r+0x70a>
 8009034:	4628      	mov	r0, r5
 8009036:	4659      	mov	r1, fp
 8009038:	f000 ff36 	bl	8009ea8 <_Bfree>
 800903c:	2300      	movs	r3, #0
 800903e:	703b      	strb	r3, [r7, #0]
 8009040:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009042:	f10a 0001 	add.w	r0, sl, #1
 8009046:	6018      	str	r0, [r3, #0]
 8009048:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800904a:	2b00      	cmp	r3, #0
 800904c:	f43f acde 	beq.w	8008a0c <_dtoa_r+0x9c>
 8009050:	601f      	str	r7, [r3, #0]
 8009052:	e4db      	b.n	8008a0c <_dtoa_r+0x9c>
 8009054:	4627      	mov	r7, r4
 8009056:	463b      	mov	r3, r7
 8009058:	461f      	mov	r7, r3
 800905a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800905e:	2a39      	cmp	r2, #57	; 0x39
 8009060:	d107      	bne.n	8009072 <_dtoa_r+0x702>
 8009062:	9a03      	ldr	r2, [sp, #12]
 8009064:	429a      	cmp	r2, r3
 8009066:	d1f7      	bne.n	8009058 <_dtoa_r+0x6e8>
 8009068:	2230      	movs	r2, #48	; 0x30
 800906a:	9903      	ldr	r1, [sp, #12]
 800906c:	f108 0801 	add.w	r8, r8, #1
 8009070:	700a      	strb	r2, [r1, #0]
 8009072:	781a      	ldrb	r2, [r3, #0]
 8009074:	3201      	adds	r2, #1
 8009076:	701a      	strb	r2, [r3, #0]
 8009078:	e79e      	b.n	8008fb8 <_dtoa_r+0x648>
 800907a:	46d0      	mov	r8, sl
 800907c:	e7eb      	b.n	8009056 <_dtoa_r+0x6e6>
 800907e:	2200      	movs	r2, #0
 8009080:	4b6e      	ldr	r3, [pc, #440]	; (800923c <_dtoa_r+0x8cc>)
 8009082:	f7f7 fa29 	bl	80004d8 <__aeabi_dmul>
 8009086:	2200      	movs	r2, #0
 8009088:	2300      	movs	r3, #0
 800908a:	4680      	mov	r8, r0
 800908c:	4689      	mov	r9, r1
 800908e:	f7f7 fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 8009092:	2800      	cmp	r0, #0
 8009094:	d09b      	beq.n	8008fce <_dtoa_r+0x65e>
 8009096:	e7cd      	b.n	8009034 <_dtoa_r+0x6c4>
 8009098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800909a:	2a00      	cmp	r2, #0
 800909c:	f000 80d0 	beq.w	8009240 <_dtoa_r+0x8d0>
 80090a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80090a2:	2a01      	cmp	r2, #1
 80090a4:	f300 80ae 	bgt.w	8009204 <_dtoa_r+0x894>
 80090a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	f000 80a6 	beq.w	80091fc <_dtoa_r+0x88c>
 80090b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090b6:	9f06      	ldr	r7, [sp, #24]
 80090b8:	9a06      	ldr	r2, [sp, #24]
 80090ba:	2101      	movs	r1, #1
 80090bc:	441a      	add	r2, r3
 80090be:	9206      	str	r2, [sp, #24]
 80090c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c2:	4628      	mov	r0, r5
 80090c4:	441a      	add	r2, r3
 80090c6:	9209      	str	r2, [sp, #36]	; 0x24
 80090c8:	f000 ffee 	bl	800a0a8 <__i2b>
 80090cc:	4606      	mov	r6, r0
 80090ce:	2f00      	cmp	r7, #0
 80090d0:	dd0c      	ble.n	80090ec <_dtoa_r+0x77c>
 80090d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	dd09      	ble.n	80090ec <_dtoa_r+0x77c>
 80090d8:	42bb      	cmp	r3, r7
 80090da:	bfa8      	it	ge
 80090dc:	463b      	movge	r3, r7
 80090de:	9a06      	ldr	r2, [sp, #24]
 80090e0:	1aff      	subs	r7, r7, r3
 80090e2:	1ad2      	subs	r2, r2, r3
 80090e4:	9206      	str	r2, [sp, #24]
 80090e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	9309      	str	r3, [sp, #36]	; 0x24
 80090ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ee:	b1f3      	cbz	r3, 800912e <_dtoa_r+0x7be>
 80090f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 80a8 	beq.w	8009248 <_dtoa_r+0x8d8>
 80090f8:	2c00      	cmp	r4, #0
 80090fa:	dd10      	ble.n	800911e <_dtoa_r+0x7ae>
 80090fc:	4631      	mov	r1, r6
 80090fe:	4622      	mov	r2, r4
 8009100:	4628      	mov	r0, r5
 8009102:	f001 f88f 	bl	800a224 <__pow5mult>
 8009106:	465a      	mov	r2, fp
 8009108:	4601      	mov	r1, r0
 800910a:	4606      	mov	r6, r0
 800910c:	4628      	mov	r0, r5
 800910e:	f000 ffe1 	bl	800a0d4 <__multiply>
 8009112:	4680      	mov	r8, r0
 8009114:	4659      	mov	r1, fp
 8009116:	4628      	mov	r0, r5
 8009118:	f000 fec6 	bl	8009ea8 <_Bfree>
 800911c:	46c3      	mov	fp, r8
 800911e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009120:	1b1a      	subs	r2, r3, r4
 8009122:	d004      	beq.n	800912e <_dtoa_r+0x7be>
 8009124:	4659      	mov	r1, fp
 8009126:	4628      	mov	r0, r5
 8009128:	f001 f87c 	bl	800a224 <__pow5mult>
 800912c:	4683      	mov	fp, r0
 800912e:	2101      	movs	r1, #1
 8009130:	4628      	mov	r0, r5
 8009132:	f000 ffb9 	bl	800a0a8 <__i2b>
 8009136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009138:	4604      	mov	r4, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	f340 8086 	ble.w	800924c <_dtoa_r+0x8dc>
 8009140:	461a      	mov	r2, r3
 8009142:	4601      	mov	r1, r0
 8009144:	4628      	mov	r0, r5
 8009146:	f001 f86d 	bl	800a224 <__pow5mult>
 800914a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800914c:	4604      	mov	r4, r0
 800914e:	2b01      	cmp	r3, #1
 8009150:	dd7f      	ble.n	8009252 <_dtoa_r+0x8e2>
 8009152:	f04f 0800 	mov.w	r8, #0
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800915c:	6918      	ldr	r0, [r3, #16]
 800915e:	f000 ff55 	bl	800a00c <__hi0bits>
 8009162:	f1c0 0020 	rsb	r0, r0, #32
 8009166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009168:	4418      	add	r0, r3
 800916a:	f010 001f 	ands.w	r0, r0, #31
 800916e:	f000 8092 	beq.w	8009296 <_dtoa_r+0x926>
 8009172:	f1c0 0320 	rsb	r3, r0, #32
 8009176:	2b04      	cmp	r3, #4
 8009178:	f340 808a 	ble.w	8009290 <_dtoa_r+0x920>
 800917c:	f1c0 001c 	rsb	r0, r0, #28
 8009180:	9b06      	ldr	r3, [sp, #24]
 8009182:	4407      	add	r7, r0
 8009184:	4403      	add	r3, r0
 8009186:	9306      	str	r3, [sp, #24]
 8009188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918a:	4403      	add	r3, r0
 800918c:	9309      	str	r3, [sp, #36]	; 0x24
 800918e:	9b06      	ldr	r3, [sp, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	dd05      	ble.n	80091a0 <_dtoa_r+0x830>
 8009194:	4659      	mov	r1, fp
 8009196:	461a      	mov	r2, r3
 8009198:	4628      	mov	r0, r5
 800919a:	f001 f89d 	bl	800a2d8 <__lshift>
 800919e:	4683      	mov	fp, r0
 80091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dd05      	ble.n	80091b2 <_dtoa_r+0x842>
 80091a6:	4621      	mov	r1, r4
 80091a8:	461a      	mov	r2, r3
 80091aa:	4628      	mov	r0, r5
 80091ac:	f001 f894 	bl	800a2d8 <__lshift>
 80091b0:	4604      	mov	r4, r0
 80091b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d070      	beq.n	800929a <_dtoa_r+0x92a>
 80091b8:	4621      	mov	r1, r4
 80091ba:	4658      	mov	r0, fp
 80091bc:	f001 f8fc 	bl	800a3b8 <__mcmp>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	da6a      	bge.n	800929a <_dtoa_r+0x92a>
 80091c4:	2300      	movs	r3, #0
 80091c6:	4659      	mov	r1, fp
 80091c8:	220a      	movs	r2, #10
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 fe8e 	bl	8009eec <__multadd>
 80091d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091d2:	4683      	mov	fp, r0
 80091d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8194 	beq.w	8009506 <_dtoa_r+0xb96>
 80091de:	4631      	mov	r1, r6
 80091e0:	2300      	movs	r3, #0
 80091e2:	220a      	movs	r2, #10
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 fe81 	bl	8009eec <__multadd>
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	4606      	mov	r6, r0
 80091f0:	f300 8093 	bgt.w	800931a <_dtoa_r+0x9aa>
 80091f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	dc57      	bgt.n	80092aa <_dtoa_r+0x93a>
 80091fa:	e08e      	b.n	800931a <_dtoa_r+0x9aa>
 80091fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80091fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009202:	e757      	b.n	80090b4 <_dtoa_r+0x744>
 8009204:	9b08      	ldr	r3, [sp, #32]
 8009206:	1e5c      	subs	r4, r3, #1
 8009208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800920a:	42a3      	cmp	r3, r4
 800920c:	bfb7      	itett	lt
 800920e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009210:	1b1c      	subge	r4, r3, r4
 8009212:	1ae2      	sublt	r2, r4, r3
 8009214:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009216:	bfbe      	ittt	lt
 8009218:	940a      	strlt	r4, [sp, #40]	; 0x28
 800921a:	189b      	addlt	r3, r3, r2
 800921c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800921e:	9b08      	ldr	r3, [sp, #32]
 8009220:	bfb8      	it	lt
 8009222:	2400      	movlt	r4, #0
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfbb      	ittet	lt
 8009228:	9b06      	ldrlt	r3, [sp, #24]
 800922a:	9a08      	ldrlt	r2, [sp, #32]
 800922c:	9f06      	ldrge	r7, [sp, #24]
 800922e:	1a9f      	sublt	r7, r3, r2
 8009230:	bfac      	ite	ge
 8009232:	9b08      	ldrge	r3, [sp, #32]
 8009234:	2300      	movlt	r3, #0
 8009236:	e73f      	b.n	80090b8 <_dtoa_r+0x748>
 8009238:	3fe00000 	.word	0x3fe00000
 800923c:	40240000 	.word	0x40240000
 8009240:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009242:	9f06      	ldr	r7, [sp, #24]
 8009244:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009246:	e742      	b.n	80090ce <_dtoa_r+0x75e>
 8009248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800924a:	e76b      	b.n	8009124 <_dtoa_r+0x7b4>
 800924c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800924e:	2b01      	cmp	r3, #1
 8009250:	dc19      	bgt.n	8009286 <_dtoa_r+0x916>
 8009252:	9b04      	ldr	r3, [sp, #16]
 8009254:	b9bb      	cbnz	r3, 8009286 <_dtoa_r+0x916>
 8009256:	9b05      	ldr	r3, [sp, #20]
 8009258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800925c:	b99b      	cbnz	r3, 8009286 <_dtoa_r+0x916>
 800925e:	9b05      	ldr	r3, [sp, #20]
 8009260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009264:	0d1b      	lsrs	r3, r3, #20
 8009266:	051b      	lsls	r3, r3, #20
 8009268:	b183      	cbz	r3, 800928c <_dtoa_r+0x91c>
 800926a:	f04f 0801 	mov.w	r8, #1
 800926e:	9b06      	ldr	r3, [sp, #24]
 8009270:	3301      	adds	r3, #1
 8009272:	9306      	str	r3, [sp, #24]
 8009274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009276:	3301      	adds	r3, #1
 8009278:	9309      	str	r3, [sp, #36]	; 0x24
 800927a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800927c:	2b00      	cmp	r3, #0
 800927e:	f47f af6a 	bne.w	8009156 <_dtoa_r+0x7e6>
 8009282:	2001      	movs	r0, #1
 8009284:	e76f      	b.n	8009166 <_dtoa_r+0x7f6>
 8009286:	f04f 0800 	mov.w	r8, #0
 800928a:	e7f6      	b.n	800927a <_dtoa_r+0x90a>
 800928c:	4698      	mov	r8, r3
 800928e:	e7f4      	b.n	800927a <_dtoa_r+0x90a>
 8009290:	f43f af7d 	beq.w	800918e <_dtoa_r+0x81e>
 8009294:	4618      	mov	r0, r3
 8009296:	301c      	adds	r0, #28
 8009298:	e772      	b.n	8009180 <_dtoa_r+0x810>
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	2b00      	cmp	r3, #0
 800929e:	dc36      	bgt.n	800930e <_dtoa_r+0x99e>
 80092a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	dd33      	ble.n	800930e <_dtoa_r+0x99e>
 80092a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092aa:	f1b9 0f00 	cmp.w	r9, #0
 80092ae:	d10d      	bne.n	80092cc <_dtoa_r+0x95c>
 80092b0:	4621      	mov	r1, r4
 80092b2:	464b      	mov	r3, r9
 80092b4:	2205      	movs	r2, #5
 80092b6:	4628      	mov	r0, r5
 80092b8:	f000 fe18 	bl	8009eec <__multadd>
 80092bc:	4601      	mov	r1, r0
 80092be:	4604      	mov	r4, r0
 80092c0:	4658      	mov	r0, fp
 80092c2:	f001 f879 	bl	800a3b8 <__mcmp>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f73f adb8 	bgt.w	8008e3c <_dtoa_r+0x4cc>
 80092cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092ce:	9f03      	ldr	r7, [sp, #12]
 80092d0:	ea6f 0a03 	mvn.w	sl, r3
 80092d4:	f04f 0800 	mov.w	r8, #0
 80092d8:	4621      	mov	r1, r4
 80092da:	4628      	mov	r0, r5
 80092dc:	f000 fde4 	bl	8009ea8 <_Bfree>
 80092e0:	2e00      	cmp	r6, #0
 80092e2:	f43f aea7 	beq.w	8009034 <_dtoa_r+0x6c4>
 80092e6:	f1b8 0f00 	cmp.w	r8, #0
 80092ea:	d005      	beq.n	80092f8 <_dtoa_r+0x988>
 80092ec:	45b0      	cmp	r8, r6
 80092ee:	d003      	beq.n	80092f8 <_dtoa_r+0x988>
 80092f0:	4641      	mov	r1, r8
 80092f2:	4628      	mov	r0, r5
 80092f4:	f000 fdd8 	bl	8009ea8 <_Bfree>
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	f000 fdd4 	bl	8009ea8 <_Bfree>
 8009300:	e698      	b.n	8009034 <_dtoa_r+0x6c4>
 8009302:	2400      	movs	r4, #0
 8009304:	4626      	mov	r6, r4
 8009306:	e7e1      	b.n	80092cc <_dtoa_r+0x95c>
 8009308:	46c2      	mov	sl, r8
 800930a:	4626      	mov	r6, r4
 800930c:	e596      	b.n	8008e3c <_dtoa_r+0x4cc>
 800930e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 80fd 	beq.w	8009514 <_dtoa_r+0xba4>
 800931a:	2f00      	cmp	r7, #0
 800931c:	dd05      	ble.n	800932a <_dtoa_r+0x9ba>
 800931e:	4631      	mov	r1, r6
 8009320:	463a      	mov	r2, r7
 8009322:	4628      	mov	r0, r5
 8009324:	f000 ffd8 	bl	800a2d8 <__lshift>
 8009328:	4606      	mov	r6, r0
 800932a:	f1b8 0f00 	cmp.w	r8, #0
 800932e:	d05c      	beq.n	80093ea <_dtoa_r+0xa7a>
 8009330:	4628      	mov	r0, r5
 8009332:	6871      	ldr	r1, [r6, #4]
 8009334:	f000 fd78 	bl	8009e28 <_Balloc>
 8009338:	4607      	mov	r7, r0
 800933a:	b928      	cbnz	r0, 8009348 <_dtoa_r+0x9d8>
 800933c:	4602      	mov	r2, r0
 800933e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009342:	4b7f      	ldr	r3, [pc, #508]	; (8009540 <_dtoa_r+0xbd0>)
 8009344:	f7ff bb28 	b.w	8008998 <_dtoa_r+0x28>
 8009348:	6932      	ldr	r2, [r6, #16]
 800934a:	f106 010c 	add.w	r1, r6, #12
 800934e:	3202      	adds	r2, #2
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	300c      	adds	r0, #12
 8009354:	f7fd fb9f 	bl	8006a96 <memcpy>
 8009358:	2201      	movs	r2, #1
 800935a:	4639      	mov	r1, r7
 800935c:	4628      	mov	r0, r5
 800935e:	f000 ffbb 	bl	800a2d8 <__lshift>
 8009362:	46b0      	mov	r8, r6
 8009364:	4606      	mov	r6, r0
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	9308      	str	r3, [sp, #32]
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	444b      	add	r3, r9
 8009370:	930a      	str	r3, [sp, #40]	; 0x28
 8009372:	9b04      	ldr	r3, [sp, #16]
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	9309      	str	r3, [sp, #36]	; 0x24
 800937a:	9b08      	ldr	r3, [sp, #32]
 800937c:	4621      	mov	r1, r4
 800937e:	3b01      	subs	r3, #1
 8009380:	4658      	mov	r0, fp
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	f7ff fa66 	bl	8008854 <quorem>
 8009388:	4603      	mov	r3, r0
 800938a:	4641      	mov	r1, r8
 800938c:	3330      	adds	r3, #48	; 0x30
 800938e:	9006      	str	r0, [sp, #24]
 8009390:	4658      	mov	r0, fp
 8009392:	930b      	str	r3, [sp, #44]	; 0x2c
 8009394:	f001 f810 	bl	800a3b8 <__mcmp>
 8009398:	4632      	mov	r2, r6
 800939a:	4681      	mov	r9, r0
 800939c:	4621      	mov	r1, r4
 800939e:	4628      	mov	r0, r5
 80093a0:	f001 f826 	bl	800a3f0 <__mdiff>
 80093a4:	68c2      	ldr	r2, [r0, #12]
 80093a6:	4607      	mov	r7, r0
 80093a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093aa:	bb02      	cbnz	r2, 80093ee <_dtoa_r+0xa7e>
 80093ac:	4601      	mov	r1, r0
 80093ae:	4658      	mov	r0, fp
 80093b0:	f001 f802 	bl	800a3b8 <__mcmp>
 80093b4:	4602      	mov	r2, r0
 80093b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b8:	4639      	mov	r1, r7
 80093ba:	4628      	mov	r0, r5
 80093bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80093c0:	f000 fd72 	bl	8009ea8 <_Bfree>
 80093c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093c8:	9f08      	ldr	r7, [sp, #32]
 80093ca:	ea43 0102 	orr.w	r1, r3, r2
 80093ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d0:	430b      	orrs	r3, r1
 80093d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093d4:	d10d      	bne.n	80093f2 <_dtoa_r+0xa82>
 80093d6:	2b39      	cmp	r3, #57	; 0x39
 80093d8:	d029      	beq.n	800942e <_dtoa_r+0xabe>
 80093da:	f1b9 0f00 	cmp.w	r9, #0
 80093de:	dd01      	ble.n	80093e4 <_dtoa_r+0xa74>
 80093e0:	9b06      	ldr	r3, [sp, #24]
 80093e2:	3331      	adds	r3, #49	; 0x31
 80093e4:	9a04      	ldr	r2, [sp, #16]
 80093e6:	7013      	strb	r3, [r2, #0]
 80093e8:	e776      	b.n	80092d8 <_dtoa_r+0x968>
 80093ea:	4630      	mov	r0, r6
 80093ec:	e7b9      	b.n	8009362 <_dtoa_r+0x9f2>
 80093ee:	2201      	movs	r2, #1
 80093f0:	e7e2      	b.n	80093b8 <_dtoa_r+0xa48>
 80093f2:	f1b9 0f00 	cmp.w	r9, #0
 80093f6:	db06      	blt.n	8009406 <_dtoa_r+0xa96>
 80093f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80093fa:	ea41 0909 	orr.w	r9, r1, r9
 80093fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009400:	ea59 0101 	orrs.w	r1, r9, r1
 8009404:	d120      	bne.n	8009448 <_dtoa_r+0xad8>
 8009406:	2a00      	cmp	r2, #0
 8009408:	ddec      	ble.n	80093e4 <_dtoa_r+0xa74>
 800940a:	4659      	mov	r1, fp
 800940c:	2201      	movs	r2, #1
 800940e:	4628      	mov	r0, r5
 8009410:	9308      	str	r3, [sp, #32]
 8009412:	f000 ff61 	bl	800a2d8 <__lshift>
 8009416:	4621      	mov	r1, r4
 8009418:	4683      	mov	fp, r0
 800941a:	f000 ffcd 	bl	800a3b8 <__mcmp>
 800941e:	2800      	cmp	r0, #0
 8009420:	9b08      	ldr	r3, [sp, #32]
 8009422:	dc02      	bgt.n	800942a <_dtoa_r+0xaba>
 8009424:	d1de      	bne.n	80093e4 <_dtoa_r+0xa74>
 8009426:	07da      	lsls	r2, r3, #31
 8009428:	d5dc      	bpl.n	80093e4 <_dtoa_r+0xa74>
 800942a:	2b39      	cmp	r3, #57	; 0x39
 800942c:	d1d8      	bne.n	80093e0 <_dtoa_r+0xa70>
 800942e:	2339      	movs	r3, #57	; 0x39
 8009430:	9a04      	ldr	r2, [sp, #16]
 8009432:	7013      	strb	r3, [r2, #0]
 8009434:	463b      	mov	r3, r7
 8009436:	461f      	mov	r7, r3
 8009438:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800943c:	3b01      	subs	r3, #1
 800943e:	2a39      	cmp	r2, #57	; 0x39
 8009440:	d050      	beq.n	80094e4 <_dtoa_r+0xb74>
 8009442:	3201      	adds	r2, #1
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	e747      	b.n	80092d8 <_dtoa_r+0x968>
 8009448:	2a00      	cmp	r2, #0
 800944a:	dd03      	ble.n	8009454 <_dtoa_r+0xae4>
 800944c:	2b39      	cmp	r3, #57	; 0x39
 800944e:	d0ee      	beq.n	800942e <_dtoa_r+0xabe>
 8009450:	3301      	adds	r3, #1
 8009452:	e7c7      	b.n	80093e4 <_dtoa_r+0xa74>
 8009454:	9a08      	ldr	r2, [sp, #32]
 8009456:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009458:	f802 3c01 	strb.w	r3, [r2, #-1]
 800945c:	428a      	cmp	r2, r1
 800945e:	d02a      	beq.n	80094b6 <_dtoa_r+0xb46>
 8009460:	4659      	mov	r1, fp
 8009462:	2300      	movs	r3, #0
 8009464:	220a      	movs	r2, #10
 8009466:	4628      	mov	r0, r5
 8009468:	f000 fd40 	bl	8009eec <__multadd>
 800946c:	45b0      	cmp	r8, r6
 800946e:	4683      	mov	fp, r0
 8009470:	f04f 0300 	mov.w	r3, #0
 8009474:	f04f 020a 	mov.w	r2, #10
 8009478:	4641      	mov	r1, r8
 800947a:	4628      	mov	r0, r5
 800947c:	d107      	bne.n	800948e <_dtoa_r+0xb1e>
 800947e:	f000 fd35 	bl	8009eec <__multadd>
 8009482:	4680      	mov	r8, r0
 8009484:	4606      	mov	r6, r0
 8009486:	9b08      	ldr	r3, [sp, #32]
 8009488:	3301      	adds	r3, #1
 800948a:	9308      	str	r3, [sp, #32]
 800948c:	e775      	b.n	800937a <_dtoa_r+0xa0a>
 800948e:	f000 fd2d 	bl	8009eec <__multadd>
 8009492:	4631      	mov	r1, r6
 8009494:	4680      	mov	r8, r0
 8009496:	2300      	movs	r3, #0
 8009498:	220a      	movs	r2, #10
 800949a:	4628      	mov	r0, r5
 800949c:	f000 fd26 	bl	8009eec <__multadd>
 80094a0:	4606      	mov	r6, r0
 80094a2:	e7f0      	b.n	8009486 <_dtoa_r+0xb16>
 80094a4:	f1b9 0f00 	cmp.w	r9, #0
 80094a8:	bfcc      	ite	gt
 80094aa:	464f      	movgt	r7, r9
 80094ac:	2701      	movle	r7, #1
 80094ae:	f04f 0800 	mov.w	r8, #0
 80094b2:	9a03      	ldr	r2, [sp, #12]
 80094b4:	4417      	add	r7, r2
 80094b6:	4659      	mov	r1, fp
 80094b8:	2201      	movs	r2, #1
 80094ba:	4628      	mov	r0, r5
 80094bc:	9308      	str	r3, [sp, #32]
 80094be:	f000 ff0b 	bl	800a2d8 <__lshift>
 80094c2:	4621      	mov	r1, r4
 80094c4:	4683      	mov	fp, r0
 80094c6:	f000 ff77 	bl	800a3b8 <__mcmp>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	dcb2      	bgt.n	8009434 <_dtoa_r+0xac4>
 80094ce:	d102      	bne.n	80094d6 <_dtoa_r+0xb66>
 80094d0:	9b08      	ldr	r3, [sp, #32]
 80094d2:	07db      	lsls	r3, r3, #31
 80094d4:	d4ae      	bmi.n	8009434 <_dtoa_r+0xac4>
 80094d6:	463b      	mov	r3, r7
 80094d8:	461f      	mov	r7, r3
 80094da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094de:	2a30      	cmp	r2, #48	; 0x30
 80094e0:	d0fa      	beq.n	80094d8 <_dtoa_r+0xb68>
 80094e2:	e6f9      	b.n	80092d8 <_dtoa_r+0x968>
 80094e4:	9a03      	ldr	r2, [sp, #12]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d1a5      	bne.n	8009436 <_dtoa_r+0xac6>
 80094ea:	2331      	movs	r3, #49	; 0x31
 80094ec:	f10a 0a01 	add.w	sl, sl, #1
 80094f0:	e779      	b.n	80093e6 <_dtoa_r+0xa76>
 80094f2:	4b14      	ldr	r3, [pc, #80]	; (8009544 <_dtoa_r+0xbd4>)
 80094f4:	f7ff baa8 	b.w	8008a48 <_dtoa_r+0xd8>
 80094f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f47f aa81 	bne.w	8008a02 <_dtoa_r+0x92>
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <_dtoa_r+0xbd8>)
 8009502:	f7ff baa1 	b.w	8008a48 <_dtoa_r+0xd8>
 8009506:	f1b9 0f00 	cmp.w	r9, #0
 800950a:	dc03      	bgt.n	8009514 <_dtoa_r+0xba4>
 800950c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800950e:	2b02      	cmp	r3, #2
 8009510:	f73f aecb 	bgt.w	80092aa <_dtoa_r+0x93a>
 8009514:	9f03      	ldr	r7, [sp, #12]
 8009516:	4621      	mov	r1, r4
 8009518:	4658      	mov	r0, fp
 800951a:	f7ff f99b 	bl	8008854 <quorem>
 800951e:	9a03      	ldr	r2, [sp, #12]
 8009520:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009524:	f807 3b01 	strb.w	r3, [r7], #1
 8009528:	1aba      	subs	r2, r7, r2
 800952a:	4591      	cmp	r9, r2
 800952c:	ddba      	ble.n	80094a4 <_dtoa_r+0xb34>
 800952e:	4659      	mov	r1, fp
 8009530:	2300      	movs	r3, #0
 8009532:	220a      	movs	r2, #10
 8009534:	4628      	mov	r0, r5
 8009536:	f000 fcd9 	bl	8009eec <__multadd>
 800953a:	4683      	mov	fp, r0
 800953c:	e7eb      	b.n	8009516 <_dtoa_r+0xba6>
 800953e:	bf00      	nop
 8009540:	0800b578 	.word	0x0800b578
 8009544:	0800b37c 	.word	0x0800b37c
 8009548:	0800b4f9 	.word	0x0800b4f9

0800954c <__sflush_r>:
 800954c:	898a      	ldrh	r2, [r1, #12]
 800954e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009550:	4605      	mov	r5, r0
 8009552:	0710      	lsls	r0, r2, #28
 8009554:	460c      	mov	r4, r1
 8009556:	d457      	bmi.n	8009608 <__sflush_r+0xbc>
 8009558:	684b      	ldr	r3, [r1, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	dc04      	bgt.n	8009568 <__sflush_r+0x1c>
 800955e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009560:	2b00      	cmp	r3, #0
 8009562:	dc01      	bgt.n	8009568 <__sflush_r+0x1c>
 8009564:	2000      	movs	r0, #0
 8009566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800956a:	2e00      	cmp	r6, #0
 800956c:	d0fa      	beq.n	8009564 <__sflush_r+0x18>
 800956e:	2300      	movs	r3, #0
 8009570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009574:	682f      	ldr	r7, [r5, #0]
 8009576:	602b      	str	r3, [r5, #0]
 8009578:	d032      	beq.n	80095e0 <__sflush_r+0x94>
 800957a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	075a      	lsls	r2, r3, #29
 8009580:	d505      	bpl.n	800958e <__sflush_r+0x42>
 8009582:	6863      	ldr	r3, [r4, #4]
 8009584:	1ac0      	subs	r0, r0, r3
 8009586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009588:	b10b      	cbz	r3, 800958e <__sflush_r+0x42>
 800958a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800958c:	1ac0      	subs	r0, r0, r3
 800958e:	2300      	movs	r3, #0
 8009590:	4602      	mov	r2, r0
 8009592:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009594:	4628      	mov	r0, r5
 8009596:	6a21      	ldr	r1, [r4, #32]
 8009598:	47b0      	blx	r6
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	89a3      	ldrh	r3, [r4, #12]
 800959e:	d106      	bne.n	80095ae <__sflush_r+0x62>
 80095a0:	6829      	ldr	r1, [r5, #0]
 80095a2:	291d      	cmp	r1, #29
 80095a4:	d82c      	bhi.n	8009600 <__sflush_r+0xb4>
 80095a6:	4a29      	ldr	r2, [pc, #164]	; (800964c <__sflush_r+0x100>)
 80095a8:	40ca      	lsrs	r2, r1
 80095aa:	07d6      	lsls	r6, r2, #31
 80095ac:	d528      	bpl.n	8009600 <__sflush_r+0xb4>
 80095ae:	2200      	movs	r2, #0
 80095b0:	6062      	str	r2, [r4, #4]
 80095b2:	6922      	ldr	r2, [r4, #16]
 80095b4:	04d9      	lsls	r1, r3, #19
 80095b6:	6022      	str	r2, [r4, #0]
 80095b8:	d504      	bpl.n	80095c4 <__sflush_r+0x78>
 80095ba:	1c42      	adds	r2, r0, #1
 80095bc:	d101      	bne.n	80095c2 <__sflush_r+0x76>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	b903      	cbnz	r3, 80095c4 <__sflush_r+0x78>
 80095c2:	6560      	str	r0, [r4, #84]	; 0x54
 80095c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095c6:	602f      	str	r7, [r5, #0]
 80095c8:	2900      	cmp	r1, #0
 80095ca:	d0cb      	beq.n	8009564 <__sflush_r+0x18>
 80095cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095d0:	4299      	cmp	r1, r3
 80095d2:	d002      	beq.n	80095da <__sflush_r+0x8e>
 80095d4:	4628      	mov	r0, r5
 80095d6:	f001 f8f3 	bl	800a7c0 <_free_r>
 80095da:	2000      	movs	r0, #0
 80095dc:	6360      	str	r0, [r4, #52]	; 0x34
 80095de:	e7c2      	b.n	8009566 <__sflush_r+0x1a>
 80095e0:	6a21      	ldr	r1, [r4, #32]
 80095e2:	2301      	movs	r3, #1
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b0      	blx	r6
 80095e8:	1c41      	adds	r1, r0, #1
 80095ea:	d1c7      	bne.n	800957c <__sflush_r+0x30>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0c4      	beq.n	800957c <__sflush_r+0x30>
 80095f2:	2b1d      	cmp	r3, #29
 80095f4:	d001      	beq.n	80095fa <__sflush_r+0xae>
 80095f6:	2b16      	cmp	r3, #22
 80095f8:	d101      	bne.n	80095fe <__sflush_r+0xb2>
 80095fa:	602f      	str	r7, [r5, #0]
 80095fc:	e7b2      	b.n	8009564 <__sflush_r+0x18>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	e7ae      	b.n	8009566 <__sflush_r+0x1a>
 8009608:	690f      	ldr	r7, [r1, #16]
 800960a:	2f00      	cmp	r7, #0
 800960c:	d0aa      	beq.n	8009564 <__sflush_r+0x18>
 800960e:	0793      	lsls	r3, r2, #30
 8009610:	bf18      	it	ne
 8009612:	2300      	movne	r3, #0
 8009614:	680e      	ldr	r6, [r1, #0]
 8009616:	bf08      	it	eq
 8009618:	694b      	ldreq	r3, [r1, #20]
 800961a:	1bf6      	subs	r6, r6, r7
 800961c:	600f      	str	r7, [r1, #0]
 800961e:	608b      	str	r3, [r1, #8]
 8009620:	2e00      	cmp	r6, #0
 8009622:	dd9f      	ble.n	8009564 <__sflush_r+0x18>
 8009624:	4633      	mov	r3, r6
 8009626:	463a      	mov	r2, r7
 8009628:	4628      	mov	r0, r5
 800962a:	6a21      	ldr	r1, [r4, #32]
 800962c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009630:	47e0      	blx	ip
 8009632:	2800      	cmp	r0, #0
 8009634:	dc06      	bgt.n	8009644 <__sflush_r+0xf8>
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	f04f 30ff 	mov.w	r0, #4294967295
 800963c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	e790      	b.n	8009566 <__sflush_r+0x1a>
 8009644:	4407      	add	r7, r0
 8009646:	1a36      	subs	r6, r6, r0
 8009648:	e7ea      	b.n	8009620 <__sflush_r+0xd4>
 800964a:	bf00      	nop
 800964c:	20400001 	.word	0x20400001

08009650 <_fflush_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	690b      	ldr	r3, [r1, #16]
 8009654:	4605      	mov	r5, r0
 8009656:	460c      	mov	r4, r1
 8009658:	b913      	cbnz	r3, 8009660 <_fflush_r+0x10>
 800965a:	2500      	movs	r5, #0
 800965c:	4628      	mov	r0, r5
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	b118      	cbz	r0, 800966a <_fflush_r+0x1a>
 8009662:	6983      	ldr	r3, [r0, #24]
 8009664:	b90b      	cbnz	r3, 800966a <_fflush_r+0x1a>
 8009666:	f7fd f951 	bl	800690c <__sinit>
 800966a:	4b14      	ldr	r3, [pc, #80]	; (80096bc <_fflush_r+0x6c>)
 800966c:	429c      	cmp	r4, r3
 800966e:	d11b      	bne.n	80096a8 <_fflush_r+0x58>
 8009670:	686c      	ldr	r4, [r5, #4]
 8009672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0ef      	beq.n	800965a <_fflush_r+0xa>
 800967a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800967c:	07d0      	lsls	r0, r2, #31
 800967e:	d404      	bmi.n	800968a <_fflush_r+0x3a>
 8009680:	0599      	lsls	r1, r3, #22
 8009682:	d402      	bmi.n	800968a <_fflush_r+0x3a>
 8009684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009686:	f7fd fa04 	bl	8006a92 <__retarget_lock_acquire_recursive>
 800968a:	4628      	mov	r0, r5
 800968c:	4621      	mov	r1, r4
 800968e:	f7ff ff5d 	bl	800954c <__sflush_r>
 8009692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009694:	4605      	mov	r5, r0
 8009696:	07da      	lsls	r2, r3, #31
 8009698:	d4e0      	bmi.n	800965c <_fflush_r+0xc>
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	059b      	lsls	r3, r3, #22
 800969e:	d4dd      	bmi.n	800965c <_fflush_r+0xc>
 80096a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096a2:	f7fd f9f7 	bl	8006a94 <__retarget_lock_release_recursive>
 80096a6:	e7d9      	b.n	800965c <_fflush_r+0xc>
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <_fflush_r+0x70>)
 80096aa:	429c      	cmp	r4, r3
 80096ac:	d101      	bne.n	80096b2 <_fflush_r+0x62>
 80096ae:	68ac      	ldr	r4, [r5, #8]
 80096b0:	e7df      	b.n	8009672 <_fflush_r+0x22>
 80096b2:	4b04      	ldr	r3, [pc, #16]	; (80096c4 <_fflush_r+0x74>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	bf08      	it	eq
 80096b8:	68ec      	ldreq	r4, [r5, #12]
 80096ba:	e7da      	b.n	8009672 <_fflush_r+0x22>
 80096bc:	0800b328 	.word	0x0800b328
 80096c0:	0800b348 	.word	0x0800b348
 80096c4:	0800b308 	.word	0x0800b308

080096c8 <rshift>:
 80096c8:	6903      	ldr	r3, [r0, #16]
 80096ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096d2:	f100 0414 	add.w	r4, r0, #20
 80096d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096da:	dd46      	ble.n	800976a <rshift+0xa2>
 80096dc:	f011 011f 	ands.w	r1, r1, #31
 80096e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80096e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80096e8:	d10c      	bne.n	8009704 <rshift+0x3c>
 80096ea:	4629      	mov	r1, r5
 80096ec:	f100 0710 	add.w	r7, r0, #16
 80096f0:	42b1      	cmp	r1, r6
 80096f2:	d335      	bcc.n	8009760 <rshift+0x98>
 80096f4:	1a9b      	subs	r3, r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	1eea      	subs	r2, r5, #3
 80096fa:	4296      	cmp	r6, r2
 80096fc:	bf38      	it	cc
 80096fe:	2300      	movcc	r3, #0
 8009700:	4423      	add	r3, r4
 8009702:	e015      	b.n	8009730 <rshift+0x68>
 8009704:	46a1      	mov	r9, r4
 8009706:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800970a:	f1c1 0820 	rsb	r8, r1, #32
 800970e:	40cf      	lsrs	r7, r1
 8009710:	f105 0e04 	add.w	lr, r5, #4
 8009714:	4576      	cmp	r6, lr
 8009716:	46f4      	mov	ip, lr
 8009718:	d816      	bhi.n	8009748 <rshift+0x80>
 800971a:	1a9a      	subs	r2, r3, r2
 800971c:	0092      	lsls	r2, r2, #2
 800971e:	3a04      	subs	r2, #4
 8009720:	3501      	adds	r5, #1
 8009722:	42ae      	cmp	r6, r5
 8009724:	bf38      	it	cc
 8009726:	2200      	movcc	r2, #0
 8009728:	18a3      	adds	r3, r4, r2
 800972a:	50a7      	str	r7, [r4, r2]
 800972c:	b107      	cbz	r7, 8009730 <rshift+0x68>
 800972e:	3304      	adds	r3, #4
 8009730:	42a3      	cmp	r3, r4
 8009732:	eba3 0204 	sub.w	r2, r3, r4
 8009736:	bf08      	it	eq
 8009738:	2300      	moveq	r3, #0
 800973a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800973e:	6102      	str	r2, [r0, #16]
 8009740:	bf08      	it	eq
 8009742:	6143      	streq	r3, [r0, #20]
 8009744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009748:	f8dc c000 	ldr.w	ip, [ip]
 800974c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009750:	ea4c 0707 	orr.w	r7, ip, r7
 8009754:	f849 7b04 	str.w	r7, [r9], #4
 8009758:	f85e 7b04 	ldr.w	r7, [lr], #4
 800975c:	40cf      	lsrs	r7, r1
 800975e:	e7d9      	b.n	8009714 <rshift+0x4c>
 8009760:	f851 cb04 	ldr.w	ip, [r1], #4
 8009764:	f847 cf04 	str.w	ip, [r7, #4]!
 8009768:	e7c2      	b.n	80096f0 <rshift+0x28>
 800976a:	4623      	mov	r3, r4
 800976c:	e7e0      	b.n	8009730 <rshift+0x68>

0800976e <__hexdig_fun>:
 800976e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009772:	2b09      	cmp	r3, #9
 8009774:	d802      	bhi.n	800977c <__hexdig_fun+0xe>
 8009776:	3820      	subs	r0, #32
 8009778:	b2c0      	uxtb	r0, r0
 800977a:	4770      	bx	lr
 800977c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009780:	2b05      	cmp	r3, #5
 8009782:	d801      	bhi.n	8009788 <__hexdig_fun+0x1a>
 8009784:	3847      	subs	r0, #71	; 0x47
 8009786:	e7f7      	b.n	8009778 <__hexdig_fun+0xa>
 8009788:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800978c:	2b05      	cmp	r3, #5
 800978e:	d801      	bhi.n	8009794 <__hexdig_fun+0x26>
 8009790:	3827      	subs	r0, #39	; 0x27
 8009792:	e7f1      	b.n	8009778 <__hexdig_fun+0xa>
 8009794:	2000      	movs	r0, #0
 8009796:	4770      	bx	lr

08009798 <__gethex>:
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	b08b      	sub	sp, #44	; 0x2c
 800979e:	9305      	str	r3, [sp, #20]
 80097a0:	4bb2      	ldr	r3, [pc, #712]	; (8009a6c <__gethex+0x2d4>)
 80097a2:	9002      	str	r0, [sp, #8]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	468b      	mov	fp, r1
 80097a8:	4618      	mov	r0, r3
 80097aa:	4690      	mov	r8, r2
 80097ac:	9303      	str	r3, [sp, #12]
 80097ae:	f7f6 fccf 	bl	8000150 <strlen>
 80097b2:	4682      	mov	sl, r0
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	f8db 2000 	ldr.w	r2, [fp]
 80097ba:	4403      	add	r3, r0
 80097bc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80097c0:	9306      	str	r3, [sp, #24]
 80097c2:	1c93      	adds	r3, r2, #2
 80097c4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80097c8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80097cc:	32fe      	adds	r2, #254	; 0xfe
 80097ce:	18d1      	adds	r1, r2, r3
 80097d0:	461f      	mov	r7, r3
 80097d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097d6:	9101      	str	r1, [sp, #4]
 80097d8:	2830      	cmp	r0, #48	; 0x30
 80097da:	d0f8      	beq.n	80097ce <__gethex+0x36>
 80097dc:	f7ff ffc7 	bl	800976e <__hexdig_fun>
 80097e0:	4604      	mov	r4, r0
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d13a      	bne.n	800985c <__gethex+0xc4>
 80097e6:	4652      	mov	r2, sl
 80097e8:	4638      	mov	r0, r7
 80097ea:	9903      	ldr	r1, [sp, #12]
 80097ec:	f001 f9a4 	bl	800ab38 <strncmp>
 80097f0:	4605      	mov	r5, r0
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d166      	bne.n	80098c4 <__gethex+0x12c>
 80097f6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80097fa:	eb07 060a 	add.w	r6, r7, sl
 80097fe:	f7ff ffb6 	bl	800976e <__hexdig_fun>
 8009802:	2800      	cmp	r0, #0
 8009804:	d060      	beq.n	80098c8 <__gethex+0x130>
 8009806:	4633      	mov	r3, r6
 8009808:	7818      	ldrb	r0, [r3, #0]
 800980a:	461f      	mov	r7, r3
 800980c:	2830      	cmp	r0, #48	; 0x30
 800980e:	f103 0301 	add.w	r3, r3, #1
 8009812:	d0f9      	beq.n	8009808 <__gethex+0x70>
 8009814:	f7ff ffab 	bl	800976e <__hexdig_fun>
 8009818:	2301      	movs	r3, #1
 800981a:	fab0 f480 	clz	r4, r0
 800981e:	4635      	mov	r5, r6
 8009820:	0964      	lsrs	r4, r4, #5
 8009822:	9301      	str	r3, [sp, #4]
 8009824:	463a      	mov	r2, r7
 8009826:	4616      	mov	r6, r2
 8009828:	7830      	ldrb	r0, [r6, #0]
 800982a:	3201      	adds	r2, #1
 800982c:	f7ff ff9f 	bl	800976e <__hexdig_fun>
 8009830:	2800      	cmp	r0, #0
 8009832:	d1f8      	bne.n	8009826 <__gethex+0x8e>
 8009834:	4652      	mov	r2, sl
 8009836:	4630      	mov	r0, r6
 8009838:	9903      	ldr	r1, [sp, #12]
 800983a:	f001 f97d 	bl	800ab38 <strncmp>
 800983e:	b980      	cbnz	r0, 8009862 <__gethex+0xca>
 8009840:	b94d      	cbnz	r5, 8009856 <__gethex+0xbe>
 8009842:	eb06 050a 	add.w	r5, r6, sl
 8009846:	462a      	mov	r2, r5
 8009848:	4616      	mov	r6, r2
 800984a:	7830      	ldrb	r0, [r6, #0]
 800984c:	3201      	adds	r2, #1
 800984e:	f7ff ff8e 	bl	800976e <__hexdig_fun>
 8009852:	2800      	cmp	r0, #0
 8009854:	d1f8      	bne.n	8009848 <__gethex+0xb0>
 8009856:	1bad      	subs	r5, r5, r6
 8009858:	00ad      	lsls	r5, r5, #2
 800985a:	e004      	b.n	8009866 <__gethex+0xce>
 800985c:	2400      	movs	r4, #0
 800985e:	4625      	mov	r5, r4
 8009860:	e7e0      	b.n	8009824 <__gethex+0x8c>
 8009862:	2d00      	cmp	r5, #0
 8009864:	d1f7      	bne.n	8009856 <__gethex+0xbe>
 8009866:	7833      	ldrb	r3, [r6, #0]
 8009868:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800986c:	2b50      	cmp	r3, #80	; 0x50
 800986e:	d139      	bne.n	80098e4 <__gethex+0x14c>
 8009870:	7873      	ldrb	r3, [r6, #1]
 8009872:	2b2b      	cmp	r3, #43	; 0x2b
 8009874:	d02a      	beq.n	80098cc <__gethex+0x134>
 8009876:	2b2d      	cmp	r3, #45	; 0x2d
 8009878:	d02c      	beq.n	80098d4 <__gethex+0x13c>
 800987a:	f04f 0900 	mov.w	r9, #0
 800987e:	1c71      	adds	r1, r6, #1
 8009880:	7808      	ldrb	r0, [r1, #0]
 8009882:	f7ff ff74 	bl	800976e <__hexdig_fun>
 8009886:	1e43      	subs	r3, r0, #1
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b18      	cmp	r3, #24
 800988c:	d82a      	bhi.n	80098e4 <__gethex+0x14c>
 800988e:	f1a0 0210 	sub.w	r2, r0, #16
 8009892:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009896:	f7ff ff6a 	bl	800976e <__hexdig_fun>
 800989a:	1e43      	subs	r3, r0, #1
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b18      	cmp	r3, #24
 80098a0:	d91b      	bls.n	80098da <__gethex+0x142>
 80098a2:	f1b9 0f00 	cmp.w	r9, #0
 80098a6:	d000      	beq.n	80098aa <__gethex+0x112>
 80098a8:	4252      	negs	r2, r2
 80098aa:	4415      	add	r5, r2
 80098ac:	f8cb 1000 	str.w	r1, [fp]
 80098b0:	b1d4      	cbz	r4, 80098e8 <__gethex+0x150>
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bf14      	ite	ne
 80098b8:	2700      	movne	r7, #0
 80098ba:	2706      	moveq	r7, #6
 80098bc:	4638      	mov	r0, r7
 80098be:	b00b      	add	sp, #44	; 0x2c
 80098c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c4:	463e      	mov	r6, r7
 80098c6:	4625      	mov	r5, r4
 80098c8:	2401      	movs	r4, #1
 80098ca:	e7cc      	b.n	8009866 <__gethex+0xce>
 80098cc:	f04f 0900 	mov.w	r9, #0
 80098d0:	1cb1      	adds	r1, r6, #2
 80098d2:	e7d5      	b.n	8009880 <__gethex+0xe8>
 80098d4:	f04f 0901 	mov.w	r9, #1
 80098d8:	e7fa      	b.n	80098d0 <__gethex+0x138>
 80098da:	230a      	movs	r3, #10
 80098dc:	fb03 0202 	mla	r2, r3, r2, r0
 80098e0:	3a10      	subs	r2, #16
 80098e2:	e7d6      	b.n	8009892 <__gethex+0xfa>
 80098e4:	4631      	mov	r1, r6
 80098e6:	e7e1      	b.n	80098ac <__gethex+0x114>
 80098e8:	4621      	mov	r1, r4
 80098ea:	1bf3      	subs	r3, r6, r7
 80098ec:	3b01      	subs	r3, #1
 80098ee:	2b07      	cmp	r3, #7
 80098f0:	dc0a      	bgt.n	8009908 <__gethex+0x170>
 80098f2:	9802      	ldr	r0, [sp, #8]
 80098f4:	f000 fa98 	bl	8009e28 <_Balloc>
 80098f8:	4604      	mov	r4, r0
 80098fa:	b940      	cbnz	r0, 800990e <__gethex+0x176>
 80098fc:	4602      	mov	r2, r0
 80098fe:	21de      	movs	r1, #222	; 0xde
 8009900:	4b5b      	ldr	r3, [pc, #364]	; (8009a70 <__gethex+0x2d8>)
 8009902:	485c      	ldr	r0, [pc, #368]	; (8009a74 <__gethex+0x2dc>)
 8009904:	f001 f93a 	bl	800ab7c <__assert_func>
 8009908:	3101      	adds	r1, #1
 800990a:	105b      	asrs	r3, r3, #1
 800990c:	e7ef      	b.n	80098ee <__gethex+0x156>
 800990e:	f04f 0b00 	mov.w	fp, #0
 8009912:	f100 0914 	add.w	r9, r0, #20
 8009916:	f1ca 0301 	rsb	r3, sl, #1
 800991a:	f8cd 9010 	str.w	r9, [sp, #16]
 800991e:	f8cd b004 	str.w	fp, [sp, #4]
 8009922:	9308      	str	r3, [sp, #32]
 8009924:	42b7      	cmp	r7, r6
 8009926:	d33f      	bcc.n	80099a8 <__gethex+0x210>
 8009928:	9f04      	ldr	r7, [sp, #16]
 800992a:	9b01      	ldr	r3, [sp, #4]
 800992c:	f847 3b04 	str.w	r3, [r7], #4
 8009930:	eba7 0709 	sub.w	r7, r7, r9
 8009934:	10bf      	asrs	r7, r7, #2
 8009936:	6127      	str	r7, [r4, #16]
 8009938:	4618      	mov	r0, r3
 800993a:	f000 fb67 	bl	800a00c <__hi0bits>
 800993e:	017f      	lsls	r7, r7, #5
 8009940:	f8d8 6000 	ldr.w	r6, [r8]
 8009944:	1a3f      	subs	r7, r7, r0
 8009946:	42b7      	cmp	r7, r6
 8009948:	dd62      	ble.n	8009a10 <__gethex+0x278>
 800994a:	1bbf      	subs	r7, r7, r6
 800994c:	4639      	mov	r1, r7
 800994e:	4620      	mov	r0, r4
 8009950:	f000 ff01 	bl	800a756 <__any_on>
 8009954:	4682      	mov	sl, r0
 8009956:	b1a8      	cbz	r0, 8009984 <__gethex+0x1ec>
 8009958:	f04f 0a01 	mov.w	sl, #1
 800995c:	1e7b      	subs	r3, r7, #1
 800995e:	1159      	asrs	r1, r3, #5
 8009960:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009964:	f003 021f 	and.w	r2, r3, #31
 8009968:	fa0a f202 	lsl.w	r2, sl, r2
 800996c:	420a      	tst	r2, r1
 800996e:	d009      	beq.n	8009984 <__gethex+0x1ec>
 8009970:	4553      	cmp	r3, sl
 8009972:	dd05      	ble.n	8009980 <__gethex+0x1e8>
 8009974:	4620      	mov	r0, r4
 8009976:	1eb9      	subs	r1, r7, #2
 8009978:	f000 feed 	bl	800a756 <__any_on>
 800997c:	2800      	cmp	r0, #0
 800997e:	d144      	bne.n	8009a0a <__gethex+0x272>
 8009980:	f04f 0a02 	mov.w	sl, #2
 8009984:	4639      	mov	r1, r7
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff fe9e 	bl	80096c8 <rshift>
 800998c:	443d      	add	r5, r7
 800998e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009992:	42ab      	cmp	r3, r5
 8009994:	da4a      	bge.n	8009a2c <__gethex+0x294>
 8009996:	4621      	mov	r1, r4
 8009998:	9802      	ldr	r0, [sp, #8]
 800999a:	f000 fa85 	bl	8009ea8 <_Bfree>
 800999e:	2300      	movs	r3, #0
 80099a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099a2:	27a3      	movs	r7, #163	; 0xa3
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	e789      	b.n	80098bc <__gethex+0x124>
 80099a8:	1e73      	subs	r3, r6, #1
 80099aa:	9a06      	ldr	r2, [sp, #24]
 80099ac:	9307      	str	r3, [sp, #28]
 80099ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d019      	beq.n	80099ea <__gethex+0x252>
 80099b6:	f1bb 0f20 	cmp.w	fp, #32
 80099ba:	d107      	bne.n	80099cc <__gethex+0x234>
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	9a01      	ldr	r2, [sp, #4]
 80099c0:	f843 2b04 	str.w	r2, [r3], #4
 80099c4:	9304      	str	r3, [sp, #16]
 80099c6:	2300      	movs	r3, #0
 80099c8:	469b      	mov	fp, r3
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80099d0:	f7ff fecd 	bl	800976e <__hexdig_fun>
 80099d4:	9b01      	ldr	r3, [sp, #4]
 80099d6:	f000 000f 	and.w	r0, r0, #15
 80099da:	fa00 f00b 	lsl.w	r0, r0, fp
 80099de:	4303      	orrs	r3, r0
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f10b 0b04 	add.w	fp, fp, #4
 80099e6:	9b07      	ldr	r3, [sp, #28]
 80099e8:	e00d      	b.n	8009a06 <__gethex+0x26e>
 80099ea:	9a08      	ldr	r2, [sp, #32]
 80099ec:	1e73      	subs	r3, r6, #1
 80099ee:	4413      	add	r3, r2
 80099f0:	42bb      	cmp	r3, r7
 80099f2:	d3e0      	bcc.n	80099b6 <__gethex+0x21e>
 80099f4:	4618      	mov	r0, r3
 80099f6:	4652      	mov	r2, sl
 80099f8:	9903      	ldr	r1, [sp, #12]
 80099fa:	9309      	str	r3, [sp, #36]	; 0x24
 80099fc:	f001 f89c 	bl	800ab38 <strncmp>
 8009a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d1d7      	bne.n	80099b6 <__gethex+0x21e>
 8009a06:	461e      	mov	r6, r3
 8009a08:	e78c      	b.n	8009924 <__gethex+0x18c>
 8009a0a:	f04f 0a03 	mov.w	sl, #3
 8009a0e:	e7b9      	b.n	8009984 <__gethex+0x1ec>
 8009a10:	da09      	bge.n	8009a26 <__gethex+0x28e>
 8009a12:	1bf7      	subs	r7, r6, r7
 8009a14:	4621      	mov	r1, r4
 8009a16:	463a      	mov	r2, r7
 8009a18:	9802      	ldr	r0, [sp, #8]
 8009a1a:	f000 fc5d 	bl	800a2d8 <__lshift>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	1bed      	subs	r5, r5, r7
 8009a22:	f100 0914 	add.w	r9, r0, #20
 8009a26:	f04f 0a00 	mov.w	sl, #0
 8009a2a:	e7b0      	b.n	800998e <__gethex+0x1f6>
 8009a2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a30:	42a8      	cmp	r0, r5
 8009a32:	dd72      	ble.n	8009b1a <__gethex+0x382>
 8009a34:	1b45      	subs	r5, r0, r5
 8009a36:	42ae      	cmp	r6, r5
 8009a38:	dc35      	bgt.n	8009aa6 <__gethex+0x30e>
 8009a3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d029      	beq.n	8009a96 <__gethex+0x2fe>
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d02b      	beq.n	8009a9e <__gethex+0x306>
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d11c      	bne.n	8009a84 <__gethex+0x2ec>
 8009a4a:	42ae      	cmp	r6, r5
 8009a4c:	d11a      	bne.n	8009a84 <__gethex+0x2ec>
 8009a4e:	2e01      	cmp	r6, #1
 8009a50:	d112      	bne.n	8009a78 <__gethex+0x2e0>
 8009a52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a56:	9a05      	ldr	r2, [sp, #20]
 8009a58:	2762      	movs	r7, #98	; 0x62
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	f8c9 3000 	str.w	r3, [r9]
 8009a64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a66:	601c      	str	r4, [r3, #0]
 8009a68:	e728      	b.n	80098bc <__gethex+0x124>
 8009a6a:	bf00      	nop
 8009a6c:	0800b5f0 	.word	0x0800b5f0
 8009a70:	0800b578 	.word	0x0800b578
 8009a74:	0800b589 	.word	0x0800b589
 8009a78:	4620      	mov	r0, r4
 8009a7a:	1e71      	subs	r1, r6, #1
 8009a7c:	f000 fe6b 	bl	800a756 <__any_on>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d1e6      	bne.n	8009a52 <__gethex+0x2ba>
 8009a84:	4621      	mov	r1, r4
 8009a86:	9802      	ldr	r0, [sp, #8]
 8009a88:	f000 fa0e 	bl	8009ea8 <_Bfree>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a90:	2750      	movs	r7, #80	; 0x50
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	e712      	b.n	80098bc <__gethex+0x124>
 8009a96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f3      	bne.n	8009a84 <__gethex+0x2ec>
 8009a9c:	e7d9      	b.n	8009a52 <__gethex+0x2ba>
 8009a9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1d6      	bne.n	8009a52 <__gethex+0x2ba>
 8009aa4:	e7ee      	b.n	8009a84 <__gethex+0x2ec>
 8009aa6:	1e6f      	subs	r7, r5, #1
 8009aa8:	f1ba 0f00 	cmp.w	sl, #0
 8009aac:	d132      	bne.n	8009b14 <__gethex+0x37c>
 8009aae:	b127      	cbz	r7, 8009aba <__gethex+0x322>
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f000 fe4f 	bl	800a756 <__any_on>
 8009ab8:	4682      	mov	sl, r0
 8009aba:	2101      	movs	r1, #1
 8009abc:	117b      	asrs	r3, r7, #5
 8009abe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009ac2:	f007 071f 	and.w	r7, r7, #31
 8009ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8009aca:	421f      	tst	r7, r3
 8009acc:	f04f 0702 	mov.w	r7, #2
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	bf18      	it	ne
 8009ad6:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ada:	1b76      	subs	r6, r6, r5
 8009adc:	f7ff fdf4 	bl	80096c8 <rshift>
 8009ae0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ae4:	f1ba 0f00 	cmp.w	sl, #0
 8009ae8:	d048      	beq.n	8009b7c <__gethex+0x3e4>
 8009aea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d015      	beq.n	8009b1e <__gethex+0x386>
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d017      	beq.n	8009b26 <__gethex+0x38e>
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d109      	bne.n	8009b0e <__gethex+0x376>
 8009afa:	f01a 0f02 	tst.w	sl, #2
 8009afe:	d006      	beq.n	8009b0e <__gethex+0x376>
 8009b00:	f8d9 0000 	ldr.w	r0, [r9]
 8009b04:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b08:	f01a 0f01 	tst.w	sl, #1
 8009b0c:	d10e      	bne.n	8009b2c <__gethex+0x394>
 8009b0e:	f047 0710 	orr.w	r7, r7, #16
 8009b12:	e033      	b.n	8009b7c <__gethex+0x3e4>
 8009b14:	f04f 0a01 	mov.w	sl, #1
 8009b18:	e7cf      	b.n	8009aba <__gethex+0x322>
 8009b1a:	2701      	movs	r7, #1
 8009b1c:	e7e2      	b.n	8009ae4 <__gethex+0x34c>
 8009b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b20:	f1c3 0301 	rsb	r3, r3, #1
 8009b24:	9315      	str	r3, [sp, #84]	; 0x54
 8009b26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0f0      	beq.n	8009b0e <__gethex+0x376>
 8009b2c:	f04f 0c00 	mov.w	ip, #0
 8009b30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b34:	f104 0314 	add.w	r3, r4, #20
 8009b38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b40:	4618      	mov	r0, r3
 8009b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b46:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b4a:	d01c      	beq.n	8009b86 <__gethex+0x3ee>
 8009b4c:	3201      	adds	r2, #1
 8009b4e:	6002      	str	r2, [r0, #0]
 8009b50:	2f02      	cmp	r7, #2
 8009b52:	f104 0314 	add.w	r3, r4, #20
 8009b56:	d13d      	bne.n	8009bd4 <__gethex+0x43c>
 8009b58:	f8d8 2000 	ldr.w	r2, [r8]
 8009b5c:	3a01      	subs	r2, #1
 8009b5e:	42b2      	cmp	r2, r6
 8009b60:	d10a      	bne.n	8009b78 <__gethex+0x3e0>
 8009b62:	2201      	movs	r2, #1
 8009b64:	1171      	asrs	r1, r6, #5
 8009b66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b6a:	f006 061f 	and.w	r6, r6, #31
 8009b6e:	fa02 f606 	lsl.w	r6, r2, r6
 8009b72:	421e      	tst	r6, r3
 8009b74:	bf18      	it	ne
 8009b76:	4617      	movne	r7, r2
 8009b78:	f047 0720 	orr.w	r7, r7, #32
 8009b7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b7e:	601c      	str	r4, [r3, #0]
 8009b80:	9b05      	ldr	r3, [sp, #20]
 8009b82:	601d      	str	r5, [r3, #0]
 8009b84:	e69a      	b.n	80098bc <__gethex+0x124>
 8009b86:	4299      	cmp	r1, r3
 8009b88:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b8c:	d8d8      	bhi.n	8009b40 <__gethex+0x3a8>
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	459b      	cmp	fp, r3
 8009b92:	db17      	blt.n	8009bc4 <__gethex+0x42c>
 8009b94:	6861      	ldr	r1, [r4, #4]
 8009b96:	9802      	ldr	r0, [sp, #8]
 8009b98:	3101      	adds	r1, #1
 8009b9a:	f000 f945 	bl	8009e28 <_Balloc>
 8009b9e:	4681      	mov	r9, r0
 8009ba0:	b918      	cbnz	r0, 8009baa <__gethex+0x412>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	2184      	movs	r1, #132	; 0x84
 8009ba6:	4b19      	ldr	r3, [pc, #100]	; (8009c0c <__gethex+0x474>)
 8009ba8:	e6ab      	b.n	8009902 <__gethex+0x16a>
 8009baa:	6922      	ldr	r2, [r4, #16]
 8009bac:	f104 010c 	add.w	r1, r4, #12
 8009bb0:	3202      	adds	r2, #2
 8009bb2:	0092      	lsls	r2, r2, #2
 8009bb4:	300c      	adds	r0, #12
 8009bb6:	f7fc ff6e 	bl	8006a96 <memcpy>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	9802      	ldr	r0, [sp, #8]
 8009bbe:	f000 f973 	bl	8009ea8 <_Bfree>
 8009bc2:	464c      	mov	r4, r9
 8009bc4:	6923      	ldr	r3, [r4, #16]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	6122      	str	r2, [r4, #16]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bd0:	615a      	str	r2, [r3, #20]
 8009bd2:	e7bd      	b.n	8009b50 <__gethex+0x3b8>
 8009bd4:	6922      	ldr	r2, [r4, #16]
 8009bd6:	455a      	cmp	r2, fp
 8009bd8:	dd0b      	ble.n	8009bf2 <__gethex+0x45a>
 8009bda:	2101      	movs	r1, #1
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f7ff fd73 	bl	80096c8 <rshift>
 8009be2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009be6:	3501      	adds	r5, #1
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	f6ff aed4 	blt.w	8009996 <__gethex+0x1fe>
 8009bee:	2701      	movs	r7, #1
 8009bf0:	e7c2      	b.n	8009b78 <__gethex+0x3e0>
 8009bf2:	f016 061f 	ands.w	r6, r6, #31
 8009bf6:	d0fa      	beq.n	8009bee <__gethex+0x456>
 8009bf8:	4453      	add	r3, sl
 8009bfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bfe:	f000 fa05 	bl	800a00c <__hi0bits>
 8009c02:	f1c6 0620 	rsb	r6, r6, #32
 8009c06:	42b0      	cmp	r0, r6
 8009c08:	dbe7      	blt.n	8009bda <__gethex+0x442>
 8009c0a:	e7f0      	b.n	8009bee <__gethex+0x456>
 8009c0c:	0800b578 	.word	0x0800b578

08009c10 <L_shift>:
 8009c10:	f1c2 0208 	rsb	r2, r2, #8
 8009c14:	0092      	lsls	r2, r2, #2
 8009c16:	b570      	push	{r4, r5, r6, lr}
 8009c18:	f1c2 0620 	rsb	r6, r2, #32
 8009c1c:	6843      	ldr	r3, [r0, #4]
 8009c1e:	6804      	ldr	r4, [r0, #0]
 8009c20:	fa03 f506 	lsl.w	r5, r3, r6
 8009c24:	432c      	orrs	r4, r5
 8009c26:	40d3      	lsrs	r3, r2
 8009c28:	6004      	str	r4, [r0, #0]
 8009c2a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c2e:	4288      	cmp	r0, r1
 8009c30:	d3f4      	bcc.n	8009c1c <L_shift+0xc>
 8009c32:	bd70      	pop	{r4, r5, r6, pc}

08009c34 <__match>:
 8009c34:	b530      	push	{r4, r5, lr}
 8009c36:	6803      	ldr	r3, [r0, #0]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c3e:	b914      	cbnz	r4, 8009c46 <__match+0x12>
 8009c40:	6003      	str	r3, [r0, #0]
 8009c42:	2001      	movs	r0, #1
 8009c44:	bd30      	pop	{r4, r5, pc}
 8009c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c4e:	2d19      	cmp	r5, #25
 8009c50:	bf98      	it	ls
 8009c52:	3220      	addls	r2, #32
 8009c54:	42a2      	cmp	r2, r4
 8009c56:	d0f0      	beq.n	8009c3a <__match+0x6>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	e7f3      	b.n	8009c44 <__match+0x10>

08009c5c <__hexnan>:
 8009c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	2500      	movs	r5, #0
 8009c62:	680b      	ldr	r3, [r1, #0]
 8009c64:	4682      	mov	sl, r0
 8009c66:	115e      	asrs	r6, r3, #5
 8009c68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c6c:	f013 031f 	ands.w	r3, r3, #31
 8009c70:	bf18      	it	ne
 8009c72:	3604      	addne	r6, #4
 8009c74:	1f37      	subs	r7, r6, #4
 8009c76:	46b9      	mov	r9, r7
 8009c78:	463c      	mov	r4, r7
 8009c7a:	46ab      	mov	fp, r5
 8009c7c:	b087      	sub	sp, #28
 8009c7e:	4690      	mov	r8, r2
 8009c80:	6802      	ldr	r2, [r0, #0]
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c88:	9502      	str	r5, [sp, #8]
 8009c8a:	7851      	ldrb	r1, [r2, #1]
 8009c8c:	1c53      	adds	r3, r2, #1
 8009c8e:	9303      	str	r3, [sp, #12]
 8009c90:	b341      	cbz	r1, 8009ce4 <__hexnan+0x88>
 8009c92:	4608      	mov	r0, r1
 8009c94:	9205      	str	r2, [sp, #20]
 8009c96:	9104      	str	r1, [sp, #16]
 8009c98:	f7ff fd69 	bl	800976e <__hexdig_fun>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d14f      	bne.n	8009d40 <__hexnan+0xe4>
 8009ca0:	9904      	ldr	r1, [sp, #16]
 8009ca2:	9a05      	ldr	r2, [sp, #20]
 8009ca4:	2920      	cmp	r1, #32
 8009ca6:	d818      	bhi.n	8009cda <__hexnan+0x7e>
 8009ca8:	9b02      	ldr	r3, [sp, #8]
 8009caa:	459b      	cmp	fp, r3
 8009cac:	dd13      	ble.n	8009cd6 <__hexnan+0x7a>
 8009cae:	454c      	cmp	r4, r9
 8009cb0:	d206      	bcs.n	8009cc0 <__hexnan+0x64>
 8009cb2:	2d07      	cmp	r5, #7
 8009cb4:	dc04      	bgt.n	8009cc0 <__hexnan+0x64>
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4649      	mov	r1, r9
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff ffa8 	bl	8009c10 <L_shift>
 8009cc0:	4544      	cmp	r4, r8
 8009cc2:	d950      	bls.n	8009d66 <__hexnan+0x10a>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f1a4 0904 	sub.w	r9, r4, #4
 8009cca:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cce:	461d      	mov	r5, r3
 8009cd0:	464c      	mov	r4, r9
 8009cd2:	f8cd b008 	str.w	fp, [sp, #8]
 8009cd6:	9a03      	ldr	r2, [sp, #12]
 8009cd8:	e7d7      	b.n	8009c8a <__hexnan+0x2e>
 8009cda:	2929      	cmp	r1, #41	; 0x29
 8009cdc:	d156      	bne.n	8009d8c <__hexnan+0x130>
 8009cde:	3202      	adds	r2, #2
 8009ce0:	f8ca 2000 	str.w	r2, [sl]
 8009ce4:	f1bb 0f00 	cmp.w	fp, #0
 8009ce8:	d050      	beq.n	8009d8c <__hexnan+0x130>
 8009cea:	454c      	cmp	r4, r9
 8009cec:	d206      	bcs.n	8009cfc <__hexnan+0xa0>
 8009cee:	2d07      	cmp	r5, #7
 8009cf0:	dc04      	bgt.n	8009cfc <__hexnan+0xa0>
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	4649      	mov	r1, r9
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f7ff ff8a 	bl	8009c10 <L_shift>
 8009cfc:	4544      	cmp	r4, r8
 8009cfe:	d934      	bls.n	8009d6a <__hexnan+0x10e>
 8009d00:	4623      	mov	r3, r4
 8009d02:	f1a8 0204 	sub.w	r2, r8, #4
 8009d06:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d0a:	429f      	cmp	r7, r3
 8009d0c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d10:	d2f9      	bcs.n	8009d06 <__hexnan+0xaa>
 8009d12:	1b3b      	subs	r3, r7, r4
 8009d14:	f023 0303 	bic.w	r3, r3, #3
 8009d18:	3304      	adds	r3, #4
 8009d1a:	3401      	adds	r4, #1
 8009d1c:	3e03      	subs	r6, #3
 8009d1e:	42b4      	cmp	r4, r6
 8009d20:	bf88      	it	hi
 8009d22:	2304      	movhi	r3, #4
 8009d24:	2200      	movs	r2, #0
 8009d26:	4443      	add	r3, r8
 8009d28:	f843 2b04 	str.w	r2, [r3], #4
 8009d2c:	429f      	cmp	r7, r3
 8009d2e:	d2fb      	bcs.n	8009d28 <__hexnan+0xcc>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	b91b      	cbnz	r3, 8009d3c <__hexnan+0xe0>
 8009d34:	4547      	cmp	r7, r8
 8009d36:	d127      	bne.n	8009d88 <__hexnan+0x12c>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	2005      	movs	r0, #5
 8009d3e:	e026      	b.n	8009d8e <__hexnan+0x132>
 8009d40:	3501      	adds	r5, #1
 8009d42:	2d08      	cmp	r5, #8
 8009d44:	f10b 0b01 	add.w	fp, fp, #1
 8009d48:	dd06      	ble.n	8009d58 <__hexnan+0xfc>
 8009d4a:	4544      	cmp	r4, r8
 8009d4c:	d9c3      	bls.n	8009cd6 <__hexnan+0x7a>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	2501      	movs	r5, #1
 8009d52:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d56:	3c04      	subs	r4, #4
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	f000 000f 	and.w	r0, r0, #15
 8009d5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d62:	6022      	str	r2, [r4, #0]
 8009d64:	e7b7      	b.n	8009cd6 <__hexnan+0x7a>
 8009d66:	2508      	movs	r5, #8
 8009d68:	e7b5      	b.n	8009cd6 <__hexnan+0x7a>
 8009d6a:	9b01      	ldr	r3, [sp, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0df      	beq.n	8009d30 <__hexnan+0xd4>
 8009d70:	f04f 32ff 	mov.w	r2, #4294967295
 8009d74:	f1c3 0320 	rsb	r3, r3, #32
 8009d78:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d80:	401a      	ands	r2, r3
 8009d82:	f846 2c04 	str.w	r2, [r6, #-4]
 8009d86:	e7d3      	b.n	8009d30 <__hexnan+0xd4>
 8009d88:	3f04      	subs	r7, #4
 8009d8a:	e7d1      	b.n	8009d30 <__hexnan+0xd4>
 8009d8c:	2004      	movs	r0, #4
 8009d8e:	b007      	add	sp, #28
 8009d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d94 <_localeconv_r>:
 8009d94:	4800      	ldr	r0, [pc, #0]	; (8009d98 <_localeconv_r+0x4>)
 8009d96:	4770      	bx	lr
 8009d98:	20000168 	.word	0x20000168

08009d9c <_lseek_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	4611      	mov	r1, r2
 8009da4:	2200      	movs	r2, #0
 8009da6:	4d05      	ldr	r5, [pc, #20]	; (8009dbc <_lseek_r+0x20>)
 8009da8:	602a      	str	r2, [r5, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	f7f7 fb40 	bl	8001430 <_lseek>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_lseek_r+0x1e>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_lseek_r+0x1e>
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	20001328 	.word	0x20001328

08009dc0 <malloc>:
 8009dc0:	4b02      	ldr	r3, [pc, #8]	; (8009dcc <malloc+0xc>)
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	f7fc be9d 	b.w	8006b04 <_malloc_r>
 8009dca:	bf00      	nop
 8009dcc:	20000010 	.word	0x20000010

08009dd0 <__ascii_mbtowc>:
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	b901      	cbnz	r1, 8009dd6 <__ascii_mbtowc+0x6>
 8009dd4:	a901      	add	r1, sp, #4
 8009dd6:	b142      	cbz	r2, 8009dea <__ascii_mbtowc+0x1a>
 8009dd8:	b14b      	cbz	r3, 8009dee <__ascii_mbtowc+0x1e>
 8009dda:	7813      	ldrb	r3, [r2, #0]
 8009ddc:	600b      	str	r3, [r1, #0]
 8009dde:	7812      	ldrb	r2, [r2, #0]
 8009de0:	1e10      	subs	r0, r2, #0
 8009de2:	bf18      	it	ne
 8009de4:	2001      	movne	r0, #1
 8009de6:	b002      	add	sp, #8
 8009de8:	4770      	bx	lr
 8009dea:	4610      	mov	r0, r2
 8009dec:	e7fb      	b.n	8009de6 <__ascii_mbtowc+0x16>
 8009dee:	f06f 0001 	mvn.w	r0, #1
 8009df2:	e7f8      	b.n	8009de6 <__ascii_mbtowc+0x16>

08009df4 <memchr>:
 8009df4:	4603      	mov	r3, r0
 8009df6:	b510      	push	{r4, lr}
 8009df8:	b2c9      	uxtb	r1, r1
 8009dfa:	4402      	add	r2, r0
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	d101      	bne.n	8009e06 <memchr+0x12>
 8009e02:	2000      	movs	r0, #0
 8009e04:	e003      	b.n	8009e0e <memchr+0x1a>
 8009e06:	7804      	ldrb	r4, [r0, #0]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	428c      	cmp	r4, r1
 8009e0c:	d1f6      	bne.n	8009dfc <memchr+0x8>
 8009e0e:	bd10      	pop	{r4, pc}

08009e10 <__malloc_lock>:
 8009e10:	4801      	ldr	r0, [pc, #4]	; (8009e18 <__malloc_lock+0x8>)
 8009e12:	f7fc be3e 	b.w	8006a92 <__retarget_lock_acquire_recursive>
 8009e16:	bf00      	nop
 8009e18:	2000131c 	.word	0x2000131c

08009e1c <__malloc_unlock>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	; (8009e24 <__malloc_unlock+0x8>)
 8009e1e:	f7fc be39 	b.w	8006a94 <__retarget_lock_release_recursive>
 8009e22:	bf00      	nop
 8009e24:	2000131c 	.word	0x2000131c

08009e28 <_Balloc>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	460d      	mov	r5, r1
 8009e30:	b976      	cbnz	r6, 8009e50 <_Balloc+0x28>
 8009e32:	2010      	movs	r0, #16
 8009e34:	f7ff ffc4 	bl	8009dc0 <malloc>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	6260      	str	r0, [r4, #36]	; 0x24
 8009e3c:	b920      	cbnz	r0, 8009e48 <_Balloc+0x20>
 8009e3e:	2166      	movs	r1, #102	; 0x66
 8009e40:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <_Balloc+0x78>)
 8009e42:	4818      	ldr	r0, [pc, #96]	; (8009ea4 <_Balloc+0x7c>)
 8009e44:	f000 fe9a 	bl	800ab7c <__assert_func>
 8009e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e4c:	6006      	str	r6, [r0, #0]
 8009e4e:	60c6      	str	r6, [r0, #12]
 8009e50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e52:	68f3      	ldr	r3, [r6, #12]
 8009e54:	b183      	cbz	r3, 8009e78 <_Balloc+0x50>
 8009e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e5e:	b9b8      	cbnz	r0, 8009e90 <_Balloc+0x68>
 8009e60:	2101      	movs	r1, #1
 8009e62:	fa01 f605 	lsl.w	r6, r1, r5
 8009e66:	1d72      	adds	r2, r6, #5
 8009e68:	4620      	mov	r0, r4
 8009e6a:	0092      	lsls	r2, r2, #2
 8009e6c:	f000 fc94 	bl	800a798 <_calloc_r>
 8009e70:	b160      	cbz	r0, 8009e8c <_Balloc+0x64>
 8009e72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e76:	e00e      	b.n	8009e96 <_Balloc+0x6e>
 8009e78:	2221      	movs	r2, #33	; 0x21
 8009e7a:	2104      	movs	r1, #4
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fc8b 	bl	800a798 <_calloc_r>
 8009e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e84:	60f0      	str	r0, [r6, #12]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e4      	bne.n	8009e56 <_Balloc+0x2e>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	6802      	ldr	r2, [r0, #0]
 8009e92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e96:	2300      	movs	r3, #0
 8009e98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e9c:	e7f7      	b.n	8009e8e <_Balloc+0x66>
 8009e9e:	bf00      	nop
 8009ea0:	0800b506 	.word	0x0800b506
 8009ea4:	0800b604 	.word	0x0800b604

08009ea8 <_Bfree>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009eac:	4605      	mov	r5, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	b976      	cbnz	r6, 8009ed0 <_Bfree+0x28>
 8009eb2:	2010      	movs	r0, #16
 8009eb4:	f7ff ff84 	bl	8009dc0 <malloc>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6268      	str	r0, [r5, #36]	; 0x24
 8009ebc:	b920      	cbnz	r0, 8009ec8 <_Bfree+0x20>
 8009ebe:	218a      	movs	r1, #138	; 0x8a
 8009ec0:	4b08      	ldr	r3, [pc, #32]	; (8009ee4 <_Bfree+0x3c>)
 8009ec2:	4809      	ldr	r0, [pc, #36]	; (8009ee8 <_Bfree+0x40>)
 8009ec4:	f000 fe5a 	bl	800ab7c <__assert_func>
 8009ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ecc:	6006      	str	r6, [r0, #0]
 8009ece:	60c6      	str	r6, [r0, #12]
 8009ed0:	b13c      	cbz	r4, 8009ee2 <_Bfree+0x3a>
 8009ed2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ed4:	6862      	ldr	r2, [r4, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009edc:	6021      	str	r1, [r4, #0]
 8009ede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	0800b506 	.word	0x0800b506
 8009ee8:	0800b604 	.word	0x0800b604

08009eec <__multadd>:
 8009eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	461e      	mov	r6, r3
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	690d      	ldr	r5, [r1, #16]
 8009efa:	f101 0c14 	add.w	ip, r1, #20
 8009efe:	f8dc 3000 	ldr.w	r3, [ip]
 8009f02:	3001      	adds	r0, #1
 8009f04:	b299      	uxth	r1, r3
 8009f06:	fb02 6101 	mla	r1, r2, r1, r6
 8009f0a:	0c1e      	lsrs	r6, r3, #16
 8009f0c:	0c0b      	lsrs	r3, r1, #16
 8009f0e:	fb02 3306 	mla	r3, r2, r6, r3
 8009f12:	b289      	uxth	r1, r1
 8009f14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f18:	4285      	cmp	r5, r0
 8009f1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f1e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f22:	dcec      	bgt.n	8009efe <__multadd+0x12>
 8009f24:	b30e      	cbz	r6, 8009f6a <__multadd+0x7e>
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dc19      	bgt.n	8009f60 <__multadd+0x74>
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	4638      	mov	r0, r7
 8009f30:	3101      	adds	r1, #1
 8009f32:	f7ff ff79 	bl	8009e28 <_Balloc>
 8009f36:	4680      	mov	r8, r0
 8009f38:	b928      	cbnz	r0, 8009f46 <__multadd+0x5a>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	21b5      	movs	r1, #181	; 0xb5
 8009f3e:	4b0c      	ldr	r3, [pc, #48]	; (8009f70 <__multadd+0x84>)
 8009f40:	480c      	ldr	r0, [pc, #48]	; (8009f74 <__multadd+0x88>)
 8009f42:	f000 fe1b 	bl	800ab7c <__assert_func>
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	f104 010c 	add.w	r1, r4, #12
 8009f4c:	3202      	adds	r2, #2
 8009f4e:	0092      	lsls	r2, r2, #2
 8009f50:	300c      	adds	r0, #12
 8009f52:	f7fc fda0 	bl	8006a96 <memcpy>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff ffa5 	bl	8009ea8 <_Bfree>
 8009f5e:	4644      	mov	r4, r8
 8009f60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f64:	3501      	adds	r5, #1
 8009f66:	615e      	str	r6, [r3, #20]
 8009f68:	6125      	str	r5, [r4, #16]
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f70:	0800b578 	.word	0x0800b578
 8009f74:	0800b604 	.word	0x0800b604

08009f78 <__s2b>:
 8009f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f7c:	4615      	mov	r5, r2
 8009f7e:	2209      	movs	r2, #9
 8009f80:	461f      	mov	r7, r3
 8009f82:	3308      	adds	r3, #8
 8009f84:	460c      	mov	r4, r1
 8009f86:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	2100      	movs	r1, #0
 8009f90:	429a      	cmp	r2, r3
 8009f92:	db09      	blt.n	8009fa8 <__s2b+0x30>
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7ff ff47 	bl	8009e28 <_Balloc>
 8009f9a:	b940      	cbnz	r0, 8009fae <__s2b+0x36>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	21ce      	movs	r1, #206	; 0xce
 8009fa0:	4b18      	ldr	r3, [pc, #96]	; (800a004 <__s2b+0x8c>)
 8009fa2:	4819      	ldr	r0, [pc, #100]	; (800a008 <__s2b+0x90>)
 8009fa4:	f000 fdea 	bl	800ab7c <__assert_func>
 8009fa8:	0052      	lsls	r2, r2, #1
 8009faa:	3101      	adds	r1, #1
 8009fac:	e7f0      	b.n	8009f90 <__s2b+0x18>
 8009fae:	9b08      	ldr	r3, [sp, #32]
 8009fb0:	2d09      	cmp	r5, #9
 8009fb2:	6143      	str	r3, [r0, #20]
 8009fb4:	f04f 0301 	mov.w	r3, #1
 8009fb8:	6103      	str	r3, [r0, #16]
 8009fba:	dd16      	ble.n	8009fea <__s2b+0x72>
 8009fbc:	f104 0909 	add.w	r9, r4, #9
 8009fc0:	46c8      	mov	r8, r9
 8009fc2:	442c      	add	r4, r5
 8009fc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fc8:	4601      	mov	r1, r0
 8009fca:	220a      	movs	r2, #10
 8009fcc:	4630      	mov	r0, r6
 8009fce:	3b30      	subs	r3, #48	; 0x30
 8009fd0:	f7ff ff8c 	bl	8009eec <__multadd>
 8009fd4:	45a0      	cmp	r8, r4
 8009fd6:	d1f5      	bne.n	8009fc4 <__s2b+0x4c>
 8009fd8:	f1a5 0408 	sub.w	r4, r5, #8
 8009fdc:	444c      	add	r4, r9
 8009fde:	1b2d      	subs	r5, r5, r4
 8009fe0:	1963      	adds	r3, r4, r5
 8009fe2:	42bb      	cmp	r3, r7
 8009fe4:	db04      	blt.n	8009ff0 <__s2b+0x78>
 8009fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fea:	2509      	movs	r5, #9
 8009fec:	340a      	adds	r4, #10
 8009fee:	e7f6      	b.n	8009fde <__s2b+0x66>
 8009ff0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ff4:	4601      	mov	r1, r0
 8009ff6:	220a      	movs	r2, #10
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	3b30      	subs	r3, #48	; 0x30
 8009ffc:	f7ff ff76 	bl	8009eec <__multadd>
 800a000:	e7ee      	b.n	8009fe0 <__s2b+0x68>
 800a002:	bf00      	nop
 800a004:	0800b578 	.word	0x0800b578
 800a008:	0800b604 	.word	0x0800b604

0800a00c <__hi0bits>:
 800a00c:	0c02      	lsrs	r2, r0, #16
 800a00e:	0412      	lsls	r2, r2, #16
 800a010:	4603      	mov	r3, r0
 800a012:	b9ca      	cbnz	r2, 800a048 <__hi0bits+0x3c>
 800a014:	0403      	lsls	r3, r0, #16
 800a016:	2010      	movs	r0, #16
 800a018:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a01c:	bf04      	itt	eq
 800a01e:	021b      	lsleq	r3, r3, #8
 800a020:	3008      	addeq	r0, #8
 800a022:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a026:	bf04      	itt	eq
 800a028:	011b      	lsleq	r3, r3, #4
 800a02a:	3004      	addeq	r0, #4
 800a02c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a030:	bf04      	itt	eq
 800a032:	009b      	lsleq	r3, r3, #2
 800a034:	3002      	addeq	r0, #2
 800a036:	2b00      	cmp	r3, #0
 800a038:	db05      	blt.n	800a046 <__hi0bits+0x3a>
 800a03a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a03e:	f100 0001 	add.w	r0, r0, #1
 800a042:	bf08      	it	eq
 800a044:	2020      	moveq	r0, #32
 800a046:	4770      	bx	lr
 800a048:	2000      	movs	r0, #0
 800a04a:	e7e5      	b.n	800a018 <__hi0bits+0xc>

0800a04c <__lo0bits>:
 800a04c:	6803      	ldr	r3, [r0, #0]
 800a04e:	4602      	mov	r2, r0
 800a050:	f013 0007 	ands.w	r0, r3, #7
 800a054:	d00b      	beq.n	800a06e <__lo0bits+0x22>
 800a056:	07d9      	lsls	r1, r3, #31
 800a058:	d421      	bmi.n	800a09e <__lo0bits+0x52>
 800a05a:	0798      	lsls	r0, r3, #30
 800a05c:	bf49      	itett	mi
 800a05e:	085b      	lsrmi	r3, r3, #1
 800a060:	089b      	lsrpl	r3, r3, #2
 800a062:	2001      	movmi	r0, #1
 800a064:	6013      	strmi	r3, [r2, #0]
 800a066:	bf5c      	itt	pl
 800a068:	2002      	movpl	r0, #2
 800a06a:	6013      	strpl	r3, [r2, #0]
 800a06c:	4770      	bx	lr
 800a06e:	b299      	uxth	r1, r3
 800a070:	b909      	cbnz	r1, 800a076 <__lo0bits+0x2a>
 800a072:	2010      	movs	r0, #16
 800a074:	0c1b      	lsrs	r3, r3, #16
 800a076:	b2d9      	uxtb	r1, r3
 800a078:	b909      	cbnz	r1, 800a07e <__lo0bits+0x32>
 800a07a:	3008      	adds	r0, #8
 800a07c:	0a1b      	lsrs	r3, r3, #8
 800a07e:	0719      	lsls	r1, r3, #28
 800a080:	bf04      	itt	eq
 800a082:	091b      	lsreq	r3, r3, #4
 800a084:	3004      	addeq	r0, #4
 800a086:	0799      	lsls	r1, r3, #30
 800a088:	bf04      	itt	eq
 800a08a:	089b      	lsreq	r3, r3, #2
 800a08c:	3002      	addeq	r0, #2
 800a08e:	07d9      	lsls	r1, r3, #31
 800a090:	d403      	bmi.n	800a09a <__lo0bits+0x4e>
 800a092:	085b      	lsrs	r3, r3, #1
 800a094:	f100 0001 	add.w	r0, r0, #1
 800a098:	d003      	beq.n	800a0a2 <__lo0bits+0x56>
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	4770      	bx	lr
 800a09e:	2000      	movs	r0, #0
 800a0a0:	4770      	bx	lr
 800a0a2:	2020      	movs	r0, #32
 800a0a4:	4770      	bx	lr
	...

0800a0a8 <__i2b>:
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	f7ff febb 	bl	8009e28 <_Balloc>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	b928      	cbnz	r0, 800a0c2 <__i2b+0x1a>
 800a0b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0ba:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <__i2b+0x24>)
 800a0bc:	4804      	ldr	r0, [pc, #16]	; (800a0d0 <__i2b+0x28>)
 800a0be:	f000 fd5d 	bl	800ab7c <__assert_func>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	6144      	str	r4, [r0, #20]
 800a0c6:	6103      	str	r3, [r0, #16]
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	bf00      	nop
 800a0cc:	0800b578 	.word	0x0800b578
 800a0d0:	0800b604 	.word	0x0800b604

0800a0d4 <__multiply>:
 800a0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d8:	4691      	mov	r9, r2
 800a0da:	690a      	ldr	r2, [r1, #16]
 800a0dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	bfbe      	ittt	lt
 800a0e6:	460b      	movlt	r3, r1
 800a0e8:	464c      	movlt	r4, r9
 800a0ea:	4699      	movlt	r9, r3
 800a0ec:	6927      	ldr	r7, [r4, #16]
 800a0ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0f2:	68a3      	ldr	r3, [r4, #8]
 800a0f4:	6861      	ldr	r1, [r4, #4]
 800a0f6:	eb07 060a 	add.w	r6, r7, sl
 800a0fa:	42b3      	cmp	r3, r6
 800a0fc:	b085      	sub	sp, #20
 800a0fe:	bfb8      	it	lt
 800a100:	3101      	addlt	r1, #1
 800a102:	f7ff fe91 	bl	8009e28 <_Balloc>
 800a106:	b930      	cbnz	r0, 800a116 <__multiply+0x42>
 800a108:	4602      	mov	r2, r0
 800a10a:	f240 115d 	movw	r1, #349	; 0x15d
 800a10e:	4b43      	ldr	r3, [pc, #268]	; (800a21c <__multiply+0x148>)
 800a110:	4843      	ldr	r0, [pc, #268]	; (800a220 <__multiply+0x14c>)
 800a112:	f000 fd33 	bl	800ab7c <__assert_func>
 800a116:	f100 0514 	add.w	r5, r0, #20
 800a11a:	462b      	mov	r3, r5
 800a11c:	2200      	movs	r2, #0
 800a11e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a122:	4543      	cmp	r3, r8
 800a124:	d321      	bcc.n	800a16a <__multiply+0x96>
 800a126:	f104 0314 	add.w	r3, r4, #20
 800a12a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a12e:	f109 0314 	add.w	r3, r9, #20
 800a132:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a136:	9202      	str	r2, [sp, #8]
 800a138:	1b3a      	subs	r2, r7, r4
 800a13a:	3a15      	subs	r2, #21
 800a13c:	f022 0203 	bic.w	r2, r2, #3
 800a140:	3204      	adds	r2, #4
 800a142:	f104 0115 	add.w	r1, r4, #21
 800a146:	428f      	cmp	r7, r1
 800a148:	bf38      	it	cc
 800a14a:	2204      	movcc	r2, #4
 800a14c:	9201      	str	r2, [sp, #4]
 800a14e:	9a02      	ldr	r2, [sp, #8]
 800a150:	9303      	str	r3, [sp, #12]
 800a152:	429a      	cmp	r2, r3
 800a154:	d80c      	bhi.n	800a170 <__multiply+0x9c>
 800a156:	2e00      	cmp	r6, #0
 800a158:	dd03      	ble.n	800a162 <__multiply+0x8e>
 800a15a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d059      	beq.n	800a216 <__multiply+0x142>
 800a162:	6106      	str	r6, [r0, #16]
 800a164:	b005      	add	sp, #20
 800a166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16a:	f843 2b04 	str.w	r2, [r3], #4
 800a16e:	e7d8      	b.n	800a122 <__multiply+0x4e>
 800a170:	f8b3 a000 	ldrh.w	sl, [r3]
 800a174:	f1ba 0f00 	cmp.w	sl, #0
 800a178:	d023      	beq.n	800a1c2 <__multiply+0xee>
 800a17a:	46a9      	mov	r9, r5
 800a17c:	f04f 0c00 	mov.w	ip, #0
 800a180:	f104 0e14 	add.w	lr, r4, #20
 800a184:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a188:	f8d9 1000 	ldr.w	r1, [r9]
 800a18c:	fa1f fb82 	uxth.w	fp, r2
 800a190:	b289      	uxth	r1, r1
 800a192:	fb0a 110b 	mla	r1, sl, fp, r1
 800a196:	4461      	add	r1, ip
 800a198:	f8d9 c000 	ldr.w	ip, [r9]
 800a19c:	0c12      	lsrs	r2, r2, #16
 800a19e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a1a2:	fb0a c202 	mla	r2, sl, r2, ip
 800a1a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1aa:	b289      	uxth	r1, r1
 800a1ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1b0:	4577      	cmp	r7, lr
 800a1b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1b6:	f849 1b04 	str.w	r1, [r9], #4
 800a1ba:	d8e3      	bhi.n	800a184 <__multiply+0xb0>
 800a1bc:	9a01      	ldr	r2, [sp, #4]
 800a1be:	f845 c002 	str.w	ip, [r5, r2]
 800a1c2:	9a03      	ldr	r2, [sp, #12]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1ca:	f1b9 0f00 	cmp.w	r9, #0
 800a1ce:	d020      	beq.n	800a212 <__multiply+0x13e>
 800a1d0:	46ae      	mov	lr, r5
 800a1d2:	f04f 0a00 	mov.w	sl, #0
 800a1d6:	6829      	ldr	r1, [r5, #0]
 800a1d8:	f104 0c14 	add.w	ip, r4, #20
 800a1dc:	f8bc b000 	ldrh.w	fp, [ip]
 800a1e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1e4:	b289      	uxth	r1, r1
 800a1e6:	fb09 220b 	mla	r2, r9, fp, r2
 800a1ea:	4492      	add	sl, r2
 800a1ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a1f0:	f84e 1b04 	str.w	r1, [lr], #4
 800a1f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1f8:	f8be 1000 	ldrh.w	r1, [lr]
 800a1fc:	0c12      	lsrs	r2, r2, #16
 800a1fe:	fb09 1102 	mla	r1, r9, r2, r1
 800a202:	4567      	cmp	r7, ip
 800a204:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a208:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a20c:	d8e6      	bhi.n	800a1dc <__multiply+0x108>
 800a20e:	9a01      	ldr	r2, [sp, #4]
 800a210:	50a9      	str	r1, [r5, r2]
 800a212:	3504      	adds	r5, #4
 800a214:	e79b      	b.n	800a14e <__multiply+0x7a>
 800a216:	3e01      	subs	r6, #1
 800a218:	e79d      	b.n	800a156 <__multiply+0x82>
 800a21a:	bf00      	nop
 800a21c:	0800b578 	.word	0x0800b578
 800a220:	0800b604 	.word	0x0800b604

0800a224 <__pow5mult>:
 800a224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a228:	4615      	mov	r5, r2
 800a22a:	f012 0203 	ands.w	r2, r2, #3
 800a22e:	4606      	mov	r6, r0
 800a230:	460f      	mov	r7, r1
 800a232:	d007      	beq.n	800a244 <__pow5mult+0x20>
 800a234:	4c25      	ldr	r4, [pc, #148]	; (800a2cc <__pow5mult+0xa8>)
 800a236:	3a01      	subs	r2, #1
 800a238:	2300      	movs	r3, #0
 800a23a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a23e:	f7ff fe55 	bl	8009eec <__multadd>
 800a242:	4607      	mov	r7, r0
 800a244:	10ad      	asrs	r5, r5, #2
 800a246:	d03d      	beq.n	800a2c4 <__pow5mult+0xa0>
 800a248:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a24a:	b97c      	cbnz	r4, 800a26c <__pow5mult+0x48>
 800a24c:	2010      	movs	r0, #16
 800a24e:	f7ff fdb7 	bl	8009dc0 <malloc>
 800a252:	4602      	mov	r2, r0
 800a254:	6270      	str	r0, [r6, #36]	; 0x24
 800a256:	b928      	cbnz	r0, 800a264 <__pow5mult+0x40>
 800a258:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a25c:	4b1c      	ldr	r3, [pc, #112]	; (800a2d0 <__pow5mult+0xac>)
 800a25e:	481d      	ldr	r0, [pc, #116]	; (800a2d4 <__pow5mult+0xb0>)
 800a260:	f000 fc8c 	bl	800ab7c <__assert_func>
 800a264:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a268:	6004      	str	r4, [r0, #0]
 800a26a:	60c4      	str	r4, [r0, #12]
 800a26c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a270:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a274:	b94c      	cbnz	r4, 800a28a <__pow5mult+0x66>
 800a276:	f240 2171 	movw	r1, #625	; 0x271
 800a27a:	4630      	mov	r0, r6
 800a27c:	f7ff ff14 	bl	800a0a8 <__i2b>
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	f8c8 0008 	str.w	r0, [r8, #8]
 800a288:	6003      	str	r3, [r0, #0]
 800a28a:	f04f 0900 	mov.w	r9, #0
 800a28e:	07eb      	lsls	r3, r5, #31
 800a290:	d50a      	bpl.n	800a2a8 <__pow5mult+0x84>
 800a292:	4639      	mov	r1, r7
 800a294:	4622      	mov	r2, r4
 800a296:	4630      	mov	r0, r6
 800a298:	f7ff ff1c 	bl	800a0d4 <__multiply>
 800a29c:	4680      	mov	r8, r0
 800a29e:	4639      	mov	r1, r7
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	f7ff fe01 	bl	8009ea8 <_Bfree>
 800a2a6:	4647      	mov	r7, r8
 800a2a8:	106d      	asrs	r5, r5, #1
 800a2aa:	d00b      	beq.n	800a2c4 <__pow5mult+0xa0>
 800a2ac:	6820      	ldr	r0, [r4, #0]
 800a2ae:	b938      	cbnz	r0, 800a2c0 <__pow5mult+0x9c>
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f7ff ff0d 	bl	800a0d4 <__multiply>
 800a2ba:	6020      	str	r0, [r4, #0]
 800a2bc:	f8c0 9000 	str.w	r9, [r0]
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	e7e4      	b.n	800a28e <__pow5mult+0x6a>
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ca:	bf00      	nop
 800a2cc:	0800b750 	.word	0x0800b750
 800a2d0:	0800b506 	.word	0x0800b506
 800a2d4:	0800b604 	.word	0x0800b604

0800a2d8 <__lshift>:
 800a2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2dc:	460c      	mov	r4, r1
 800a2de:	4607      	mov	r7, r0
 800a2e0:	4691      	mov	r9, r2
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	6849      	ldr	r1, [r1, #4]
 800a2e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2ea:	68a3      	ldr	r3, [r4, #8]
 800a2ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2f0:	f108 0601 	add.w	r6, r8, #1
 800a2f4:	42b3      	cmp	r3, r6
 800a2f6:	db0b      	blt.n	800a310 <__lshift+0x38>
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7ff fd95 	bl	8009e28 <_Balloc>
 800a2fe:	4605      	mov	r5, r0
 800a300:	b948      	cbnz	r0, 800a316 <__lshift+0x3e>
 800a302:	4602      	mov	r2, r0
 800a304:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a308:	4b29      	ldr	r3, [pc, #164]	; (800a3b0 <__lshift+0xd8>)
 800a30a:	482a      	ldr	r0, [pc, #168]	; (800a3b4 <__lshift+0xdc>)
 800a30c:	f000 fc36 	bl	800ab7c <__assert_func>
 800a310:	3101      	adds	r1, #1
 800a312:	005b      	lsls	r3, r3, #1
 800a314:	e7ee      	b.n	800a2f4 <__lshift+0x1c>
 800a316:	2300      	movs	r3, #0
 800a318:	f100 0114 	add.w	r1, r0, #20
 800a31c:	f100 0210 	add.w	r2, r0, #16
 800a320:	4618      	mov	r0, r3
 800a322:	4553      	cmp	r3, sl
 800a324:	db37      	blt.n	800a396 <__lshift+0xbe>
 800a326:	6920      	ldr	r0, [r4, #16]
 800a328:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a32c:	f104 0314 	add.w	r3, r4, #20
 800a330:	f019 091f 	ands.w	r9, r9, #31
 800a334:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a338:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a33c:	d02f      	beq.n	800a39e <__lshift+0xc6>
 800a33e:	468a      	mov	sl, r1
 800a340:	f04f 0c00 	mov.w	ip, #0
 800a344:	f1c9 0e20 	rsb	lr, r9, #32
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	fa02 f209 	lsl.w	r2, r2, r9
 800a34e:	ea42 020c 	orr.w	r2, r2, ip
 800a352:	f84a 2b04 	str.w	r2, [sl], #4
 800a356:	f853 2b04 	ldr.w	r2, [r3], #4
 800a35a:	4298      	cmp	r0, r3
 800a35c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a360:	d8f2      	bhi.n	800a348 <__lshift+0x70>
 800a362:	1b03      	subs	r3, r0, r4
 800a364:	3b15      	subs	r3, #21
 800a366:	f023 0303 	bic.w	r3, r3, #3
 800a36a:	3304      	adds	r3, #4
 800a36c:	f104 0215 	add.w	r2, r4, #21
 800a370:	4290      	cmp	r0, r2
 800a372:	bf38      	it	cc
 800a374:	2304      	movcc	r3, #4
 800a376:	f841 c003 	str.w	ip, [r1, r3]
 800a37a:	f1bc 0f00 	cmp.w	ip, #0
 800a37e:	d001      	beq.n	800a384 <__lshift+0xac>
 800a380:	f108 0602 	add.w	r6, r8, #2
 800a384:	3e01      	subs	r6, #1
 800a386:	4638      	mov	r0, r7
 800a388:	4621      	mov	r1, r4
 800a38a:	612e      	str	r6, [r5, #16]
 800a38c:	f7ff fd8c 	bl	8009ea8 <_Bfree>
 800a390:	4628      	mov	r0, r5
 800a392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a396:	f842 0f04 	str.w	r0, [r2, #4]!
 800a39a:	3301      	adds	r3, #1
 800a39c:	e7c1      	b.n	800a322 <__lshift+0x4a>
 800a39e:	3904      	subs	r1, #4
 800a3a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a4:	4298      	cmp	r0, r3
 800a3a6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3aa:	d8f9      	bhi.n	800a3a0 <__lshift+0xc8>
 800a3ac:	e7ea      	b.n	800a384 <__lshift+0xac>
 800a3ae:	bf00      	nop
 800a3b0:	0800b578 	.word	0x0800b578
 800a3b4:	0800b604 	.word	0x0800b604

0800a3b8 <__mcmp>:
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	690a      	ldr	r2, [r1, #16]
 800a3bc:	6900      	ldr	r0, [r0, #16]
 800a3be:	b530      	push	{r4, r5, lr}
 800a3c0:	1a80      	subs	r0, r0, r2
 800a3c2:	d10d      	bne.n	800a3e0 <__mcmp+0x28>
 800a3c4:	3314      	adds	r3, #20
 800a3c6:	3114      	adds	r1, #20
 800a3c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3d8:	4295      	cmp	r5, r2
 800a3da:	d002      	beq.n	800a3e2 <__mcmp+0x2a>
 800a3dc:	d304      	bcc.n	800a3e8 <__mcmp+0x30>
 800a3de:	2001      	movs	r0, #1
 800a3e0:	bd30      	pop	{r4, r5, pc}
 800a3e2:	42a3      	cmp	r3, r4
 800a3e4:	d3f4      	bcc.n	800a3d0 <__mcmp+0x18>
 800a3e6:	e7fb      	b.n	800a3e0 <__mcmp+0x28>
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	e7f8      	b.n	800a3e0 <__mcmp+0x28>
	...

0800a3f0 <__mdiff>:
 800a3f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	460d      	mov	r5, r1
 800a3f6:	4607      	mov	r7, r0
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	4614      	mov	r4, r2
 800a3fe:	f7ff ffdb 	bl	800a3b8 <__mcmp>
 800a402:	1e06      	subs	r6, r0, #0
 800a404:	d111      	bne.n	800a42a <__mdiff+0x3a>
 800a406:	4631      	mov	r1, r6
 800a408:	4638      	mov	r0, r7
 800a40a:	f7ff fd0d 	bl	8009e28 <_Balloc>
 800a40e:	4602      	mov	r2, r0
 800a410:	b928      	cbnz	r0, 800a41e <__mdiff+0x2e>
 800a412:	f240 2132 	movw	r1, #562	; 0x232
 800a416:	4b3a      	ldr	r3, [pc, #232]	; (800a500 <__mdiff+0x110>)
 800a418:	483a      	ldr	r0, [pc, #232]	; (800a504 <__mdiff+0x114>)
 800a41a:	f000 fbaf 	bl	800ab7c <__assert_func>
 800a41e:	2301      	movs	r3, #1
 800a420:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a424:	4610      	mov	r0, r2
 800a426:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42a:	bfa4      	itt	ge
 800a42c:	4623      	movge	r3, r4
 800a42e:	462c      	movge	r4, r5
 800a430:	4638      	mov	r0, r7
 800a432:	6861      	ldr	r1, [r4, #4]
 800a434:	bfa6      	itte	ge
 800a436:	461d      	movge	r5, r3
 800a438:	2600      	movge	r6, #0
 800a43a:	2601      	movlt	r6, #1
 800a43c:	f7ff fcf4 	bl	8009e28 <_Balloc>
 800a440:	4602      	mov	r2, r0
 800a442:	b918      	cbnz	r0, 800a44c <__mdiff+0x5c>
 800a444:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a448:	4b2d      	ldr	r3, [pc, #180]	; (800a500 <__mdiff+0x110>)
 800a44a:	e7e5      	b.n	800a418 <__mdiff+0x28>
 800a44c:	f102 0814 	add.w	r8, r2, #20
 800a450:	46c2      	mov	sl, r8
 800a452:	f04f 0c00 	mov.w	ip, #0
 800a456:	6927      	ldr	r7, [r4, #16]
 800a458:	60c6      	str	r6, [r0, #12]
 800a45a:	692e      	ldr	r6, [r5, #16]
 800a45c:	f104 0014 	add.w	r0, r4, #20
 800a460:	f105 0914 	add.w	r9, r5, #20
 800a464:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a468:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a46c:	3410      	adds	r4, #16
 800a46e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a472:	f859 3b04 	ldr.w	r3, [r9], #4
 800a476:	fa1f f18b 	uxth.w	r1, fp
 800a47a:	448c      	add	ip, r1
 800a47c:	b299      	uxth	r1, r3
 800a47e:	0c1b      	lsrs	r3, r3, #16
 800a480:	ebac 0101 	sub.w	r1, ip, r1
 800a484:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a488:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a48c:	b289      	uxth	r1, r1
 800a48e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a492:	454e      	cmp	r6, r9
 800a494:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a498:	f84a 3b04 	str.w	r3, [sl], #4
 800a49c:	d8e7      	bhi.n	800a46e <__mdiff+0x7e>
 800a49e:	1b73      	subs	r3, r6, r5
 800a4a0:	3b15      	subs	r3, #21
 800a4a2:	f023 0303 	bic.w	r3, r3, #3
 800a4a6:	3515      	adds	r5, #21
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	42ae      	cmp	r6, r5
 800a4ac:	bf38      	it	cc
 800a4ae:	2304      	movcc	r3, #4
 800a4b0:	4418      	add	r0, r3
 800a4b2:	4443      	add	r3, r8
 800a4b4:	461e      	mov	r6, r3
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	4575      	cmp	r5, lr
 800a4ba:	d30e      	bcc.n	800a4da <__mdiff+0xea>
 800a4bc:	f10e 0103 	add.w	r1, lr, #3
 800a4c0:	1a09      	subs	r1, r1, r0
 800a4c2:	f021 0103 	bic.w	r1, r1, #3
 800a4c6:	3803      	subs	r0, #3
 800a4c8:	4586      	cmp	lr, r0
 800a4ca:	bf38      	it	cc
 800a4cc:	2100      	movcc	r1, #0
 800a4ce:	4419      	add	r1, r3
 800a4d0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a4d4:	b18b      	cbz	r3, 800a4fa <__mdiff+0x10a>
 800a4d6:	6117      	str	r7, [r2, #16]
 800a4d8:	e7a4      	b.n	800a424 <__mdiff+0x34>
 800a4da:	f855 8b04 	ldr.w	r8, [r5], #4
 800a4de:	fa1f f188 	uxth.w	r1, r8
 800a4e2:	4461      	add	r1, ip
 800a4e4:	140c      	asrs	r4, r1, #16
 800a4e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4ea:	b289      	uxth	r1, r1
 800a4ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a4f0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a4f4:	f846 1b04 	str.w	r1, [r6], #4
 800a4f8:	e7de      	b.n	800a4b8 <__mdiff+0xc8>
 800a4fa:	3f01      	subs	r7, #1
 800a4fc:	e7e8      	b.n	800a4d0 <__mdiff+0xe0>
 800a4fe:	bf00      	nop
 800a500:	0800b578 	.word	0x0800b578
 800a504:	0800b604 	.word	0x0800b604

0800a508 <__ulp>:
 800a508:	4b11      	ldr	r3, [pc, #68]	; (800a550 <__ulp+0x48>)
 800a50a:	400b      	ands	r3, r1
 800a50c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a510:	2b00      	cmp	r3, #0
 800a512:	dd02      	ble.n	800a51a <__ulp+0x12>
 800a514:	2000      	movs	r0, #0
 800a516:	4619      	mov	r1, r3
 800a518:	4770      	bx	lr
 800a51a:	425b      	negs	r3, r3
 800a51c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a520:	f04f 0000 	mov.w	r0, #0
 800a524:	f04f 0100 	mov.w	r1, #0
 800a528:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a52c:	da04      	bge.n	800a538 <__ulp+0x30>
 800a52e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a532:	fa43 f102 	asr.w	r1, r3, r2
 800a536:	4770      	bx	lr
 800a538:	f1a2 0314 	sub.w	r3, r2, #20
 800a53c:	2b1e      	cmp	r3, #30
 800a53e:	bfd6      	itet	le
 800a540:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a544:	2301      	movgt	r3, #1
 800a546:	fa22 f303 	lsrle.w	r3, r2, r3
 800a54a:	4618      	mov	r0, r3
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	7ff00000 	.word	0x7ff00000

0800a554 <__b2d>:
 800a554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a558:	6907      	ldr	r7, [r0, #16]
 800a55a:	f100 0914 	add.w	r9, r0, #20
 800a55e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a562:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a566:	f1a7 0804 	sub.w	r8, r7, #4
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7ff fd4e 	bl	800a00c <__hi0bits>
 800a570:	f1c0 0320 	rsb	r3, r0, #32
 800a574:	280a      	cmp	r0, #10
 800a576:	600b      	str	r3, [r1, #0]
 800a578:	491f      	ldr	r1, [pc, #124]	; (800a5f8 <__b2d+0xa4>)
 800a57a:	dc17      	bgt.n	800a5ac <__b2d+0x58>
 800a57c:	45c1      	cmp	r9, r8
 800a57e:	bf28      	it	cs
 800a580:	2200      	movcs	r2, #0
 800a582:	f1c0 0c0b 	rsb	ip, r0, #11
 800a586:	fa26 f30c 	lsr.w	r3, r6, ip
 800a58a:	bf38      	it	cc
 800a58c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a590:	ea43 0501 	orr.w	r5, r3, r1
 800a594:	f100 0315 	add.w	r3, r0, #21
 800a598:	fa06 f303 	lsl.w	r3, r6, r3
 800a59c:	fa22 f20c 	lsr.w	r2, r2, ip
 800a5a0:	ea43 0402 	orr.w	r4, r3, r2
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ac:	45c1      	cmp	r9, r8
 800a5ae:	bf2e      	itee	cs
 800a5b0:	2200      	movcs	r2, #0
 800a5b2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a5b6:	f1a7 0808 	subcc.w	r8, r7, #8
 800a5ba:	f1b0 030b 	subs.w	r3, r0, #11
 800a5be:	d016      	beq.n	800a5ee <__b2d+0x9a>
 800a5c0:	f1c3 0720 	rsb	r7, r3, #32
 800a5c4:	fa22 f107 	lsr.w	r1, r2, r7
 800a5c8:	45c8      	cmp	r8, r9
 800a5ca:	fa06 f603 	lsl.w	r6, r6, r3
 800a5ce:	ea46 0601 	orr.w	r6, r6, r1
 800a5d2:	bf94      	ite	ls
 800a5d4:	2100      	movls	r1, #0
 800a5d6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a5da:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a5de:	fa02 f003 	lsl.w	r0, r2, r3
 800a5e2:	40f9      	lsrs	r1, r7
 800a5e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a5e8:	ea40 0401 	orr.w	r4, r0, r1
 800a5ec:	e7da      	b.n	800a5a4 <__b2d+0x50>
 800a5ee:	4614      	mov	r4, r2
 800a5f0:	ea46 0501 	orr.w	r5, r6, r1
 800a5f4:	e7d6      	b.n	800a5a4 <__b2d+0x50>
 800a5f6:	bf00      	nop
 800a5f8:	3ff00000 	.word	0x3ff00000

0800a5fc <__d2b>:
 800a5fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a600:	2101      	movs	r1, #1
 800a602:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a606:	4690      	mov	r8, r2
 800a608:	461d      	mov	r5, r3
 800a60a:	f7ff fc0d 	bl	8009e28 <_Balloc>
 800a60e:	4604      	mov	r4, r0
 800a610:	b930      	cbnz	r0, 800a620 <__d2b+0x24>
 800a612:	4602      	mov	r2, r0
 800a614:	f240 310a 	movw	r1, #778	; 0x30a
 800a618:	4b24      	ldr	r3, [pc, #144]	; (800a6ac <__d2b+0xb0>)
 800a61a:	4825      	ldr	r0, [pc, #148]	; (800a6b0 <__d2b+0xb4>)
 800a61c:	f000 faae 	bl	800ab7c <__assert_func>
 800a620:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a624:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a628:	bb2d      	cbnz	r5, 800a676 <__d2b+0x7a>
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	f1b8 0300 	subs.w	r3, r8, #0
 800a630:	d026      	beq.n	800a680 <__d2b+0x84>
 800a632:	4668      	mov	r0, sp
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	f7ff fd09 	bl	800a04c <__lo0bits>
 800a63a:	9900      	ldr	r1, [sp, #0]
 800a63c:	b1f0      	cbz	r0, 800a67c <__d2b+0x80>
 800a63e:	9a01      	ldr	r2, [sp, #4]
 800a640:	f1c0 0320 	rsb	r3, r0, #32
 800a644:	fa02 f303 	lsl.w	r3, r2, r3
 800a648:	430b      	orrs	r3, r1
 800a64a:	40c2      	lsrs	r2, r0
 800a64c:	6163      	str	r3, [r4, #20]
 800a64e:	9201      	str	r2, [sp, #4]
 800a650:	9b01      	ldr	r3, [sp, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	bf14      	ite	ne
 800a656:	2102      	movne	r1, #2
 800a658:	2101      	moveq	r1, #1
 800a65a:	61a3      	str	r3, [r4, #24]
 800a65c:	6121      	str	r1, [r4, #16]
 800a65e:	b1c5      	cbz	r5, 800a692 <__d2b+0x96>
 800a660:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a664:	4405      	add	r5, r0
 800a666:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a66a:	603d      	str	r5, [r7, #0]
 800a66c:	6030      	str	r0, [r6, #0]
 800a66e:	4620      	mov	r0, r4
 800a670:	b002      	add	sp, #8
 800a672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a67a:	e7d6      	b.n	800a62a <__d2b+0x2e>
 800a67c:	6161      	str	r1, [r4, #20]
 800a67e:	e7e7      	b.n	800a650 <__d2b+0x54>
 800a680:	a801      	add	r0, sp, #4
 800a682:	f7ff fce3 	bl	800a04c <__lo0bits>
 800a686:	2101      	movs	r1, #1
 800a688:	9b01      	ldr	r3, [sp, #4]
 800a68a:	6121      	str	r1, [r4, #16]
 800a68c:	6163      	str	r3, [r4, #20]
 800a68e:	3020      	adds	r0, #32
 800a690:	e7e5      	b.n	800a65e <__d2b+0x62>
 800a692:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a696:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a69a:	6038      	str	r0, [r7, #0]
 800a69c:	6918      	ldr	r0, [r3, #16]
 800a69e:	f7ff fcb5 	bl	800a00c <__hi0bits>
 800a6a2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a6a6:	6031      	str	r1, [r6, #0]
 800a6a8:	e7e1      	b.n	800a66e <__d2b+0x72>
 800a6aa:	bf00      	nop
 800a6ac:	0800b578 	.word	0x0800b578
 800a6b0:	0800b604 	.word	0x0800b604

0800a6b4 <__ratio>:
 800a6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	4688      	mov	r8, r1
 800a6ba:	4669      	mov	r1, sp
 800a6bc:	4681      	mov	r9, r0
 800a6be:	f7ff ff49 	bl	800a554 <__b2d>
 800a6c2:	460f      	mov	r7, r1
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	460d      	mov	r5, r1
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	a901      	add	r1, sp, #4
 800a6cc:	f7ff ff42 	bl	800a554 <__b2d>
 800a6d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6d8:	468b      	mov	fp, r1
 800a6da:	eba3 0c02 	sub.w	ip, r3, r2
 800a6de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6e2:	1a9b      	subs	r3, r3, r2
 800a6e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	bfd5      	itete	le
 800a6ec:	460a      	movle	r2, r1
 800a6ee:	462a      	movgt	r2, r5
 800a6f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6f4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6f8:	bfd8      	it	le
 800a6fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a6fe:	465b      	mov	r3, fp
 800a700:	4602      	mov	r2, r0
 800a702:	4639      	mov	r1, r7
 800a704:	4620      	mov	r0, r4
 800a706:	f7f6 f811 	bl	800072c <__aeabi_ddiv>
 800a70a:	b003      	add	sp, #12
 800a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a710 <__copybits>:
 800a710:	3901      	subs	r1, #1
 800a712:	b570      	push	{r4, r5, r6, lr}
 800a714:	1149      	asrs	r1, r1, #5
 800a716:	6914      	ldr	r4, [r2, #16]
 800a718:	3101      	adds	r1, #1
 800a71a:	f102 0314 	add.w	r3, r2, #20
 800a71e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a722:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a726:	1f05      	subs	r5, r0, #4
 800a728:	42a3      	cmp	r3, r4
 800a72a:	d30c      	bcc.n	800a746 <__copybits+0x36>
 800a72c:	1aa3      	subs	r3, r4, r2
 800a72e:	3b11      	subs	r3, #17
 800a730:	f023 0303 	bic.w	r3, r3, #3
 800a734:	3211      	adds	r2, #17
 800a736:	42a2      	cmp	r2, r4
 800a738:	bf88      	it	hi
 800a73a:	2300      	movhi	r3, #0
 800a73c:	4418      	add	r0, r3
 800a73e:	2300      	movs	r3, #0
 800a740:	4288      	cmp	r0, r1
 800a742:	d305      	bcc.n	800a750 <__copybits+0x40>
 800a744:	bd70      	pop	{r4, r5, r6, pc}
 800a746:	f853 6b04 	ldr.w	r6, [r3], #4
 800a74a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a74e:	e7eb      	b.n	800a728 <__copybits+0x18>
 800a750:	f840 3b04 	str.w	r3, [r0], #4
 800a754:	e7f4      	b.n	800a740 <__copybits+0x30>

0800a756 <__any_on>:
 800a756:	f100 0214 	add.w	r2, r0, #20
 800a75a:	6900      	ldr	r0, [r0, #16]
 800a75c:	114b      	asrs	r3, r1, #5
 800a75e:	4298      	cmp	r0, r3
 800a760:	b510      	push	{r4, lr}
 800a762:	db11      	blt.n	800a788 <__any_on+0x32>
 800a764:	dd0a      	ble.n	800a77c <__any_on+0x26>
 800a766:	f011 011f 	ands.w	r1, r1, #31
 800a76a:	d007      	beq.n	800a77c <__any_on+0x26>
 800a76c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a770:	fa24 f001 	lsr.w	r0, r4, r1
 800a774:	fa00 f101 	lsl.w	r1, r0, r1
 800a778:	428c      	cmp	r4, r1
 800a77a:	d10b      	bne.n	800a794 <__any_on+0x3e>
 800a77c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a780:	4293      	cmp	r3, r2
 800a782:	d803      	bhi.n	800a78c <__any_on+0x36>
 800a784:	2000      	movs	r0, #0
 800a786:	bd10      	pop	{r4, pc}
 800a788:	4603      	mov	r3, r0
 800a78a:	e7f7      	b.n	800a77c <__any_on+0x26>
 800a78c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a790:	2900      	cmp	r1, #0
 800a792:	d0f5      	beq.n	800a780 <__any_on+0x2a>
 800a794:	2001      	movs	r0, #1
 800a796:	e7f6      	b.n	800a786 <__any_on+0x30>

0800a798 <_calloc_r>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	fba1 5402 	umull	r5, r4, r1, r2
 800a79e:	b934      	cbnz	r4, 800a7ae <_calloc_r+0x16>
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	f7fc f9af 	bl	8006b04 <_malloc_r>
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	b928      	cbnz	r0, 800a7b6 <_calloc_r+0x1e>
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	bd70      	pop	{r4, r5, r6, pc}
 800a7ae:	220c      	movs	r2, #12
 800a7b0:	2600      	movs	r6, #0
 800a7b2:	6002      	str	r2, [r0, #0]
 800a7b4:	e7f9      	b.n	800a7aa <_calloc_r+0x12>
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	f7fc f97a 	bl	8006ab2 <memset>
 800a7be:	e7f4      	b.n	800a7aa <_calloc_r+0x12>

0800a7c0 <_free_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	2900      	cmp	r1, #0
 800a7c6:	d040      	beq.n	800a84a <_free_r+0x8a>
 800a7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7cc:	1f0c      	subs	r4, r1, #4
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bfb8      	it	lt
 800a7d2:	18e4      	addlt	r4, r4, r3
 800a7d4:	f7ff fb1c 	bl	8009e10 <__malloc_lock>
 800a7d8:	4a1c      	ldr	r2, [pc, #112]	; (800a84c <_free_r+0x8c>)
 800a7da:	6813      	ldr	r3, [r2, #0]
 800a7dc:	b933      	cbnz	r3, 800a7ec <_free_r+0x2c>
 800a7de:	6063      	str	r3, [r4, #4]
 800a7e0:	6014      	str	r4, [r2, #0]
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e8:	f7ff bb18 	b.w	8009e1c <__malloc_unlock>
 800a7ec:	42a3      	cmp	r3, r4
 800a7ee:	d908      	bls.n	800a802 <_free_r+0x42>
 800a7f0:	6820      	ldr	r0, [r4, #0]
 800a7f2:	1821      	adds	r1, r4, r0
 800a7f4:	428b      	cmp	r3, r1
 800a7f6:	bf01      	itttt	eq
 800a7f8:	6819      	ldreq	r1, [r3, #0]
 800a7fa:	685b      	ldreq	r3, [r3, #4]
 800a7fc:	1809      	addeq	r1, r1, r0
 800a7fe:	6021      	streq	r1, [r4, #0]
 800a800:	e7ed      	b.n	800a7de <_free_r+0x1e>
 800a802:	461a      	mov	r2, r3
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	b10b      	cbz	r3, 800a80c <_free_r+0x4c>
 800a808:	42a3      	cmp	r3, r4
 800a80a:	d9fa      	bls.n	800a802 <_free_r+0x42>
 800a80c:	6811      	ldr	r1, [r2, #0]
 800a80e:	1850      	adds	r0, r2, r1
 800a810:	42a0      	cmp	r0, r4
 800a812:	d10b      	bne.n	800a82c <_free_r+0x6c>
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	4401      	add	r1, r0
 800a818:	1850      	adds	r0, r2, r1
 800a81a:	4283      	cmp	r3, r0
 800a81c:	6011      	str	r1, [r2, #0]
 800a81e:	d1e0      	bne.n	800a7e2 <_free_r+0x22>
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	4401      	add	r1, r0
 800a826:	6011      	str	r1, [r2, #0]
 800a828:	6053      	str	r3, [r2, #4]
 800a82a:	e7da      	b.n	800a7e2 <_free_r+0x22>
 800a82c:	d902      	bls.n	800a834 <_free_r+0x74>
 800a82e:	230c      	movs	r3, #12
 800a830:	602b      	str	r3, [r5, #0]
 800a832:	e7d6      	b.n	800a7e2 <_free_r+0x22>
 800a834:	6820      	ldr	r0, [r4, #0]
 800a836:	1821      	adds	r1, r4, r0
 800a838:	428b      	cmp	r3, r1
 800a83a:	bf01      	itttt	eq
 800a83c:	6819      	ldreq	r1, [r3, #0]
 800a83e:	685b      	ldreq	r3, [r3, #4]
 800a840:	1809      	addeq	r1, r1, r0
 800a842:	6021      	streq	r1, [r4, #0]
 800a844:	6063      	str	r3, [r4, #4]
 800a846:	6054      	str	r4, [r2, #4]
 800a848:	e7cb      	b.n	800a7e2 <_free_r+0x22>
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	20001320 	.word	0x20001320

0800a850 <__ssputs_r>:
 800a850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a854:	688e      	ldr	r6, [r1, #8]
 800a856:	4682      	mov	sl, r0
 800a858:	429e      	cmp	r6, r3
 800a85a:	460c      	mov	r4, r1
 800a85c:	4690      	mov	r8, r2
 800a85e:	461f      	mov	r7, r3
 800a860:	d838      	bhi.n	800a8d4 <__ssputs_r+0x84>
 800a862:	898a      	ldrh	r2, [r1, #12]
 800a864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a868:	d032      	beq.n	800a8d0 <__ssputs_r+0x80>
 800a86a:	6825      	ldr	r5, [r4, #0]
 800a86c:	6909      	ldr	r1, [r1, #16]
 800a86e:	3301      	adds	r3, #1
 800a870:	eba5 0901 	sub.w	r9, r5, r1
 800a874:	6965      	ldr	r5, [r4, #20]
 800a876:	444b      	add	r3, r9
 800a878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a87c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a880:	106d      	asrs	r5, r5, #1
 800a882:	429d      	cmp	r5, r3
 800a884:	bf38      	it	cc
 800a886:	461d      	movcc	r5, r3
 800a888:	0553      	lsls	r3, r2, #21
 800a88a:	d531      	bpl.n	800a8f0 <__ssputs_r+0xa0>
 800a88c:	4629      	mov	r1, r5
 800a88e:	f7fc f939 	bl	8006b04 <_malloc_r>
 800a892:	4606      	mov	r6, r0
 800a894:	b950      	cbnz	r0, 800a8ac <__ssputs_r+0x5c>
 800a896:	230c      	movs	r3, #12
 800a898:	f04f 30ff 	mov.w	r0, #4294967295
 800a89c:	f8ca 3000 	str.w	r3, [sl]
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ac:	464a      	mov	r2, r9
 800a8ae:	6921      	ldr	r1, [r4, #16]
 800a8b0:	f7fc f8f1 	bl	8006a96 <memcpy>
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8be:	81a3      	strh	r3, [r4, #12]
 800a8c0:	6126      	str	r6, [r4, #16]
 800a8c2:	444e      	add	r6, r9
 800a8c4:	6026      	str	r6, [r4, #0]
 800a8c6:	463e      	mov	r6, r7
 800a8c8:	6165      	str	r5, [r4, #20]
 800a8ca:	eba5 0509 	sub.w	r5, r5, r9
 800a8ce:	60a5      	str	r5, [r4, #8]
 800a8d0:	42be      	cmp	r6, r7
 800a8d2:	d900      	bls.n	800a8d6 <__ssputs_r+0x86>
 800a8d4:	463e      	mov	r6, r7
 800a8d6:	4632      	mov	r2, r6
 800a8d8:	4641      	mov	r1, r8
 800a8da:	6820      	ldr	r0, [r4, #0]
 800a8dc:	f000 f97e 	bl	800abdc <memmove>
 800a8e0:	68a3      	ldr	r3, [r4, #8]
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	1b9b      	subs	r3, r3, r6
 800a8e6:	60a3      	str	r3, [r4, #8]
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	4433      	add	r3, r6
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	e7db      	b.n	800a8a8 <__ssputs_r+0x58>
 800a8f0:	462a      	mov	r2, r5
 800a8f2:	f000 f98d 	bl	800ac10 <_realloc_r>
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d1e1      	bne.n	800a8c0 <__ssputs_r+0x70>
 800a8fc:	4650      	mov	r0, sl
 800a8fe:	6921      	ldr	r1, [r4, #16]
 800a900:	f7ff ff5e 	bl	800a7c0 <_free_r>
 800a904:	e7c7      	b.n	800a896 <__ssputs_r+0x46>
	...

0800a908 <_svfiprintf_r>:
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	4698      	mov	r8, r3
 800a90e:	898b      	ldrh	r3, [r1, #12]
 800a910:	4607      	mov	r7, r0
 800a912:	061b      	lsls	r3, r3, #24
 800a914:	460d      	mov	r5, r1
 800a916:	4614      	mov	r4, r2
 800a918:	b09d      	sub	sp, #116	; 0x74
 800a91a:	d50e      	bpl.n	800a93a <_svfiprintf_r+0x32>
 800a91c:	690b      	ldr	r3, [r1, #16]
 800a91e:	b963      	cbnz	r3, 800a93a <_svfiprintf_r+0x32>
 800a920:	2140      	movs	r1, #64	; 0x40
 800a922:	f7fc f8ef 	bl	8006b04 <_malloc_r>
 800a926:	6028      	str	r0, [r5, #0]
 800a928:	6128      	str	r0, [r5, #16]
 800a92a:	b920      	cbnz	r0, 800a936 <_svfiprintf_r+0x2e>
 800a92c:	230c      	movs	r3, #12
 800a92e:	603b      	str	r3, [r7, #0]
 800a930:	f04f 30ff 	mov.w	r0, #4294967295
 800a934:	e0d1      	b.n	800aada <_svfiprintf_r+0x1d2>
 800a936:	2340      	movs	r3, #64	; 0x40
 800a938:	616b      	str	r3, [r5, #20]
 800a93a:	2300      	movs	r3, #0
 800a93c:	9309      	str	r3, [sp, #36]	; 0x24
 800a93e:	2320      	movs	r3, #32
 800a940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a944:	2330      	movs	r3, #48	; 0x30
 800a946:	f04f 0901 	mov.w	r9, #1
 800a94a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a94e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aaf4 <_svfiprintf_r+0x1ec>
 800a952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a956:	4623      	mov	r3, r4
 800a958:	469a      	mov	sl, r3
 800a95a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a95e:	b10a      	cbz	r2, 800a964 <_svfiprintf_r+0x5c>
 800a960:	2a25      	cmp	r2, #37	; 0x25
 800a962:	d1f9      	bne.n	800a958 <_svfiprintf_r+0x50>
 800a964:	ebba 0b04 	subs.w	fp, sl, r4
 800a968:	d00b      	beq.n	800a982 <_svfiprintf_r+0x7a>
 800a96a:	465b      	mov	r3, fp
 800a96c:	4622      	mov	r2, r4
 800a96e:	4629      	mov	r1, r5
 800a970:	4638      	mov	r0, r7
 800a972:	f7ff ff6d 	bl	800a850 <__ssputs_r>
 800a976:	3001      	adds	r0, #1
 800a978:	f000 80aa 	beq.w	800aad0 <_svfiprintf_r+0x1c8>
 800a97c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a97e:	445a      	add	r2, fp
 800a980:	9209      	str	r2, [sp, #36]	; 0x24
 800a982:	f89a 3000 	ldrb.w	r3, [sl]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 80a2 	beq.w	800aad0 <_svfiprintf_r+0x1c8>
 800a98c:	2300      	movs	r3, #0
 800a98e:	f04f 32ff 	mov.w	r2, #4294967295
 800a992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a996:	f10a 0a01 	add.w	sl, sl, #1
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	9307      	str	r3, [sp, #28]
 800a99e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a9a4:	4654      	mov	r4, sl
 800a9a6:	2205      	movs	r2, #5
 800a9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ac:	4851      	ldr	r0, [pc, #324]	; (800aaf4 <_svfiprintf_r+0x1ec>)
 800a9ae:	f7ff fa21 	bl	8009df4 <memchr>
 800a9b2:	9a04      	ldr	r2, [sp, #16]
 800a9b4:	b9d8      	cbnz	r0, 800a9ee <_svfiprintf_r+0xe6>
 800a9b6:	06d0      	lsls	r0, r2, #27
 800a9b8:	bf44      	itt	mi
 800a9ba:	2320      	movmi	r3, #32
 800a9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9c0:	0711      	lsls	r1, r2, #28
 800a9c2:	bf44      	itt	mi
 800a9c4:	232b      	movmi	r3, #43	; 0x2b
 800a9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a9d0:	d015      	beq.n	800a9fe <_svfiprintf_r+0xf6>
 800a9d2:	4654      	mov	r4, sl
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	f04f 0c0a 	mov.w	ip, #10
 800a9da:	9a07      	ldr	r2, [sp, #28]
 800a9dc:	4621      	mov	r1, r4
 800a9de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e2:	3b30      	subs	r3, #48	; 0x30
 800a9e4:	2b09      	cmp	r3, #9
 800a9e6:	d94e      	bls.n	800aa86 <_svfiprintf_r+0x17e>
 800a9e8:	b1b0      	cbz	r0, 800aa18 <_svfiprintf_r+0x110>
 800a9ea:	9207      	str	r2, [sp, #28]
 800a9ec:	e014      	b.n	800aa18 <_svfiprintf_r+0x110>
 800a9ee:	eba0 0308 	sub.w	r3, r0, r8
 800a9f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	46a2      	mov	sl, r4
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	e7d2      	b.n	800a9a4 <_svfiprintf_r+0x9c>
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	1d19      	adds	r1, r3, #4
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	9103      	str	r1, [sp, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bfbb      	ittet	lt
 800aa0a:	425b      	neglt	r3, r3
 800aa0c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa10:	9307      	strge	r3, [sp, #28]
 800aa12:	9307      	strlt	r3, [sp, #28]
 800aa14:	bfb8      	it	lt
 800aa16:	9204      	strlt	r2, [sp, #16]
 800aa18:	7823      	ldrb	r3, [r4, #0]
 800aa1a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa1c:	d10c      	bne.n	800aa38 <_svfiprintf_r+0x130>
 800aa1e:	7863      	ldrb	r3, [r4, #1]
 800aa20:	2b2a      	cmp	r3, #42	; 0x2a
 800aa22:	d135      	bne.n	800aa90 <_svfiprintf_r+0x188>
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	3402      	adds	r4, #2
 800aa28:	1d1a      	adds	r2, r3, #4
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	9203      	str	r2, [sp, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	bfb8      	it	lt
 800aa32:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa36:	9305      	str	r3, [sp, #20]
 800aa38:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800aaf8 <_svfiprintf_r+0x1f0>
 800aa3c:	2203      	movs	r2, #3
 800aa3e:	4650      	mov	r0, sl
 800aa40:	7821      	ldrb	r1, [r4, #0]
 800aa42:	f7ff f9d7 	bl	8009df4 <memchr>
 800aa46:	b140      	cbz	r0, 800aa5a <_svfiprintf_r+0x152>
 800aa48:	2340      	movs	r3, #64	; 0x40
 800aa4a:	eba0 000a 	sub.w	r0, r0, sl
 800aa4e:	fa03 f000 	lsl.w	r0, r3, r0
 800aa52:	9b04      	ldr	r3, [sp, #16]
 800aa54:	3401      	adds	r4, #1
 800aa56:	4303      	orrs	r3, r0
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5e:	2206      	movs	r2, #6
 800aa60:	4826      	ldr	r0, [pc, #152]	; (800aafc <_svfiprintf_r+0x1f4>)
 800aa62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa66:	f7ff f9c5 	bl	8009df4 <memchr>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d038      	beq.n	800aae0 <_svfiprintf_r+0x1d8>
 800aa6e:	4b24      	ldr	r3, [pc, #144]	; (800ab00 <_svfiprintf_r+0x1f8>)
 800aa70:	bb1b      	cbnz	r3, 800aaba <_svfiprintf_r+0x1b2>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	3307      	adds	r3, #7
 800aa76:	f023 0307 	bic.w	r3, r3, #7
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	9303      	str	r3, [sp, #12]
 800aa7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa80:	4433      	add	r3, r6
 800aa82:	9309      	str	r3, [sp, #36]	; 0x24
 800aa84:	e767      	b.n	800a956 <_svfiprintf_r+0x4e>
 800aa86:	460c      	mov	r4, r1
 800aa88:	2001      	movs	r0, #1
 800aa8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa8e:	e7a5      	b.n	800a9dc <_svfiprintf_r+0xd4>
 800aa90:	2300      	movs	r3, #0
 800aa92:	f04f 0c0a 	mov.w	ip, #10
 800aa96:	4619      	mov	r1, r3
 800aa98:	3401      	adds	r4, #1
 800aa9a:	9305      	str	r3, [sp, #20]
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa2:	3a30      	subs	r2, #48	; 0x30
 800aaa4:	2a09      	cmp	r2, #9
 800aaa6:	d903      	bls.n	800aab0 <_svfiprintf_r+0x1a8>
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0c5      	beq.n	800aa38 <_svfiprintf_r+0x130>
 800aaac:	9105      	str	r1, [sp, #20]
 800aaae:	e7c3      	b.n	800aa38 <_svfiprintf_r+0x130>
 800aab0:	4604      	mov	r4, r0
 800aab2:	2301      	movs	r3, #1
 800aab4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aab8:	e7f0      	b.n	800aa9c <_svfiprintf_r+0x194>
 800aaba:	ab03      	add	r3, sp, #12
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	462a      	mov	r2, r5
 800aac0:	4638      	mov	r0, r7
 800aac2:	4b10      	ldr	r3, [pc, #64]	; (800ab04 <_svfiprintf_r+0x1fc>)
 800aac4:	a904      	add	r1, sp, #16
 800aac6:	f7fc f92f 	bl	8006d28 <_printf_float>
 800aaca:	1c42      	adds	r2, r0, #1
 800aacc:	4606      	mov	r6, r0
 800aace:	d1d6      	bne.n	800aa7e <_svfiprintf_r+0x176>
 800aad0:	89ab      	ldrh	r3, [r5, #12]
 800aad2:	065b      	lsls	r3, r3, #25
 800aad4:	f53f af2c 	bmi.w	800a930 <_svfiprintf_r+0x28>
 800aad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aada:	b01d      	add	sp, #116	; 0x74
 800aadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae0:	ab03      	add	r3, sp, #12
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	462a      	mov	r2, r5
 800aae6:	4638      	mov	r0, r7
 800aae8:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <_svfiprintf_r+0x1fc>)
 800aaea:	a904      	add	r1, sp, #16
 800aaec:	f7fc fbb8 	bl	8007260 <_printf_i>
 800aaf0:	e7eb      	b.n	800aaca <_svfiprintf_r+0x1c2>
 800aaf2:	bf00      	nop
 800aaf4:	0800b75c 	.word	0x0800b75c
 800aaf8:	0800b762 	.word	0x0800b762
 800aafc:	0800b766 	.word	0x0800b766
 800ab00:	08006d29 	.word	0x08006d29
 800ab04:	0800a851 	.word	0x0800a851

0800ab08 <_read_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4608      	mov	r0, r1
 800ab0e:	4611      	mov	r1, r2
 800ab10:	2200      	movs	r2, #0
 800ab12:	4d05      	ldr	r5, [pc, #20]	; (800ab28 <_read_r+0x20>)
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f7f6 fc2d 	bl	8001376 <_read>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_read_r+0x1e>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_read_r+0x1e>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	20001328 	.word	0x20001328

0800ab2c <nan>:
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	4901      	ldr	r1, [pc, #4]	; (800ab34 <nan+0x8>)
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	7ff80000 	.word	0x7ff80000

0800ab38 <strncmp>:
 800ab38:	4603      	mov	r3, r0
 800ab3a:	b510      	push	{r4, lr}
 800ab3c:	b172      	cbz	r2, 800ab5c <strncmp+0x24>
 800ab3e:	3901      	subs	r1, #1
 800ab40:	1884      	adds	r4, r0, r2
 800ab42:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab4a:	4290      	cmp	r0, r2
 800ab4c:	d101      	bne.n	800ab52 <strncmp+0x1a>
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	d101      	bne.n	800ab56 <strncmp+0x1e>
 800ab52:	1a80      	subs	r0, r0, r2
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d1f3      	bne.n	800ab42 <strncmp+0xa>
 800ab5a:	e7fa      	b.n	800ab52 <strncmp+0x1a>
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	e7f9      	b.n	800ab54 <strncmp+0x1c>

0800ab60 <__ascii_wctomb>:
 800ab60:	4603      	mov	r3, r0
 800ab62:	4608      	mov	r0, r1
 800ab64:	b141      	cbz	r1, 800ab78 <__ascii_wctomb+0x18>
 800ab66:	2aff      	cmp	r2, #255	; 0xff
 800ab68:	d904      	bls.n	800ab74 <__ascii_wctomb+0x14>
 800ab6a:	228a      	movs	r2, #138	; 0x8a
 800ab6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	4770      	bx	lr
 800ab74:	2001      	movs	r0, #1
 800ab76:	700a      	strb	r2, [r1, #0]
 800ab78:	4770      	bx	lr
	...

0800ab7c <__assert_func>:
 800ab7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab7e:	4614      	mov	r4, r2
 800ab80:	461a      	mov	r2, r3
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <__assert_func+0x2c>)
 800ab84:	4605      	mov	r5, r0
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68d8      	ldr	r0, [r3, #12]
 800ab8a:	b14c      	cbz	r4, 800aba0 <__assert_func+0x24>
 800ab8c:	4b07      	ldr	r3, [pc, #28]	; (800abac <__assert_func+0x30>)
 800ab8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab92:	9100      	str	r1, [sp, #0]
 800ab94:	462b      	mov	r3, r5
 800ab96:	4906      	ldr	r1, [pc, #24]	; (800abb0 <__assert_func+0x34>)
 800ab98:	f000 f80e 	bl	800abb8 <fiprintf>
 800ab9c:	f000 fa7e 	bl	800b09c <abort>
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <__assert_func+0x38>)
 800aba2:	461c      	mov	r4, r3
 800aba4:	e7f3      	b.n	800ab8e <__assert_func+0x12>
 800aba6:	bf00      	nop
 800aba8:	20000010 	.word	0x20000010
 800abac:	0800b76d 	.word	0x0800b76d
 800abb0:	0800b77a 	.word	0x0800b77a
 800abb4:	0800b7a8 	.word	0x0800b7a8

0800abb8 <fiprintf>:
 800abb8:	b40e      	push	{r1, r2, r3}
 800abba:	b503      	push	{r0, r1, lr}
 800abbc:	4601      	mov	r1, r0
 800abbe:	ab03      	add	r3, sp, #12
 800abc0:	4805      	ldr	r0, [pc, #20]	; (800abd8 <fiprintf+0x20>)
 800abc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc6:	6800      	ldr	r0, [r0, #0]
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	f000 f877 	bl	800acbc <_vfiprintf_r>
 800abce:	b002      	add	sp, #8
 800abd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abd4:	b003      	add	sp, #12
 800abd6:	4770      	bx	lr
 800abd8:	20000010 	.word	0x20000010

0800abdc <memmove>:
 800abdc:	4288      	cmp	r0, r1
 800abde:	b510      	push	{r4, lr}
 800abe0:	eb01 0402 	add.w	r4, r1, r2
 800abe4:	d902      	bls.n	800abec <memmove+0x10>
 800abe6:	4284      	cmp	r4, r0
 800abe8:	4623      	mov	r3, r4
 800abea:	d807      	bhi.n	800abfc <memmove+0x20>
 800abec:	1e43      	subs	r3, r0, #1
 800abee:	42a1      	cmp	r1, r4
 800abf0:	d008      	beq.n	800ac04 <memmove+0x28>
 800abf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abfa:	e7f8      	b.n	800abee <memmove+0x12>
 800abfc:	4601      	mov	r1, r0
 800abfe:	4402      	add	r2, r0
 800ac00:	428a      	cmp	r2, r1
 800ac02:	d100      	bne.n	800ac06 <memmove+0x2a>
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac0e:	e7f7      	b.n	800ac00 <memmove+0x24>

0800ac10 <_realloc_r>:
 800ac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac14:	4680      	mov	r8, r0
 800ac16:	4614      	mov	r4, r2
 800ac18:	460e      	mov	r6, r1
 800ac1a:	b921      	cbnz	r1, 800ac26 <_realloc_r+0x16>
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac22:	f7fb bf6f 	b.w	8006b04 <_malloc_r>
 800ac26:	b92a      	cbnz	r2, 800ac34 <_realloc_r+0x24>
 800ac28:	f7ff fdca 	bl	800a7c0 <_free_r>
 800ac2c:	4625      	mov	r5, r4
 800ac2e:	4628      	mov	r0, r5
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	f000 fa9e 	bl	800b174 <_malloc_usable_size_r>
 800ac38:	4284      	cmp	r4, r0
 800ac3a:	4607      	mov	r7, r0
 800ac3c:	d802      	bhi.n	800ac44 <_realloc_r+0x34>
 800ac3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac42:	d812      	bhi.n	800ac6a <_realloc_r+0x5a>
 800ac44:	4621      	mov	r1, r4
 800ac46:	4640      	mov	r0, r8
 800ac48:	f7fb ff5c 	bl	8006b04 <_malloc_r>
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d0ed      	beq.n	800ac2e <_realloc_r+0x1e>
 800ac52:	42bc      	cmp	r4, r7
 800ac54:	4622      	mov	r2, r4
 800ac56:	4631      	mov	r1, r6
 800ac58:	bf28      	it	cs
 800ac5a:	463a      	movcs	r2, r7
 800ac5c:	f7fb ff1b 	bl	8006a96 <memcpy>
 800ac60:	4631      	mov	r1, r6
 800ac62:	4640      	mov	r0, r8
 800ac64:	f7ff fdac 	bl	800a7c0 <_free_r>
 800ac68:	e7e1      	b.n	800ac2e <_realloc_r+0x1e>
 800ac6a:	4635      	mov	r5, r6
 800ac6c:	e7df      	b.n	800ac2e <_realloc_r+0x1e>

0800ac6e <__sfputc_r>:
 800ac6e:	6893      	ldr	r3, [r2, #8]
 800ac70:	b410      	push	{r4}
 800ac72:	3b01      	subs	r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	6093      	str	r3, [r2, #8]
 800ac78:	da07      	bge.n	800ac8a <__sfputc_r+0x1c>
 800ac7a:	6994      	ldr	r4, [r2, #24]
 800ac7c:	42a3      	cmp	r3, r4
 800ac7e:	db01      	blt.n	800ac84 <__sfputc_r+0x16>
 800ac80:	290a      	cmp	r1, #10
 800ac82:	d102      	bne.n	800ac8a <__sfputc_r+0x1c>
 800ac84:	bc10      	pop	{r4}
 800ac86:	f000 b949 	b.w	800af1c <__swbuf_r>
 800ac8a:	6813      	ldr	r3, [r2, #0]
 800ac8c:	1c58      	adds	r0, r3, #1
 800ac8e:	6010      	str	r0, [r2, #0]
 800ac90:	7019      	strb	r1, [r3, #0]
 800ac92:	4608      	mov	r0, r1
 800ac94:	bc10      	pop	{r4}
 800ac96:	4770      	bx	lr

0800ac98 <__sfputs_r>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	4614      	mov	r4, r2
 800aca0:	18d5      	adds	r5, r2, r3
 800aca2:	42ac      	cmp	r4, r5
 800aca4:	d101      	bne.n	800acaa <__sfputs_r+0x12>
 800aca6:	2000      	movs	r0, #0
 800aca8:	e007      	b.n	800acba <__sfputs_r+0x22>
 800acaa:	463a      	mov	r2, r7
 800acac:	4630      	mov	r0, r6
 800acae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb2:	f7ff ffdc 	bl	800ac6e <__sfputc_r>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	d1f3      	bne.n	800aca2 <__sfputs_r+0xa>
 800acba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800acbc <_vfiprintf_r>:
 800acbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc0:	460d      	mov	r5, r1
 800acc2:	4614      	mov	r4, r2
 800acc4:	4698      	mov	r8, r3
 800acc6:	4606      	mov	r6, r0
 800acc8:	b09d      	sub	sp, #116	; 0x74
 800acca:	b118      	cbz	r0, 800acd4 <_vfiprintf_r+0x18>
 800accc:	6983      	ldr	r3, [r0, #24]
 800acce:	b90b      	cbnz	r3, 800acd4 <_vfiprintf_r+0x18>
 800acd0:	f7fb fe1c 	bl	800690c <__sinit>
 800acd4:	4b89      	ldr	r3, [pc, #548]	; (800aefc <_vfiprintf_r+0x240>)
 800acd6:	429d      	cmp	r5, r3
 800acd8:	d11b      	bne.n	800ad12 <_vfiprintf_r+0x56>
 800acda:	6875      	ldr	r5, [r6, #4]
 800acdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acde:	07d9      	lsls	r1, r3, #31
 800ace0:	d405      	bmi.n	800acee <_vfiprintf_r+0x32>
 800ace2:	89ab      	ldrh	r3, [r5, #12]
 800ace4:	059a      	lsls	r2, r3, #22
 800ace6:	d402      	bmi.n	800acee <_vfiprintf_r+0x32>
 800ace8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acea:	f7fb fed2 	bl	8006a92 <__retarget_lock_acquire_recursive>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	071b      	lsls	r3, r3, #28
 800acf2:	d501      	bpl.n	800acf8 <_vfiprintf_r+0x3c>
 800acf4:	692b      	ldr	r3, [r5, #16]
 800acf6:	b9eb      	cbnz	r3, 800ad34 <_vfiprintf_r+0x78>
 800acf8:	4629      	mov	r1, r5
 800acfa:	4630      	mov	r0, r6
 800acfc:	f000 f960 	bl	800afc0 <__swsetup_r>
 800ad00:	b1c0      	cbz	r0, 800ad34 <_vfiprintf_r+0x78>
 800ad02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad04:	07dc      	lsls	r4, r3, #31
 800ad06:	d50e      	bpl.n	800ad26 <_vfiprintf_r+0x6a>
 800ad08:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0c:	b01d      	add	sp, #116	; 0x74
 800ad0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad12:	4b7b      	ldr	r3, [pc, #492]	; (800af00 <_vfiprintf_r+0x244>)
 800ad14:	429d      	cmp	r5, r3
 800ad16:	d101      	bne.n	800ad1c <_vfiprintf_r+0x60>
 800ad18:	68b5      	ldr	r5, [r6, #8]
 800ad1a:	e7df      	b.n	800acdc <_vfiprintf_r+0x20>
 800ad1c:	4b79      	ldr	r3, [pc, #484]	; (800af04 <_vfiprintf_r+0x248>)
 800ad1e:	429d      	cmp	r5, r3
 800ad20:	bf08      	it	eq
 800ad22:	68f5      	ldreq	r5, [r6, #12]
 800ad24:	e7da      	b.n	800acdc <_vfiprintf_r+0x20>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	0598      	lsls	r0, r3, #22
 800ad2a:	d4ed      	bmi.n	800ad08 <_vfiprintf_r+0x4c>
 800ad2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad2e:	f7fb feb1 	bl	8006a94 <__retarget_lock_release_recursive>
 800ad32:	e7e9      	b.n	800ad08 <_vfiprintf_r+0x4c>
 800ad34:	2300      	movs	r3, #0
 800ad36:	9309      	str	r3, [sp, #36]	; 0x24
 800ad38:	2320      	movs	r3, #32
 800ad3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad3e:	2330      	movs	r3, #48	; 0x30
 800ad40:	f04f 0901 	mov.w	r9, #1
 800ad44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad48:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800af08 <_vfiprintf_r+0x24c>
 800ad4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad50:	4623      	mov	r3, r4
 800ad52:	469a      	mov	sl, r3
 800ad54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad58:	b10a      	cbz	r2, 800ad5e <_vfiprintf_r+0xa2>
 800ad5a:	2a25      	cmp	r2, #37	; 0x25
 800ad5c:	d1f9      	bne.n	800ad52 <_vfiprintf_r+0x96>
 800ad5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad62:	d00b      	beq.n	800ad7c <_vfiprintf_r+0xc0>
 800ad64:	465b      	mov	r3, fp
 800ad66:	4622      	mov	r2, r4
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f7ff ff94 	bl	800ac98 <__sfputs_r>
 800ad70:	3001      	adds	r0, #1
 800ad72:	f000 80aa 	beq.w	800aeca <_vfiprintf_r+0x20e>
 800ad76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad78:	445a      	add	r2, fp
 800ad7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 80a2 	beq.w	800aeca <_vfiprintf_r+0x20e>
 800ad86:	2300      	movs	r3, #0
 800ad88:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad90:	f10a 0a01 	add.w	sl, sl, #1
 800ad94:	9304      	str	r3, [sp, #16]
 800ad96:	9307      	str	r3, [sp, #28]
 800ad98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad9e:	4654      	mov	r4, sl
 800ada0:	2205      	movs	r2, #5
 800ada2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada6:	4858      	ldr	r0, [pc, #352]	; (800af08 <_vfiprintf_r+0x24c>)
 800ada8:	f7ff f824 	bl	8009df4 <memchr>
 800adac:	9a04      	ldr	r2, [sp, #16]
 800adae:	b9d8      	cbnz	r0, 800ade8 <_vfiprintf_r+0x12c>
 800adb0:	06d1      	lsls	r1, r2, #27
 800adb2:	bf44      	itt	mi
 800adb4:	2320      	movmi	r3, #32
 800adb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adba:	0713      	lsls	r3, r2, #28
 800adbc:	bf44      	itt	mi
 800adbe:	232b      	movmi	r3, #43	; 0x2b
 800adc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc4:	f89a 3000 	ldrb.w	r3, [sl]
 800adc8:	2b2a      	cmp	r3, #42	; 0x2a
 800adca:	d015      	beq.n	800adf8 <_vfiprintf_r+0x13c>
 800adcc:	4654      	mov	r4, sl
 800adce:	2000      	movs	r0, #0
 800add0:	f04f 0c0a 	mov.w	ip, #10
 800add4:	9a07      	ldr	r2, [sp, #28]
 800add6:	4621      	mov	r1, r4
 800add8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800addc:	3b30      	subs	r3, #48	; 0x30
 800adde:	2b09      	cmp	r3, #9
 800ade0:	d94e      	bls.n	800ae80 <_vfiprintf_r+0x1c4>
 800ade2:	b1b0      	cbz	r0, 800ae12 <_vfiprintf_r+0x156>
 800ade4:	9207      	str	r2, [sp, #28]
 800ade6:	e014      	b.n	800ae12 <_vfiprintf_r+0x156>
 800ade8:	eba0 0308 	sub.w	r3, r0, r8
 800adec:	fa09 f303 	lsl.w	r3, r9, r3
 800adf0:	4313      	orrs	r3, r2
 800adf2:	46a2      	mov	sl, r4
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	e7d2      	b.n	800ad9e <_vfiprintf_r+0xe2>
 800adf8:	9b03      	ldr	r3, [sp, #12]
 800adfa:	1d19      	adds	r1, r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	9103      	str	r1, [sp, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfbb      	ittet	lt
 800ae04:	425b      	neglt	r3, r3
 800ae06:	f042 0202 	orrlt.w	r2, r2, #2
 800ae0a:	9307      	strge	r3, [sp, #28]
 800ae0c:	9307      	strlt	r3, [sp, #28]
 800ae0e:	bfb8      	it	lt
 800ae10:	9204      	strlt	r2, [sp, #16]
 800ae12:	7823      	ldrb	r3, [r4, #0]
 800ae14:	2b2e      	cmp	r3, #46	; 0x2e
 800ae16:	d10c      	bne.n	800ae32 <_vfiprintf_r+0x176>
 800ae18:	7863      	ldrb	r3, [r4, #1]
 800ae1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae1c:	d135      	bne.n	800ae8a <_vfiprintf_r+0x1ce>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	3402      	adds	r4, #2
 800ae22:	1d1a      	adds	r2, r3, #4
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	9203      	str	r2, [sp, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bfb8      	it	lt
 800ae2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae30:	9305      	str	r3, [sp, #20]
 800ae32:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800af0c <_vfiprintf_r+0x250>
 800ae36:	2203      	movs	r2, #3
 800ae38:	4650      	mov	r0, sl
 800ae3a:	7821      	ldrb	r1, [r4, #0]
 800ae3c:	f7fe ffda 	bl	8009df4 <memchr>
 800ae40:	b140      	cbz	r0, 800ae54 <_vfiprintf_r+0x198>
 800ae42:	2340      	movs	r3, #64	; 0x40
 800ae44:	eba0 000a 	sub.w	r0, r0, sl
 800ae48:	fa03 f000 	lsl.w	r0, r3, r0
 800ae4c:	9b04      	ldr	r3, [sp, #16]
 800ae4e:	3401      	adds	r4, #1
 800ae50:	4303      	orrs	r3, r0
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae58:	2206      	movs	r2, #6
 800ae5a:	482d      	ldr	r0, [pc, #180]	; (800af10 <_vfiprintf_r+0x254>)
 800ae5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae60:	f7fe ffc8 	bl	8009df4 <memchr>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d03f      	beq.n	800aee8 <_vfiprintf_r+0x22c>
 800ae68:	4b2a      	ldr	r3, [pc, #168]	; (800af14 <_vfiprintf_r+0x258>)
 800ae6a:	bb1b      	cbnz	r3, 800aeb4 <_vfiprintf_r+0x1f8>
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	3307      	adds	r3, #7
 800ae70:	f023 0307 	bic.w	r3, r3, #7
 800ae74:	3308      	adds	r3, #8
 800ae76:	9303      	str	r3, [sp, #12]
 800ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7a:	443b      	add	r3, r7
 800ae7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7e:	e767      	b.n	800ad50 <_vfiprintf_r+0x94>
 800ae80:	460c      	mov	r4, r1
 800ae82:	2001      	movs	r0, #1
 800ae84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae88:	e7a5      	b.n	800add6 <_vfiprintf_r+0x11a>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f04f 0c0a 	mov.w	ip, #10
 800ae90:	4619      	mov	r1, r3
 800ae92:	3401      	adds	r4, #1
 800ae94:	9305      	str	r3, [sp, #20]
 800ae96:	4620      	mov	r0, r4
 800ae98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae9c:	3a30      	subs	r2, #48	; 0x30
 800ae9e:	2a09      	cmp	r2, #9
 800aea0:	d903      	bls.n	800aeaa <_vfiprintf_r+0x1ee>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0c5      	beq.n	800ae32 <_vfiprintf_r+0x176>
 800aea6:	9105      	str	r1, [sp, #20]
 800aea8:	e7c3      	b.n	800ae32 <_vfiprintf_r+0x176>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	2301      	movs	r3, #1
 800aeae:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeb2:	e7f0      	b.n	800ae96 <_vfiprintf_r+0x1da>
 800aeb4:	ab03      	add	r3, sp, #12
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	462a      	mov	r2, r5
 800aeba:	4630      	mov	r0, r6
 800aebc:	4b16      	ldr	r3, [pc, #88]	; (800af18 <_vfiprintf_r+0x25c>)
 800aebe:	a904      	add	r1, sp, #16
 800aec0:	f7fb ff32 	bl	8006d28 <_printf_float>
 800aec4:	4607      	mov	r7, r0
 800aec6:	1c78      	adds	r0, r7, #1
 800aec8:	d1d6      	bne.n	800ae78 <_vfiprintf_r+0x1bc>
 800aeca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aecc:	07d9      	lsls	r1, r3, #31
 800aece:	d405      	bmi.n	800aedc <_vfiprintf_r+0x220>
 800aed0:	89ab      	ldrh	r3, [r5, #12]
 800aed2:	059a      	lsls	r2, r3, #22
 800aed4:	d402      	bmi.n	800aedc <_vfiprintf_r+0x220>
 800aed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aed8:	f7fb fddc 	bl	8006a94 <__retarget_lock_release_recursive>
 800aedc:	89ab      	ldrh	r3, [r5, #12]
 800aede:	065b      	lsls	r3, r3, #25
 800aee0:	f53f af12 	bmi.w	800ad08 <_vfiprintf_r+0x4c>
 800aee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aee6:	e711      	b.n	800ad0c <_vfiprintf_r+0x50>
 800aee8:	ab03      	add	r3, sp, #12
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	462a      	mov	r2, r5
 800aeee:	4630      	mov	r0, r6
 800aef0:	4b09      	ldr	r3, [pc, #36]	; (800af18 <_vfiprintf_r+0x25c>)
 800aef2:	a904      	add	r1, sp, #16
 800aef4:	f7fc f9b4 	bl	8007260 <_printf_i>
 800aef8:	e7e4      	b.n	800aec4 <_vfiprintf_r+0x208>
 800aefa:	bf00      	nop
 800aefc:	0800b328 	.word	0x0800b328
 800af00:	0800b348 	.word	0x0800b348
 800af04:	0800b308 	.word	0x0800b308
 800af08:	0800b75c 	.word	0x0800b75c
 800af0c:	0800b762 	.word	0x0800b762
 800af10:	0800b766 	.word	0x0800b766
 800af14:	08006d29 	.word	0x08006d29
 800af18:	0800ac99 	.word	0x0800ac99

0800af1c <__swbuf_r>:
 800af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1e:	460e      	mov	r6, r1
 800af20:	4614      	mov	r4, r2
 800af22:	4605      	mov	r5, r0
 800af24:	b118      	cbz	r0, 800af2e <__swbuf_r+0x12>
 800af26:	6983      	ldr	r3, [r0, #24]
 800af28:	b90b      	cbnz	r3, 800af2e <__swbuf_r+0x12>
 800af2a:	f7fb fcef 	bl	800690c <__sinit>
 800af2e:	4b21      	ldr	r3, [pc, #132]	; (800afb4 <__swbuf_r+0x98>)
 800af30:	429c      	cmp	r4, r3
 800af32:	d12b      	bne.n	800af8c <__swbuf_r+0x70>
 800af34:	686c      	ldr	r4, [r5, #4]
 800af36:	69a3      	ldr	r3, [r4, #24]
 800af38:	60a3      	str	r3, [r4, #8]
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	071a      	lsls	r2, r3, #28
 800af3e:	d52f      	bpl.n	800afa0 <__swbuf_r+0x84>
 800af40:	6923      	ldr	r3, [r4, #16]
 800af42:	b36b      	cbz	r3, 800afa0 <__swbuf_r+0x84>
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	6820      	ldr	r0, [r4, #0]
 800af48:	b2f6      	uxtb	r6, r6
 800af4a:	1ac0      	subs	r0, r0, r3
 800af4c:	6963      	ldr	r3, [r4, #20]
 800af4e:	4637      	mov	r7, r6
 800af50:	4283      	cmp	r3, r0
 800af52:	dc04      	bgt.n	800af5e <__swbuf_r+0x42>
 800af54:	4621      	mov	r1, r4
 800af56:	4628      	mov	r0, r5
 800af58:	f7fe fb7a 	bl	8009650 <_fflush_r>
 800af5c:	bb30      	cbnz	r0, 800afac <__swbuf_r+0x90>
 800af5e:	68a3      	ldr	r3, [r4, #8]
 800af60:	3001      	adds	r0, #1
 800af62:	3b01      	subs	r3, #1
 800af64:	60a3      	str	r3, [r4, #8]
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	6022      	str	r2, [r4, #0]
 800af6c:	701e      	strb	r6, [r3, #0]
 800af6e:	6963      	ldr	r3, [r4, #20]
 800af70:	4283      	cmp	r3, r0
 800af72:	d004      	beq.n	800af7e <__swbuf_r+0x62>
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	07db      	lsls	r3, r3, #31
 800af78:	d506      	bpl.n	800af88 <__swbuf_r+0x6c>
 800af7a:	2e0a      	cmp	r6, #10
 800af7c:	d104      	bne.n	800af88 <__swbuf_r+0x6c>
 800af7e:	4621      	mov	r1, r4
 800af80:	4628      	mov	r0, r5
 800af82:	f7fe fb65 	bl	8009650 <_fflush_r>
 800af86:	b988      	cbnz	r0, 800afac <__swbuf_r+0x90>
 800af88:	4638      	mov	r0, r7
 800af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <__swbuf_r+0x9c>)
 800af8e:	429c      	cmp	r4, r3
 800af90:	d101      	bne.n	800af96 <__swbuf_r+0x7a>
 800af92:	68ac      	ldr	r4, [r5, #8]
 800af94:	e7cf      	b.n	800af36 <__swbuf_r+0x1a>
 800af96:	4b09      	ldr	r3, [pc, #36]	; (800afbc <__swbuf_r+0xa0>)
 800af98:	429c      	cmp	r4, r3
 800af9a:	bf08      	it	eq
 800af9c:	68ec      	ldreq	r4, [r5, #12]
 800af9e:	e7ca      	b.n	800af36 <__swbuf_r+0x1a>
 800afa0:	4621      	mov	r1, r4
 800afa2:	4628      	mov	r0, r5
 800afa4:	f000 f80c 	bl	800afc0 <__swsetup_r>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d0cb      	beq.n	800af44 <__swbuf_r+0x28>
 800afac:	f04f 37ff 	mov.w	r7, #4294967295
 800afb0:	e7ea      	b.n	800af88 <__swbuf_r+0x6c>
 800afb2:	bf00      	nop
 800afb4:	0800b328 	.word	0x0800b328
 800afb8:	0800b348 	.word	0x0800b348
 800afbc:	0800b308 	.word	0x0800b308

0800afc0 <__swsetup_r>:
 800afc0:	4b32      	ldr	r3, [pc, #200]	; (800b08c <__swsetup_r+0xcc>)
 800afc2:	b570      	push	{r4, r5, r6, lr}
 800afc4:	681d      	ldr	r5, [r3, #0]
 800afc6:	4606      	mov	r6, r0
 800afc8:	460c      	mov	r4, r1
 800afca:	b125      	cbz	r5, 800afd6 <__swsetup_r+0x16>
 800afcc:	69ab      	ldr	r3, [r5, #24]
 800afce:	b913      	cbnz	r3, 800afd6 <__swsetup_r+0x16>
 800afd0:	4628      	mov	r0, r5
 800afd2:	f7fb fc9b 	bl	800690c <__sinit>
 800afd6:	4b2e      	ldr	r3, [pc, #184]	; (800b090 <__swsetup_r+0xd0>)
 800afd8:	429c      	cmp	r4, r3
 800afda:	d10f      	bne.n	800affc <__swsetup_r+0x3c>
 800afdc:	686c      	ldr	r4, [r5, #4]
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afe4:	0719      	lsls	r1, r3, #28
 800afe6:	d42c      	bmi.n	800b042 <__swsetup_r+0x82>
 800afe8:	06dd      	lsls	r5, r3, #27
 800afea:	d411      	bmi.n	800b010 <__swsetup_r+0x50>
 800afec:	2309      	movs	r3, #9
 800afee:	6033      	str	r3, [r6, #0]
 800aff0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aff4:	f04f 30ff 	mov.w	r0, #4294967295
 800aff8:	81a3      	strh	r3, [r4, #12]
 800affa:	e03e      	b.n	800b07a <__swsetup_r+0xba>
 800affc:	4b25      	ldr	r3, [pc, #148]	; (800b094 <__swsetup_r+0xd4>)
 800affe:	429c      	cmp	r4, r3
 800b000:	d101      	bne.n	800b006 <__swsetup_r+0x46>
 800b002:	68ac      	ldr	r4, [r5, #8]
 800b004:	e7eb      	b.n	800afde <__swsetup_r+0x1e>
 800b006:	4b24      	ldr	r3, [pc, #144]	; (800b098 <__swsetup_r+0xd8>)
 800b008:	429c      	cmp	r4, r3
 800b00a:	bf08      	it	eq
 800b00c:	68ec      	ldreq	r4, [r5, #12]
 800b00e:	e7e6      	b.n	800afde <__swsetup_r+0x1e>
 800b010:	0758      	lsls	r0, r3, #29
 800b012:	d512      	bpl.n	800b03a <__swsetup_r+0x7a>
 800b014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b016:	b141      	cbz	r1, 800b02a <__swsetup_r+0x6a>
 800b018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b01c:	4299      	cmp	r1, r3
 800b01e:	d002      	beq.n	800b026 <__swsetup_r+0x66>
 800b020:	4630      	mov	r0, r6
 800b022:	f7ff fbcd 	bl	800a7c0 <_free_r>
 800b026:	2300      	movs	r3, #0
 800b028:	6363      	str	r3, [r4, #52]	; 0x34
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	2300      	movs	r3, #0
 800b034:	6063      	str	r3, [r4, #4]
 800b036:	6923      	ldr	r3, [r4, #16]
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	f043 0308 	orr.w	r3, r3, #8
 800b040:	81a3      	strh	r3, [r4, #12]
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	b94b      	cbnz	r3, 800b05a <__swsetup_r+0x9a>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b04c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b050:	d003      	beq.n	800b05a <__swsetup_r+0x9a>
 800b052:	4621      	mov	r1, r4
 800b054:	4630      	mov	r0, r6
 800b056:	f000 f84d 	bl	800b0f4 <__smakebuf_r>
 800b05a:	89a0      	ldrh	r0, [r4, #12]
 800b05c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b060:	f010 0301 	ands.w	r3, r0, #1
 800b064:	d00a      	beq.n	800b07c <__swsetup_r+0xbc>
 800b066:	2300      	movs	r3, #0
 800b068:	60a3      	str	r3, [r4, #8]
 800b06a:	6963      	ldr	r3, [r4, #20]
 800b06c:	425b      	negs	r3, r3
 800b06e:	61a3      	str	r3, [r4, #24]
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	b943      	cbnz	r3, 800b086 <__swsetup_r+0xc6>
 800b074:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b078:	d1ba      	bne.n	800aff0 <__swsetup_r+0x30>
 800b07a:	bd70      	pop	{r4, r5, r6, pc}
 800b07c:	0781      	lsls	r1, r0, #30
 800b07e:	bf58      	it	pl
 800b080:	6963      	ldrpl	r3, [r4, #20]
 800b082:	60a3      	str	r3, [r4, #8]
 800b084:	e7f4      	b.n	800b070 <__swsetup_r+0xb0>
 800b086:	2000      	movs	r0, #0
 800b088:	e7f7      	b.n	800b07a <__swsetup_r+0xba>
 800b08a:	bf00      	nop
 800b08c:	20000010 	.word	0x20000010
 800b090:	0800b328 	.word	0x0800b328
 800b094:	0800b348 	.word	0x0800b348
 800b098:	0800b308 	.word	0x0800b308

0800b09c <abort>:
 800b09c:	2006      	movs	r0, #6
 800b09e:	b508      	push	{r3, lr}
 800b0a0:	f000 f898 	bl	800b1d4 <raise>
 800b0a4:	2001      	movs	r0, #1
 800b0a6:	f7f6 f95c 	bl	8001362 <_exit>

0800b0aa <__swhatbuf_r>:
 800b0aa:	b570      	push	{r4, r5, r6, lr}
 800b0ac:	460e      	mov	r6, r1
 800b0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b2:	4614      	mov	r4, r2
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	461d      	mov	r5, r3
 800b0b8:	b096      	sub	sp, #88	; 0x58
 800b0ba:	da08      	bge.n	800b0ce <__swhatbuf_r+0x24>
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0c2:	602a      	str	r2, [r5, #0]
 800b0c4:	061a      	lsls	r2, r3, #24
 800b0c6:	d410      	bmi.n	800b0ea <__swhatbuf_r+0x40>
 800b0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0cc:	e00e      	b.n	800b0ec <__swhatbuf_r+0x42>
 800b0ce:	466a      	mov	r2, sp
 800b0d0:	f000 f89c 	bl	800b20c <_fstat_r>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	dbf1      	blt.n	800b0bc <__swhatbuf_r+0x12>
 800b0d8:	9a01      	ldr	r2, [sp, #4]
 800b0da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0e2:	425a      	negs	r2, r3
 800b0e4:	415a      	adcs	r2, r3
 800b0e6:	602a      	str	r2, [r5, #0]
 800b0e8:	e7ee      	b.n	800b0c8 <__swhatbuf_r+0x1e>
 800b0ea:	2340      	movs	r3, #64	; 0x40
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	b016      	add	sp, #88	; 0x58
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}

0800b0f4 <__smakebuf_r>:
 800b0f4:	898b      	ldrh	r3, [r1, #12]
 800b0f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0f8:	079d      	lsls	r5, r3, #30
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	d507      	bpl.n	800b110 <__smakebuf_r+0x1c>
 800b100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	6123      	str	r3, [r4, #16]
 800b108:	2301      	movs	r3, #1
 800b10a:	6163      	str	r3, [r4, #20]
 800b10c:	b002      	add	sp, #8
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	466a      	mov	r2, sp
 800b112:	ab01      	add	r3, sp, #4
 800b114:	f7ff ffc9 	bl	800b0aa <__swhatbuf_r>
 800b118:	9900      	ldr	r1, [sp, #0]
 800b11a:	4605      	mov	r5, r0
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7fb fcf1 	bl	8006b04 <_malloc_r>
 800b122:	b948      	cbnz	r0, 800b138 <__smakebuf_r+0x44>
 800b124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b128:	059a      	lsls	r2, r3, #22
 800b12a:	d4ef      	bmi.n	800b10c <__smakebuf_r+0x18>
 800b12c:	f023 0303 	bic.w	r3, r3, #3
 800b130:	f043 0302 	orr.w	r3, r3, #2
 800b134:	81a3      	strh	r3, [r4, #12]
 800b136:	e7e3      	b.n	800b100 <__smakebuf_r+0xc>
 800b138:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <__smakebuf_r+0x7c>)
 800b13a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	6020      	str	r0, [r4, #0]
 800b140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b144:	81a3      	strh	r3, [r4, #12]
 800b146:	9b00      	ldr	r3, [sp, #0]
 800b148:	6120      	str	r0, [r4, #16]
 800b14a:	6163      	str	r3, [r4, #20]
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	b15b      	cbz	r3, 800b168 <__smakebuf_r+0x74>
 800b150:	4630      	mov	r0, r6
 800b152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b156:	f000 f86b 	bl	800b230 <_isatty_r>
 800b15a:	b128      	cbz	r0, 800b168 <__smakebuf_r+0x74>
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	f023 0303 	bic.w	r3, r3, #3
 800b162:	f043 0301 	orr.w	r3, r3, #1
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	89a0      	ldrh	r0, [r4, #12]
 800b16a:	4305      	orrs	r5, r0
 800b16c:	81a5      	strh	r5, [r4, #12]
 800b16e:	e7cd      	b.n	800b10c <__smakebuf_r+0x18>
 800b170:	080068a5 	.word	0x080068a5

0800b174 <_malloc_usable_size_r>:
 800b174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b178:	1f18      	subs	r0, r3, #4
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	bfbc      	itt	lt
 800b17e:	580b      	ldrlt	r3, [r1, r0]
 800b180:	18c0      	addlt	r0, r0, r3
 800b182:	4770      	bx	lr

0800b184 <_raise_r>:
 800b184:	291f      	cmp	r1, #31
 800b186:	b538      	push	{r3, r4, r5, lr}
 800b188:	4604      	mov	r4, r0
 800b18a:	460d      	mov	r5, r1
 800b18c:	d904      	bls.n	800b198 <_raise_r+0x14>
 800b18e:	2316      	movs	r3, #22
 800b190:	6003      	str	r3, [r0, #0]
 800b192:	f04f 30ff 	mov.w	r0, #4294967295
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b19a:	b112      	cbz	r2, 800b1a2 <_raise_r+0x1e>
 800b19c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1a0:	b94b      	cbnz	r3, 800b1b6 <_raise_r+0x32>
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 f830 	bl	800b208 <_getpid_r>
 800b1a8:	462a      	mov	r2, r5
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1b2:	f000 b817 	b.w	800b1e4 <_kill_r>
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d00a      	beq.n	800b1d0 <_raise_r+0x4c>
 800b1ba:	1c59      	adds	r1, r3, #1
 800b1bc:	d103      	bne.n	800b1c6 <_raise_r+0x42>
 800b1be:	2316      	movs	r3, #22
 800b1c0:	6003      	str	r3, [r0, #0]
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	e7e7      	b.n	800b196 <_raise_r+0x12>
 800b1c6:	2400      	movs	r4, #0
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1ce:	4798      	blx	r3
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	e7e0      	b.n	800b196 <_raise_r+0x12>

0800b1d4 <raise>:
 800b1d4:	4b02      	ldr	r3, [pc, #8]	; (800b1e0 <raise+0xc>)
 800b1d6:	4601      	mov	r1, r0
 800b1d8:	6818      	ldr	r0, [r3, #0]
 800b1da:	f7ff bfd3 	b.w	800b184 <_raise_r>
 800b1de:	bf00      	nop
 800b1e0:	20000010 	.word	0x20000010

0800b1e4 <_kill_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4d06      	ldr	r5, [pc, #24]	; (800b204 <_kill_r+0x20>)
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	4608      	mov	r0, r1
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	602b      	str	r3, [r5, #0]
 800b1f2:	f7f6 f8a6 	bl	8001342 <_kill>
 800b1f6:	1c43      	adds	r3, r0, #1
 800b1f8:	d102      	bne.n	800b200 <_kill_r+0x1c>
 800b1fa:	682b      	ldr	r3, [r5, #0]
 800b1fc:	b103      	cbz	r3, 800b200 <_kill_r+0x1c>
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	bd38      	pop	{r3, r4, r5, pc}
 800b202:	bf00      	nop
 800b204:	20001328 	.word	0x20001328

0800b208 <_getpid_r>:
 800b208:	f7f6 b894 	b.w	8001334 <_getpid>

0800b20c <_fstat_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	2300      	movs	r3, #0
 800b210:	4d06      	ldr	r5, [pc, #24]	; (800b22c <_fstat_r+0x20>)
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	4611      	mov	r1, r2
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	f7f6 f8f0 	bl	80013fe <_fstat>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d102      	bne.n	800b228 <_fstat_r+0x1c>
 800b222:	682b      	ldr	r3, [r5, #0]
 800b224:	b103      	cbz	r3, 800b228 <_fstat_r+0x1c>
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	20001328 	.word	0x20001328

0800b230 <_isatty_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	2300      	movs	r3, #0
 800b234:	4d05      	ldr	r5, [pc, #20]	; (800b24c <_isatty_r+0x1c>)
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	f7f6 f8ee 	bl	800141c <_isatty>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_isatty_r+0x1a>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_isatty_r+0x1a>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	20001328 	.word	0x20001328

0800b250 <_init>:
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	bf00      	nop
 800b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b256:	bc08      	pop	{r3}
 800b258:	469e      	mov	lr, r3
 800b25a:	4770      	bx	lr

0800b25c <_fini>:
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	bf00      	nop
 800b260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b262:	bc08      	pop	{r3}
 800b264:	469e      	mov	lr, r3
 800b266:	4770      	bx	lr
